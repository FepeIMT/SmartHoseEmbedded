
SmartHouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f84  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800a144  0800a144  0001a144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a230  0800a230  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800a230  0800a230  0001a230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a238  0800a238  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a238  0800a238  0001a238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a23c  0800a23c  0001a23c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800a240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ec8  20000014  0800a254  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001edc  0800a254  00021edc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ade5  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000045bc  00000000  00000000  0004ae29  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002228  00000000  00000000  0004f3e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002030  00000000  00000000  00051610  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004c7b  00000000  00000000  00053640  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b9be  00000000  00000000  000582bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00131241  00000000  00000000  00073c79  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a4eba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009344  00000000  00000000  001a4f38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000014 	.word	0x20000014
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a12c 	.word	0x0800a12c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000018 	.word	0x20000018
 80001fc:	0800a12c 	.word	0x0800a12c

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b972 	b.w	80004fc <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	4688      	mov	r8, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14b      	bne.n	80002d6 <__udivmoddi4+0xa6>
 800023e:	428a      	cmp	r2, r1
 8000240:	4615      	mov	r5, r2
 8000242:	d967      	bls.n	8000314 <__udivmoddi4+0xe4>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b14a      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024a:	f1c2 0720 	rsb	r7, r2, #32
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	fa20 f707 	lsr.w	r7, r0, r7
 8000256:	4095      	lsls	r5, r2
 8000258:	ea47 0803 	orr.w	r8, r7, r3
 800025c:	4094      	lsls	r4, r2
 800025e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000262:	0c23      	lsrs	r3, r4, #16
 8000264:	fbb8 f7fe 	udiv	r7, r8, lr
 8000268:	fa1f fc85 	uxth.w	ip, r5
 800026c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000270:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000274:	fb07 f10c 	mul.w	r1, r7, ip
 8000278:	4299      	cmp	r1, r3
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x60>
 800027c:	18eb      	adds	r3, r5, r3
 800027e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000282:	f080 811b 	bcs.w	80004bc <__udivmoddi4+0x28c>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 8118 	bls.w	80004bc <__udivmoddi4+0x28c>
 800028c:	3f02      	subs	r7, #2
 800028e:	442b      	add	r3, r5
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0fe 	udiv	r0, r3, lr
 8000298:	fb0e 3310 	mls	r3, lr, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a4:	45a4      	cmp	ip, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x8c>
 80002a8:	192c      	adds	r4, r5, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x290>
 80002b2:	45a4      	cmp	ip, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x290>
 80002b8:	3802      	subs	r0, #2
 80002ba:	442c      	add	r4, r5
 80002bc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c0:	eba4 040c 	sub.w	r4, r4, ip
 80002c4:	2700      	movs	r7, #0
 80002c6:	b11e      	cbz	r6, 80002d0 <__udivmoddi4+0xa0>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c6 4300 	strd	r4, r3, [r6]
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xbe>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80eb 	beq.w	80004b6 <__udivmoddi4+0x286>
 80002e0:	2700      	movs	r7, #0
 80002e2:	e9c6 0100 	strd	r0, r1, [r6]
 80002e6:	4638      	mov	r0, r7
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f783 	clz	r7, r3
 80002f2:	2f00      	cmp	r7, #0
 80002f4:	d147      	bne.n	8000386 <__udivmoddi4+0x156>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd0>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80fa 	bhi.w	80004f4 <__udivmoddi4+0x2c4>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	4698      	mov	r8, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa0>
 800030e:	e9c6 4800 	strd	r4, r8, [r6]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xe8>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 808f 	bne.w	8000440 <__udivmoddi4+0x210>
 8000322:	1b49      	subs	r1, r1, r5
 8000324:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000328:	fa1f f885 	uxth.w	r8, r5
 800032c:	2701      	movs	r7, #1
 800032e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fb0e 111c 	mls	r1, lr, ip, r1
 8000338:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800033c:	fb08 f10c 	mul.w	r1, r8, ip
 8000340:	4299      	cmp	r1, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x124>
 8000344:	18eb      	adds	r3, r5, r3
 8000346:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4299      	cmp	r1, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2bc>
 8000352:	4684      	mov	ip, r0
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb1 f0fe 	udiv	r0, r1, lr
 800035c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000360:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000364:	fb08 f800 	mul.w	r8, r8, r0
 8000368:	45a0      	cmp	r8, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x14c>
 800036c:	192c      	adds	r4, r5, r4
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x14a>
 8000374:	45a0      	cmp	r8, r4
 8000376:	f200 80b6 	bhi.w	80004e6 <__udivmoddi4+0x2b6>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 0408 	sub.w	r4, r4, r8
 8000380:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000384:	e79f      	b.n	80002c6 <__udivmoddi4+0x96>
 8000386:	f1c7 0c20 	rsb	ip, r7, #32
 800038a:	40bb      	lsls	r3, r7
 800038c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000390:	ea4e 0e03 	orr.w	lr, lr, r3
 8000394:	fa01 f407 	lsl.w	r4, r1, r7
 8000398:	fa20 f50c 	lsr.w	r5, r0, ip
 800039c:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a4:	4325      	orrs	r5, r4
 80003a6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003aa:	0c2c      	lsrs	r4, r5, #16
 80003ac:	fb08 3319 	mls	r3, r8, r9, r3
 80003b0:	fa1f fa8e 	uxth.w	sl, lr
 80003b4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b8:	fb09 f40a 	mul.w	r4, r9, sl
 80003bc:	429c      	cmp	r4, r3
 80003be:	fa02 f207 	lsl.w	r2, r2, r7
 80003c2:	fa00 f107 	lsl.w	r1, r0, r7
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1e 0303 	adds.w	r3, lr, r3
 80003cc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d0:	f080 8087 	bcs.w	80004e2 <__udivmoddi4+0x2b2>
 80003d4:	429c      	cmp	r4, r3
 80003d6:	f240 8084 	bls.w	80004e2 <__udivmoddi4+0x2b2>
 80003da:	f1a9 0902 	sub.w	r9, r9, #2
 80003de:	4473      	add	r3, lr
 80003e0:	1b1b      	subs	r3, r3, r4
 80003e2:	b2ad      	uxth	r5, r5
 80003e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f4:	45a2      	cmp	sl, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1e 0404 	adds.w	r4, lr, r4
 80003fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000400:	d26b      	bcs.n	80004da <__udivmoddi4+0x2aa>
 8000402:	45a2      	cmp	sl, r4
 8000404:	d969      	bls.n	80004da <__udivmoddi4+0x2aa>
 8000406:	3802      	subs	r0, #2
 8000408:	4474      	add	r4, lr
 800040a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040e:	fba0 8902 	umull	r8, r9, r0, r2
 8000412:	eba4 040a 	sub.w	r4, r4, sl
 8000416:	454c      	cmp	r4, r9
 8000418:	46c2      	mov	sl, r8
 800041a:	464b      	mov	r3, r9
 800041c:	d354      	bcc.n	80004c8 <__udivmoddi4+0x298>
 800041e:	d051      	beq.n	80004c4 <__udivmoddi4+0x294>
 8000420:	2e00      	cmp	r6, #0
 8000422:	d069      	beq.n	80004f8 <__udivmoddi4+0x2c8>
 8000424:	ebb1 050a 	subs.w	r5, r1, sl
 8000428:	eb64 0403 	sbc.w	r4, r4, r3
 800042c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000430:	40fd      	lsrs	r5, r7
 8000432:	40fc      	lsrs	r4, r7
 8000434:	ea4c 0505 	orr.w	r5, ip, r5
 8000438:	e9c6 5400 	strd	r5, r4, [r6]
 800043c:	2700      	movs	r7, #0
 800043e:	e747      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000440:	f1c2 0320 	rsb	r3, r2, #32
 8000444:	fa20 f703 	lsr.w	r7, r0, r3
 8000448:	4095      	lsls	r5, r2
 800044a:	fa01 f002 	lsl.w	r0, r1, r2
 800044e:	fa21 f303 	lsr.w	r3, r1, r3
 8000452:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000456:	4338      	orrs	r0, r7
 8000458:	0c01      	lsrs	r1, r0, #16
 800045a:	fbb3 f7fe 	udiv	r7, r3, lr
 800045e:	fa1f f885 	uxth.w	r8, r5
 8000462:	fb0e 3317 	mls	r3, lr, r7, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb07 f308 	mul.w	r3, r7, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	fa04 f402 	lsl.w	r4, r4, r2
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x256>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f107 3cff 	add.w	ip, r7, #4294967295
 800047c:	d22f      	bcs.n	80004de <__udivmoddi4+0x2ae>
 800047e:	428b      	cmp	r3, r1
 8000480:	d92d      	bls.n	80004de <__udivmoddi4+0x2ae>
 8000482:	3f02      	subs	r7, #2
 8000484:	4429      	add	r1, r5
 8000486:	1acb      	subs	r3, r1, r3
 8000488:	b281      	uxth	r1, r0
 800048a:	fbb3 f0fe 	udiv	r0, r3, lr
 800048e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000492:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000496:	fb00 f308 	mul.w	r3, r0, r8
 800049a:	428b      	cmp	r3, r1
 800049c:	d907      	bls.n	80004ae <__udivmoddi4+0x27e>
 800049e:	1869      	adds	r1, r5, r1
 80004a0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a4:	d217      	bcs.n	80004d6 <__udivmoddi4+0x2a6>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d915      	bls.n	80004d6 <__udivmoddi4+0x2a6>
 80004aa:	3802      	subs	r0, #2
 80004ac:	4429      	add	r1, r5
 80004ae:	1ac9      	subs	r1, r1, r3
 80004b0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b4:	e73b      	b.n	800032e <__udivmoddi4+0xfe>
 80004b6:	4637      	mov	r7, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e709      	b.n	80002d0 <__udivmoddi4+0xa0>
 80004bc:	4607      	mov	r7, r0
 80004be:	e6e7      	b.n	8000290 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x8c>
 80004c4:	4541      	cmp	r1, r8
 80004c6:	d2ab      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004c8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004cc:	eb69 020e 	sbc.w	r2, r9, lr
 80004d0:	3801      	subs	r0, #1
 80004d2:	4613      	mov	r3, r2
 80004d4:	e7a4      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d6:	4660      	mov	r0, ip
 80004d8:	e7e9      	b.n	80004ae <__udivmoddi4+0x27e>
 80004da:	4618      	mov	r0, r3
 80004dc:	e795      	b.n	800040a <__udivmoddi4+0x1da>
 80004de:	4667      	mov	r7, ip
 80004e0:	e7d1      	b.n	8000486 <__udivmoddi4+0x256>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e77c      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	442c      	add	r4, r5
 80004ea:	e747      	b.n	800037c <__udivmoddi4+0x14c>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	442b      	add	r3, r5
 80004f2:	e72f      	b.n	8000354 <__udivmoddi4+0x124>
 80004f4:	4638      	mov	r0, r7
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xda>
 80004f8:	4637      	mov	r7, r6
 80004fa:	e6e9      	b.n	80002d0 <__udivmoddi4+0xa0>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f001 f91d 	bl	8001742 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f834 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 fa02 	bl	8000914 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000510:	f000 f988 	bl	8000824 <MX_LPUART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000514:	f000 f9d4 	bl	80008c0 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C3_Init();
 8000518:	f000 f944 	bl	80007a4 <MX_I2C3_Init>
  MX_ADC1_Init();
 800051c:	f000 f8cc 	bl	80006b8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&hlpuart1, buffer_in, 2);
 8000520:	2202      	movs	r2, #2
 8000522:	490c      	ldr	r1, [pc, #48]	; (8000554 <main+0x54>)
 8000524:	480c      	ldr	r0, [pc, #48]	; (8000558 <main+0x58>)
 8000526:	f005 faf1 	bl	8005b0c <HAL_UART_Receive_IT>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800052a:	f007 f889 	bl	8007640 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of UpdateScreen */
  UpdateScreenHandle = osThreadNew(StartUpdate, NULL, &UpdateScreen_attributes);
 800052e:	4a0b      	ldr	r2, [pc, #44]	; (800055c <main+0x5c>)
 8000530:	2100      	movs	r1, #0
 8000532:	480b      	ldr	r0, [pc, #44]	; (8000560 <main+0x60>)
 8000534:	f007 f8ee 	bl	8007714 <osThreadNew>
 8000538:	4602      	mov	r2, r0
 800053a:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <main+0x64>)
 800053c:	601a      	str	r2, [r3, #0]

  /* creation of ReadLM35 */
  ReadLM35Handle = osThreadNew(StartRead, NULL, &ReadLM35_attributes);
 800053e:	4a0a      	ldr	r2, [pc, #40]	; (8000568 <main+0x68>)
 8000540:	2100      	movs	r1, #0
 8000542:	480a      	ldr	r0, [pc, #40]	; (800056c <main+0x6c>)
 8000544:	f007 f8e6 	bl	8007714 <osThreadNew>
 8000548:	4602      	mov	r2, r0
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <main+0x70>)
 800054c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800054e:	f007 f8ab 	bl	80076a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000552:	e7fe      	b.n	8000552 <main+0x52>
 8000554:	20001e44 	.word	0x20001e44
 8000558:	20001d44 	.word	0x20001d44
 800055c:	0800a188 	.word	0x0800a188
 8000560:	080011b9 	.word	0x080011b9
 8000564:	20001e38 	.word	0x20001e38
 8000568:	0800a1ac 	.word	0x0800a1ac
 800056c:	080011c9 	.word	0x080011c9
 8000570:	20001e48 	.word	0x20001e48

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b0be      	sub	sp, #248	; 0xf8
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800057e:	2248      	movs	r2, #72	; 0x48
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f009 fdc9 	bl	800a11a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	2298      	movs	r2, #152	; 0x98
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f009 fdbb 	bl	800a11a <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80005a4:	2000      	movs	r0, #0
 80005a6:	f003 f8f3 	bl	8003790 <HAL_PWREx_ControlVoltageScaling>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x40>
  {
    Error_Handler();
 80005b0:	f000 fe4e 	bl	8001250 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005b4:	f003 f8bc 	bl	8003730 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005b8:	4b3e      	ldr	r3, [pc, #248]	; (80006b4 <SystemClock_Config+0x140>)
 80005ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005be:	4a3d      	ldr	r2, [pc, #244]	; (80006b4 <SystemClock_Config+0x140>)
 80005c0:	f023 0318 	bic.w	r3, r3, #24
 80005c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005c8:	2314      	movs	r3, #20
 80005ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005ce:	2301      	movs	r3, #1
 80005d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005d4:	2301      	movs	r3, #1
 80005d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005e0:	2360      	movs	r3, #96	; 0x60
 80005e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005ec:	2301      	movs	r3, #1
 80005ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005f2:	2301      	movs	r3, #1
 80005f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLN = 60;
 80005f8:	233c      	movs	r3, #60	; 0x3c
 80005fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005fe:	2307      	movs	r3, #7
 8000600:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000604:	2302      	movs	r3, #2
 8000606:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800060a:	2302      	movs	r3, #2
 800060c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000614:	4618      	mov	r0, r3
 8000616:	f003 f97f 	bl	8003918 <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000620:	f000 fe16 	bl	8001250 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	230f      	movs	r3, #15
 8000626:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	2303      	movs	r3, #3
 800062c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800063a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000644:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000648:	2105      	movs	r1, #5
 800064a:	4618      	mov	r0, r3
 800064c:	f003 fdec 	bl	8004228 <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000656:	f000 fdfb 	bl	8001250 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C3
 800065a:	f246 1320 	movw	r3, #24864	; 0x6120
 800065e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000660:	2300      	movs	r3, #0
 8000662:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000664:	2300      	movs	r3, #0
 8000666:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000668:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800066c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000670:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000674:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000676:	2301      	movs	r3, #1
 8000678:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800067a:	2301      	movs	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800067e:	2318      	movs	r3, #24
 8000680:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000682:	2307      	movs	r3, #7
 8000684:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000686:	2302      	movs	r3, #2
 8000688:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800068a:	2302      	movs	r3, #2
 800068c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 800068e:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8000692:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	4618      	mov	r0, r3
 8000698:	f004 f8a8 	bl	80047ec <HAL_RCCEx_PeriphCLKConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x132>
  {
    Error_Handler();
 80006a2:	f000 fdd5 	bl	8001250 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006a6:	f004 fc05 	bl	8004eb4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006aa:	bf00      	nop
 80006ac:	37f8      	adds	r7, #248	; 0xf8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40021000 	.word	0x40021000

080006b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	; 0x28
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
 80006d8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006da:	4b2f      	ldr	r3, [pc, #188]	; (8000798 <MX_ADC1_Init+0xe0>)
 80006dc:	4a2f      	ldr	r2, [pc, #188]	; (800079c <MX_ADC1_Init+0xe4>)
 80006de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006e0:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <MX_ADC1_Init+0xe0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006e6:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <MX_ADC1_Init+0xe0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ec:	4b2a      	ldr	r3, [pc, #168]	; (8000798 <MX_ADC1_Init+0xe0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006f2:	4b29      	ldr	r3, [pc, #164]	; (8000798 <MX_ADC1_Init+0xe0>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f8:	4b27      	ldr	r3, [pc, #156]	; (8000798 <MX_ADC1_Init+0xe0>)
 80006fa:	2204      	movs	r2, #4
 80006fc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006fe:	4b26      	ldr	r3, [pc, #152]	; (8000798 <MX_ADC1_Init+0xe0>)
 8000700:	2200      	movs	r2, #0
 8000702:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000704:	4b24      	ldr	r3, [pc, #144]	; (8000798 <MX_ADC1_Init+0xe0>)
 8000706:	2200      	movs	r2, #0
 8000708:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <MX_ADC1_Init+0xe0>)
 800070c:	2201      	movs	r2, #1
 800070e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <MX_ADC1_Init+0xe0>)
 8000712:	2200      	movs	r2, #0
 8000714:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000718:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <MX_ADC1_Init+0xe0>)
 800071a:	2200      	movs	r2, #0
 800071c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800071e:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <MX_ADC1_Init+0xe0>)
 8000720:	2200      	movs	r2, #0
 8000722:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000724:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_ADC1_Init+0xe0>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800072c:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_ADC1_Init+0xe0>)
 800072e:	2200      	movs	r2, #0
 8000730:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000732:	4b19      	ldr	r3, [pc, #100]	; (8000798 <MX_ADC1_Init+0xe0>)
 8000734:	2200      	movs	r2, #0
 8000736:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800073a:	4817      	ldr	r0, [pc, #92]	; (8000798 <MX_ADC1_Init+0xe0>)
 800073c:	f001 fa52 	bl	8001be4 <HAL_ADC_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000746:	f000 fd83 	bl	8001250 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	4619      	mov	r1, r3
 8000754:	4810      	ldr	r0, [pc, #64]	; (8000798 <MX_ADC1_Init+0xe0>)
 8000756:	f002 f9a7 	bl	8002aa8 <HAL_ADCEx_MultiModeConfigChannel>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000760:	f000 fd76 	bl	8001250 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000764:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_ADC1_Init+0xe8>)
 8000766:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000768:	2306      	movs	r3, #6
 800076a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000770:	237f      	movs	r3, #127	; 0x7f
 8000772:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000774:	2304      	movs	r3, #4
 8000776:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	4619      	mov	r1, r3
 8000780:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_ADC1_Init+0xe0>)
 8000782:	f001 fd17 	bl	80021b4 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800078c:	f000 fd60 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	3728      	adds	r7, #40	; 0x28
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20001dd0 	.word	0x20001dd0
 800079c:	50040000 	.word	0x50040000
 80007a0:	43210000 	.word	0x43210000

080007a4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80007a8:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <MX_I2C3_Init+0x74>)
 80007aa:	4a1c      	ldr	r2, [pc, #112]	; (800081c <MX_I2C3_Init+0x78>)
 80007ac:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x107075B0;
 80007ae:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <MX_I2C3_Init+0x74>)
 80007b0:	4a1b      	ldr	r2, [pc, #108]	; (8000820 <MX_I2C3_Init+0x7c>)
 80007b2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80007b4:	4b18      	ldr	r3, [pc, #96]	; (8000818 <MX_I2C3_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ba:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_I2C3_Init+0x74>)
 80007bc:	2201      	movs	r2, #1
 80007be:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_I2C3_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_I2C3_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_I2C3_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_I2C3_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_I2C3_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007de:	480e      	ldr	r0, [pc, #56]	; (8000818 <MX_I2C3_Init+0x74>)
 80007e0:	f002 fd38 	bl	8003254 <HAL_I2C_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80007ea:	f000 fd31 	bl	8001250 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ee:	2100      	movs	r1, #0
 80007f0:	4809      	ldr	r0, [pc, #36]	; (8000818 <MX_I2C3_Init+0x74>)
 80007f2:	f002 fdbe 	bl	8003372 <HAL_I2CEx_ConfigAnalogFilter>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80007fc:	f000 fd28 	bl	8001250 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000800:	2100      	movs	r1, #0
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_I2C3_Init+0x74>)
 8000804:	f002 fe00 	bl	8003408 <HAL_I2CEx_ConfigDigitalFilter>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800080e:	f000 fd1f 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200018f0 	.word	0x200018f0
 800081c:	40005c00 	.word	0x40005c00
 8000820:	107075b0 	.word	0x107075b0

08000824 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000828:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <MX_LPUART1_UART_Init+0x90>)
 800082a:	4a23      	ldr	r2, [pc, #140]	; (80008b8 <MX_LPUART1_UART_Init+0x94>)
 800082c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800082e:	4b21      	ldr	r3, [pc, #132]	; (80008b4 <MX_LPUART1_UART_Init+0x90>)
 8000830:	4a22      	ldr	r2, [pc, #136]	; (80008bc <MX_LPUART1_UART_Init+0x98>)
 8000832:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000834:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <MX_LPUART1_UART_Init+0x90>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800083a:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <MX_LPUART1_UART_Init+0x90>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000840:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <MX_LPUART1_UART_Init+0x90>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000846:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <MX_LPUART1_UART_Init+0x90>)
 8000848:	220c      	movs	r2, #12
 800084a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084c:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <MX_LPUART1_UART_Init+0x90>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000852:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <MX_LPUART1_UART_Init+0x90>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <MX_LPUART1_UART_Init+0x90>)
 800085a:	2200      	movs	r2, #0
 800085c:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800085e:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <MX_LPUART1_UART_Init+0x90>)
 8000860:	2200      	movs	r2, #0
 8000862:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000864:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <MX_LPUART1_UART_Init+0x90>)
 8000866:	2200      	movs	r2, #0
 8000868:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800086a:	4812      	ldr	r0, [pc, #72]	; (80008b4 <MX_LPUART1_UART_Init+0x90>)
 800086c:	f004 ffe4 	bl	8005838 <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000876:	f000 fceb 	bl	8001250 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800087a:	2100      	movs	r1, #0
 800087c:	480d      	ldr	r0, [pc, #52]	; (80008b4 <MX_LPUART1_UART_Init+0x90>)
 800087e:	f006 fb62 	bl	8006f46 <HAL_UARTEx_SetTxFifoThreshold>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000888:	f000 fce2 	bl	8001250 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800088c:	2100      	movs	r1, #0
 800088e:	4809      	ldr	r0, [pc, #36]	; (80008b4 <MX_LPUART1_UART_Init+0x90>)
 8000890:	f006 fb97 	bl	8006fc2 <HAL_UARTEx_SetRxFifoThreshold>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 800089a:	f000 fcd9 	bl	8001250 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_LPUART1_UART_Init+0x90>)
 80008a0:	f006 fb18 	bl	8006ed4 <HAL_UARTEx_DisableFifoMode>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80008aa:	f000 fcd1 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20001d44 	.word	0x20001d44
 80008b8:	40008000 	.word	0x40008000
 80008bc:	00033324 	.word	0x00033324

080008c0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80008c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008cc:	4b10      	ldr	r3, [pc, #64]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80008ce:	2206      	movs	r2, #6
 80008d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008d2:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80008d4:	2202      	movs	r2, #2
 80008d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008d8:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80008da:	2201      	movs	r2, #1
 80008dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008de:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008e4:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80008fe:	f002 fdcf 	bl	80034a0 <HAL_PCD_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8000908:	f000 fca2 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	2000193c 	.word	0x2000193c

08000914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08e      	sub	sp, #56	; 0x38
 8000918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092a:	4b8e      	ldr	r3, [pc, #568]	; (8000b64 <MX_GPIO_Init+0x250>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	4a8d      	ldr	r2, [pc, #564]	; (8000b64 <MX_GPIO_Init+0x250>)
 8000930:	f043 0304 	orr.w	r3, r3, #4
 8000934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000936:	4b8b      	ldr	r3, [pc, #556]	; (8000b64 <MX_GPIO_Init+0x250>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	f003 0304 	and.w	r3, r3, #4
 800093e:	623b      	str	r3, [r7, #32]
 8000940:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000942:	4b88      	ldr	r3, [pc, #544]	; (8000b64 <MX_GPIO_Init+0x250>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	4a87      	ldr	r2, [pc, #540]	; (8000b64 <MX_GPIO_Init+0x250>)
 8000948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800094c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094e:	4b85      	ldr	r3, [pc, #532]	; (8000b64 <MX_GPIO_Init+0x250>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000956:	61fb      	str	r3, [r7, #28]
 8000958:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b82      	ldr	r3, [pc, #520]	; (8000b64 <MX_GPIO_Init+0x250>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4a81      	ldr	r2, [pc, #516]	; (8000b64 <MX_GPIO_Init+0x250>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4b7f      	ldr	r3, [pc, #508]	; (8000b64 <MX_GPIO_Init+0x250>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	61bb      	str	r3, [r7, #24]
 8000970:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	4b7c      	ldr	r3, [pc, #496]	; (8000b64 <MX_GPIO_Init+0x250>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	4a7b      	ldr	r2, [pc, #492]	; (8000b64 <MX_GPIO_Init+0x250>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097e:	4b79      	ldr	r3, [pc, #484]	; (8000b64 <MX_GPIO_Init+0x250>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800098a:	4b76      	ldr	r3, [pc, #472]	; (8000b64 <MX_GPIO_Init+0x250>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	4a75      	ldr	r2, [pc, #468]	; (8000b64 <MX_GPIO_Init+0x250>)
 8000990:	f043 0320 	orr.w	r3, r3, #32
 8000994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000996:	4b73      	ldr	r3, [pc, #460]	; (8000b64 <MX_GPIO_Init+0x250>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	f003 0320 	and.w	r3, r3, #32
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009a2:	4b70      	ldr	r3, [pc, #448]	; (8000b64 <MX_GPIO_Init+0x250>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	4a6f      	ldr	r2, [pc, #444]	; (8000b64 <MX_GPIO_Init+0x250>)
 80009a8:	f043 0310 	orr.w	r3, r3, #16
 80009ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ae:	4b6d      	ldr	r3, [pc, #436]	; (8000b64 <MX_GPIO_Init+0x250>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	f003 0310 	and.w	r3, r3, #16
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ba:	4b6a      	ldr	r3, [pc, #424]	; (8000b64 <MX_GPIO_Init+0x250>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	4a69      	ldr	r2, [pc, #420]	; (8000b64 <MX_GPIO_Init+0x250>)
 80009c0:	f043 0308 	orr.w	r3, r3, #8
 80009c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c6:	4b67      	ldr	r3, [pc, #412]	; (8000b64 <MX_GPIO_Init+0x250>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	f003 0308 	and.w	r3, r3, #8
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009d2:	4b64      	ldr	r3, [pc, #400]	; (8000b64 <MX_GPIO_Init+0x250>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	4a63      	ldr	r2, [pc, #396]	; (8000b64 <MX_GPIO_Init+0x250>)
 80009d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009de:	4b61      	ldr	r3, [pc, #388]	; (8000b64 <MX_GPIO_Init+0x250>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80009ea:	f002 ff85 	bl	80038f8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80009f4:	485c      	ldr	r0, [pc, #368]	; (8000b68 <MX_GPIO_Init+0x254>)
 80009f6:	f002 fbe3 	bl	80031c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 5136 	mov.w	r1, #11648	; 0x2d80
 8000a00:	485a      	ldr	r0, [pc, #360]	; (8000b6c <MX_GPIO_Init+0x258>)
 8000a02:	f002 fbdd 	bl	80031c0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000a0c:	4858      	ldr	r0, [pc, #352]	; (8000b70 <MX_GPIO_Init+0x25c>)
 8000a0e:	f002 fbd7 	bl	80031c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000a18:	4856      	ldr	r0, [pc, #344]	; (8000b74 <MX_GPIO_Init+0x260>)
 8000a1a:	f002 fbd1 	bl	80031c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2140      	movs	r1, #64	; 0x40
 8000a22:	4855      	ldr	r0, [pc, #340]	; (8000b78 <MX_GPIO_Init+0x264>)
 8000a24:	f002 fbcc 	bl	80031c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a28:	23e0      	movs	r3, #224	; 0xe0
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2c:	4b53      	ldr	r3, [pc, #332]	; (8000b7c <MX_GPIO_Init+0x268>)
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a30:	2302      	movs	r3, #2
 8000a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3e:	f002 fa15 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF12 PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000a42:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a48:	4b4c      	ldr	r3, [pc, #304]	; (8000b7c <MX_GPIO_Init+0x268>)
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a54:	4619      	mov	r1, r3
 8000a56:	4844      	ldr	r0, [pc, #272]	; (8000b68 <MX_GPIO_Init+0x254>)
 8000a58:	f002 fa08 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000a5c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a72:	4619      	mov	r1, r3
 8000a74:	483c      	ldr	r0, [pc, #240]	; (8000b68 <MX_GPIO_Init+0x254>)
 8000a76:	f002 f9f9 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 PE11
                           PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11
 8000a7a:	f44f 5336 	mov.w	r3, #11648	; 0x2d80
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a90:	4619      	mov	r1, r3
 8000a92:	4836      	ldr	r0, [pc, #216]	; (8000b6c <MX_GPIO_Init+0x258>)
 8000a94:	f002 f9ea 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8000a98:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a9e:	4b37      	ldr	r3, [pc, #220]	; (8000b7c <MX_GPIO_Init+0x268>)
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4830      	ldr	r0, [pc, #192]	; (8000b70 <MX_GPIO_Init+0x25c>)
 8000aae:	f002 f9dd 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000ab2:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4829      	ldr	r0, [pc, #164]	; (8000b70 <MX_GPIO_Init+0x25c>)
 8000acc:	f002 f9ce 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ad0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4822      	ldr	r0, [pc, #136]	; (8000b74 <MX_GPIO_Init+0x260>)
 8000aea:	f002 f9bf 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000aee:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af4:	4b21      	ldr	r3, [pc, #132]	; (8000b7c <MX_GPIO_Init+0x268>)
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000af8:	2302      	movs	r3, #2
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b00:	4619      	mov	r1, r3
 8000b02:	481c      	ldr	r0, [pc, #112]	; (8000b74 <MX_GPIO_Init+0x260>)
 8000b04:	f002 f9b2 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b08:	2320      	movs	r3, #32
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4817      	ldr	r0, [pc, #92]	; (8000b78 <MX_GPIO_Init+0x264>)
 8000b1c:	f002 f9a6 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b20:	2340      	movs	r3, #64	; 0x40
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b24:	2301      	movs	r3, #1
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b34:	4619      	mov	r1, r3
 8000b36:	4810      	ldr	r0, [pc, #64]	; (8000b78 <MX_GPIO_Init+0x264>)
 8000b38:	f002 f998 	bl	8002e6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2105      	movs	r1, #5
 8000b40:	2017      	movs	r0, #23
 8000b42:	f002 f909 	bl	8002d58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b46:	2017      	movs	r0, #23
 8000b48:	f002 f922 	bl	8002d90 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2105      	movs	r1, #5
 8000b50:	2028      	movs	r0, #40	; 0x28
 8000b52:	f002 f901 	bl	8002d58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b56:	2028      	movs	r0, #40	; 0x28
 8000b58:	f002 f91a 	bl	8002d90 <HAL_NVIC_EnableIRQ>

}
 8000b5c:	bf00      	nop
 8000b5e:	3738      	adds	r7, #56	; 0x38
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40021000 	.word	0x40021000
 8000b68:	48001400 	.word	0x48001400
 8000b6c:	48001000 	.word	0x48001000
 8000b70:	48000400 	.word	0x48000400
 8000b74:	48000c00 	.word	0x48000c00
 8000b78:	48001800 	.word	0x48001800
 8000b7c:	10110000 	.word	0x10110000

08000b80 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
/*ISR routines */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	80fb      	strh	r3, [r7, #6]
	buffer[COMMAND] = Update_Leds;
 8000b8a:	4b88      	ldr	r3, [pc, #544]	; (8000dac <HAL_GPIO_EXTI_Callback+0x22c>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	701a      	strb	r2, [r3, #0]
	switch(GPIO_Pin)
 8000b90:	88fb      	ldrh	r3, [r7, #6]
 8000b92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b96:	d03b      	beq.n	8000c10 <HAL_GPIO_EXTI_Callback+0x90>
 8000b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b9c:	dc0c      	bgt.n	8000bb8 <HAL_GPIO_EXTI_Callback+0x38>
 8000b9e:	2b40      	cmp	r3, #64	; 0x40
 8000ba0:	d060      	beq.n	8000c64 <HAL_GPIO_EXTI_Callback+0xe4>
 8000ba2:	2b40      	cmp	r3, #64	; 0x40
 8000ba4:	dc02      	bgt.n	8000bac <HAL_GPIO_EXTI_Callback+0x2c>
 8000ba6:	2b20      	cmp	r3, #32
 8000ba8:	d047      	beq.n	8000c3a <HAL_GPIO_EXTI_Callback+0xba>
 8000baa:	e0f4      	b.n	8000d96 <HAL_GPIO_EXTI_Callback+0x216>
 8000bac:	2b80      	cmp	r3, #128	; 0x80
 8000bae:	d06e      	beq.n	8000c8e <HAL_GPIO_EXTI_Callback+0x10e>
 8000bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bb4:	d017      	beq.n	8000be6 <HAL_GPIO_EXTI_Callback+0x66>
 8000bb6:	e0ee      	b.n	8000d96 <HAL_GPIO_EXTI_Callback+0x216>
 8000bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bbc:	f000 80b9 	beq.w	8000d32 <HAL_GPIO_EXTI_Callback+0x1b2>
 8000bc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bc4:	dc08      	bgt.n	8000bd8 <HAL_GPIO_EXTI_Callback+0x58>
 8000bc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000bca:	f000 80cf 	beq.w	8000d6c <HAL_GPIO_EXTI_Callback+0x1ec>
 8000bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bd2:	f000 809b 	beq.w	8000d0c <HAL_GPIO_EXTI_Callback+0x18c>
 8000bd6:	e0de      	b.n	8000d96 <HAL_GPIO_EXTI_Callback+0x216>
 8000bd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000bdc:	d06c      	beq.n	8000cb8 <HAL_GPIO_EXTI_Callback+0x138>
 8000bde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000be2:	d07e      	beq.n	8000ce2 <HAL_GPIO_EXTI_Callback+0x162>
 8000be4:	e0d7      	b.n	8000d96 <HAL_GPIO_EXTI_Callback+0x216>
	{
		case GPIO_PIN_8:
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);
 8000be6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bea:	4871      	ldr	r0, [pc, #452]	; (8000db0 <HAL_GPIO_EXTI_Callback+0x230>)
 8000bec:	f002 fb00 	bl	80031f0 <HAL_GPIO_TogglePin>
			if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11))
 8000bf0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bf4:	486e      	ldr	r0, [pc, #440]	; (8000db0 <HAL_GPIO_EXTI_Callback+0x230>)
 8000bf6:	f002 facb 	bl	8003190 <HAL_GPIO_ReadPin>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d003      	beq.n	8000c08 <HAL_GPIO_EXTI_Callback+0x88>
			{
				buffer[DATA] = ROOM1_ON;
 8000c00:	4b6a      	ldr	r3, [pc, #424]	; (8000dac <HAL_GPIO_EXTI_Callback+0x22c>)
 8000c02:	2202      	movs	r2, #2
 8000c04:	705a      	strb	r2, [r3, #1]
			}
			else
			{
				buffer[DATA] = ROOM1_OFF;
			}
			break;
 8000c06:	e0c6      	b.n	8000d96 <HAL_GPIO_EXTI_Callback+0x216>
				buffer[DATA] = ROOM1_OFF;
 8000c08:	4b68      	ldr	r3, [pc, #416]	; (8000dac <HAL_GPIO_EXTI_Callback+0x22c>)
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	705a      	strb	r2, [r3, #1]
			break;
 8000c0e:	e0c2      	b.n	8000d96 <HAL_GPIO_EXTI_Callback+0x216>
		case GPIO_PIN_9:
			HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_14);
 8000c10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c14:	4867      	ldr	r0, [pc, #412]	; (8000db4 <HAL_GPIO_EXTI_Callback+0x234>)
 8000c16:	f002 faeb 	bl	80031f0 <HAL_GPIO_TogglePin>
			if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_14))
 8000c1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c1e:	4865      	ldr	r0, [pc, #404]	; (8000db4 <HAL_GPIO_EXTI_Callback+0x234>)
 8000c20:	f002 fab6 	bl	8003190 <HAL_GPIO_ReadPin>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d003      	beq.n	8000c32 <HAL_GPIO_EXTI_Callback+0xb2>
			{
				buffer[DATA] = ROOM2_ON;
 8000c2a:	4b60      	ldr	r3, [pc, #384]	; (8000dac <HAL_GPIO_EXTI_Callback+0x22c>)
 8000c2c:	2204      	movs	r2, #4
 8000c2e:	705a      	strb	r2, [r3, #1]
			}
			else
			{
				buffer[DATA] = ROOM2_OFF;
			}
			break;
 8000c30:	e0b1      	b.n	8000d96 <HAL_GPIO_EXTI_Callback+0x216>
				buffer[DATA] = ROOM2_OFF;
 8000c32:	4b5e      	ldr	r3, [pc, #376]	; (8000dac <HAL_GPIO_EXTI_Callback+0x22c>)
 8000c34:	2205      	movs	r2, #5
 8000c36:	705a      	strb	r2, [r3, #1]
			break;
 8000c38:	e0ad      	b.n	8000d96 <HAL_GPIO_EXTI_Callback+0x216>
		case GPIO_PIN_5:
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_13);
 8000c3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3e:	485c      	ldr	r0, [pc, #368]	; (8000db0 <HAL_GPIO_EXTI_Callback+0x230>)
 8000c40:	f002 fad6 	bl	80031f0 <HAL_GPIO_TogglePin>
			if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13))
 8000c44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c48:	4859      	ldr	r0, [pc, #356]	; (8000db0 <HAL_GPIO_EXTI_Callback+0x230>)
 8000c4a:	f002 faa1 	bl	8003190 <HAL_GPIO_ReadPin>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d003      	beq.n	8000c5c <HAL_GPIO_EXTI_Callback+0xdc>
			{
				buffer[DATA] = ROOM3_ON;
 8000c54:	4b55      	ldr	r3, [pc, #340]	; (8000dac <HAL_GPIO_EXTI_Callback+0x22c>)
 8000c56:	2206      	movs	r2, #6
 8000c58:	705a      	strb	r2, [r3, #1]
			}
			else
			{
				buffer[DATA] = ROOM3_OFF;
			}
			break;
 8000c5a:	e09c      	b.n	8000d96 <HAL_GPIO_EXTI_Callback+0x216>
				buffer[DATA] = ROOM3_OFF;
 8000c5c:	4b53      	ldr	r3, [pc, #332]	; (8000dac <HAL_GPIO_EXTI_Callback+0x22c>)
 8000c5e:	2207      	movs	r2, #7
 8000c60:	705a      	strb	r2, [r3, #1]
			break;
 8000c62:	e098      	b.n	8000d96 <HAL_GPIO_EXTI_Callback+0x216>
		case GPIO_PIN_6:
			HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_15);
 8000c64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c68:	4852      	ldr	r0, [pc, #328]	; (8000db4 <HAL_GPIO_EXTI_Callback+0x234>)
 8000c6a:	f002 fac1 	bl	80031f0 <HAL_GPIO_TogglePin>
			if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_15))
 8000c6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c72:	4850      	ldr	r0, [pc, #320]	; (8000db4 <HAL_GPIO_EXTI_Callback+0x234>)
 8000c74:	f002 fa8c 	bl	8003190 <HAL_GPIO_ReadPin>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d003      	beq.n	8000c86 <HAL_GPIO_EXTI_Callback+0x106>
			{
				buffer[DATA] = BATHROOM1_ON;
 8000c7e:	4b4b      	ldr	r3, [pc, #300]	; (8000dac <HAL_GPIO_EXTI_Callback+0x22c>)
 8000c80:	2208      	movs	r2, #8
 8000c82:	705a      	strb	r2, [r3, #1]
			}
			else
			{
				buffer[DATA] = BATHROOM1_OFF;
			}
			break;
 8000c84:	e087      	b.n	8000d96 <HAL_GPIO_EXTI_Callback+0x216>
				buffer[DATA] = BATHROOM1_OFF;
 8000c86:	4b49      	ldr	r3, [pc, #292]	; (8000dac <HAL_GPIO_EXTI_Callback+0x22c>)
 8000c88:	2209      	movs	r2, #9
 8000c8a:	705a      	strb	r2, [r3, #1]
			break;
 8000c8c:	e083      	b.n	8000d96 <HAL_GPIO_EXTI_Callback+0x216>
		case GPIO_PIN_7:
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_8);
 8000c8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c92:	4849      	ldr	r0, [pc, #292]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x238>)
 8000c94:	f002 faac 	bl	80031f0 <HAL_GPIO_TogglePin>
			if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8))
 8000c98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c9c:	4846      	ldr	r0, [pc, #280]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x238>)
 8000c9e:	f002 fa77 	bl	8003190 <HAL_GPIO_ReadPin>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d003      	beq.n	8000cb0 <HAL_GPIO_EXTI_Callback+0x130>
			{
				buffer[DATA] = BATHROOM2_ON;
 8000ca8:	4b40      	ldr	r3, [pc, #256]	; (8000dac <HAL_GPIO_EXTI_Callback+0x22c>)
 8000caa:	220a      	movs	r2, #10
 8000cac:	705a      	strb	r2, [r3, #1]
			}
			else
			{
				buffer[DATA] = BATHROOM2_OFF;
			}
			break;
 8000cae:	e072      	b.n	8000d96 <HAL_GPIO_EXTI_Callback+0x216>
				buffer[DATA] = BATHROOM2_OFF;
 8000cb0:	4b3e      	ldr	r3, [pc, #248]	; (8000dac <HAL_GPIO_EXTI_Callback+0x22c>)
 8000cb2:	220b      	movs	r2, #11
 8000cb4:	705a      	strb	r2, [r3, #1]
			break;
 8000cb6:	e06e      	b.n	8000d96 <HAL_GPIO_EXTI_Callback+0x216>
		case GPIO_PIN_14:
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_9);
 8000cb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cbc:	483e      	ldr	r0, [pc, #248]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x238>)
 8000cbe:	f002 fa97 	bl	80031f0 <HAL_GPIO_TogglePin>
			if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9))
 8000cc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc6:	483c      	ldr	r0, [pc, #240]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x238>)
 8000cc8:	f002 fa62 	bl	8003190 <HAL_GPIO_ReadPin>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d003      	beq.n	8000cda <HAL_GPIO_EXTI_Callback+0x15a>
			{
				buffer[DATA] = KITCHEN_ON;
 8000cd2:	4b36      	ldr	r3, [pc, #216]	; (8000dac <HAL_GPIO_EXTI_Callback+0x22c>)
 8000cd4:	220c      	movs	r2, #12
 8000cd6:	705a      	strb	r2, [r3, #1]
			}
			else
			{
				buffer[DATA] = KITCHEN_OFF;
			}
			break;
 8000cd8:	e05d      	b.n	8000d96 <HAL_GPIO_EXTI_Callback+0x216>
				buffer[DATA] = KITCHEN_OFF;
 8000cda:	4b34      	ldr	r3, [pc, #208]	; (8000dac <HAL_GPIO_EXTI_Callback+0x22c>)
 8000cdc:	220d      	movs	r2, #13
 8000cde:	705a      	strb	r2, [r3, #1]
			break;
 8000ce0:	e059      	b.n	8000d96 <HAL_GPIO_EXTI_Callback+0x216>
		case GPIO_PIN_15:
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 8000ce2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ce6:	4832      	ldr	r0, [pc, #200]	; (8000db0 <HAL_GPIO_EXTI_Callback+0x230>)
 8000ce8:	f002 fa82 	bl	80031f0 <HAL_GPIO_TogglePin>
			if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_8))
 8000cec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cf0:	482f      	ldr	r0, [pc, #188]	; (8000db0 <HAL_GPIO_EXTI_Callback+0x230>)
 8000cf2:	f002 fa4d 	bl	8003190 <HAL_GPIO_ReadPin>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d003      	beq.n	8000d04 <HAL_GPIO_EXTI_Callback+0x184>
			{
				buffer[DATA] = GARDEN_ON;
 8000cfc:	4b2b      	ldr	r3, [pc, #172]	; (8000dac <HAL_GPIO_EXTI_Callback+0x22c>)
 8000cfe:	220e      	movs	r2, #14
 8000d00:	705a      	strb	r2, [r3, #1]
			}
			else
			{
				buffer[DATA] = GARDEN_OFF;
			}
			break;
 8000d02:	e048      	b.n	8000d96 <HAL_GPIO_EXTI_Callback+0x216>
				buffer[DATA] = GARDEN_OFF;
 8000d04:	4b29      	ldr	r3, [pc, #164]	; (8000dac <HAL_GPIO_EXTI_Callback+0x22c>)
 8000d06:	220f      	movs	r2, #15
 8000d08:	705a      	strb	r2, [r3, #1]
			break;
 8000d0a:	e044      	b.n	8000d96 <HAL_GPIO_EXTI_Callback+0x216>
		case GPIO_PIN_12:
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_7);
 8000d0c:	2180      	movs	r1, #128	; 0x80
 8000d0e:	4828      	ldr	r0, [pc, #160]	; (8000db0 <HAL_GPIO_EXTI_Callback+0x230>)
 8000d10:	f002 fa6e 	bl	80031f0 <HAL_GPIO_TogglePin>
			if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7))
 8000d14:	2180      	movs	r1, #128	; 0x80
 8000d16:	4826      	ldr	r0, [pc, #152]	; (8000db0 <HAL_GPIO_EXTI_Callback+0x230>)
 8000d18:	f002 fa3a 	bl	8003190 <HAL_GPIO_ReadPin>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d003      	beq.n	8000d2a <HAL_GPIO_EXTI_Callback+0x1aa>
			{
				buffer[DATA] = LIVINGROOM_ON;
 8000d22:	4b22      	ldr	r3, [pc, #136]	; (8000dac <HAL_GPIO_EXTI_Callback+0x22c>)
 8000d24:	2210      	movs	r2, #16
 8000d26:	705a      	strb	r2, [r3, #1]
			}
			else
			{
				buffer[DATA] = LIVINGROOM_OFF;
			}
			break;
 8000d28:	e035      	b.n	8000d96 <HAL_GPIO_EXTI_Callback+0x216>
				buffer[DATA] = LIVINGROOM_OFF;
 8000d2a:	4b20      	ldr	r3, [pc, #128]	; (8000dac <HAL_GPIO_EXTI_Callback+0x22c>)
 8000d2c:	2211      	movs	r2, #17
 8000d2e:	705a      	strb	r2, [r3, #1]
			break;
 8000d30:	e031      	b.n	8000d96 <HAL_GPIO_EXTI_Callback+0x216>
		case GPIO_PIN_13:
			if(current_mode == Manual_Mode)
 8000d32:	4b22      	ldr	r3, [pc, #136]	; (8000dbc <HAL_GPIO_EXTI_Callback+0x23c>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	d114      	bne.n	8000d64 <HAL_GPIO_EXTI_Callback+0x1e4>
			{
				HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 8000d3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d3e:	481c      	ldr	r0, [pc, #112]	; (8000db0 <HAL_GPIO_EXTI_Callback+0x230>)
 8000d40:	f002 fa56 	bl	80031f0 <HAL_GPIO_TogglePin>
				if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10))
 8000d44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d48:	4819      	ldr	r0, [pc, #100]	; (8000db0 <HAL_GPIO_EXTI_Callback+0x230>)
 8000d4a:	f002 fa21 	bl	8003190 <HAL_GPIO_ReadPin>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d003      	beq.n	8000d5c <HAL_GPIO_EXTI_Callback+0x1dc>
				{
					buffer[DATA] = FAN_ON;
 8000d54:	4b15      	ldr	r3, [pc, #84]	; (8000dac <HAL_GPIO_EXTI_Callback+0x22c>)
 8000d56:	2212      	movs	r2, #18
 8000d58:	705a      	strb	r2, [r3, #1]
			}
			else
			{
				buffer[DATA] = 50;
			}
			break;
 8000d5a:	e01c      	b.n	8000d96 <HAL_GPIO_EXTI_Callback+0x216>
					buffer[DATA] = FAN_OFF;
 8000d5c:	4b13      	ldr	r3, [pc, #76]	; (8000dac <HAL_GPIO_EXTI_Callback+0x22c>)
 8000d5e:	2213      	movs	r2, #19
 8000d60:	705a      	strb	r2, [r3, #1]
			break;
 8000d62:	e018      	b.n	8000d96 <HAL_GPIO_EXTI_Callback+0x216>
				buffer[DATA] = 50;
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <HAL_GPIO_EXTI_Callback+0x22c>)
 8000d66:	2232      	movs	r2, #50	; 0x32
 8000d68:	705a      	strb	r2, [r3, #1]
			break;
 8000d6a:	e014      	b.n	8000d96 <HAL_GPIO_EXTI_Callback+0x216>
		case GPIO_PIN_11:
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 8000d6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d70:	480f      	ldr	r0, [pc, #60]	; (8000db0 <HAL_GPIO_EXTI_Callback+0x230>)
 8000d72:	f002 fa3d 	bl	80031f0 <HAL_GPIO_TogglePin>
			if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_8))
 8000d76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d7a:	480d      	ldr	r0, [pc, #52]	; (8000db0 <HAL_GPIO_EXTI_Callback+0x230>)
 8000d7c:	f002 fa08 	bl	8003190 <HAL_GPIO_ReadPin>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <HAL_GPIO_EXTI_Callback+0x20e>
			{
				buffer[DATA] = GARDEN_ON;
 8000d86:	4b09      	ldr	r3, [pc, #36]	; (8000dac <HAL_GPIO_EXTI_Callback+0x22c>)
 8000d88:	220e      	movs	r2, #14
 8000d8a:	705a      	strb	r2, [r3, #1]
			}
			else
			{
				buffer[DATA] = GARDEN_OFF;
			}
			break;
 8000d8c:	e002      	b.n	8000d94 <HAL_GPIO_EXTI_Callback+0x214>
				buffer[DATA] = GARDEN_OFF;
 8000d8e:	4b07      	ldr	r3, [pc, #28]	; (8000dac <HAL_GPIO_EXTI_Callback+0x22c>)
 8000d90:	220f      	movs	r2, #15
 8000d92:	705a      	strb	r2, [r3, #1]
			break;
 8000d94:	bf00      	nop
	}


	HAL_UART_Transmit(&hlpuart1, buffer, 2, HAL_MAX_DELAY);
 8000d96:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	4903      	ldr	r1, [pc, #12]	; (8000dac <HAL_GPIO_EXTI_Callback+0x22c>)
 8000d9e:	4808      	ldr	r0, [pc, #32]	; (8000dc0 <HAL_GPIO_EXTI_Callback+0x240>)
 8000da0:	f004 fd9a 	bl	80058d8 <HAL_UART_Transmit>

}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20001e40 	.word	0x20001e40
 8000db0:	48001000 	.word	0x48001000
 8000db4:	48001400 	.word	0x48001400
 8000db8:	48000c00 	.word	0x48000c00
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	20001d44 	.word	0x20001d44

08000dc4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]


	if(buffer_in[COMMAND] == Change_State)
 8000dcc:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <HAL_UART_RxCpltCallback+0x68>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d105      	bne.n	8000de0 <HAL_UART_RxCpltCallback+0x1c>
	{
		ChangePinState(buffer_in[1]);
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_UART_RxCpltCallback+0x68>)
 8000dd6:	785b      	ldrb	r3, [r3, #1]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 f8f1 	bl	8000fc0 <ChangePinState>
 8000dde:	e01c      	b.n	8000e1a <HAL_UART_RxCpltCallback+0x56>
	}
	else if(buffer_in[COMMAND] == Request_FirstFloor)
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_UART_RxCpltCallback+0x68>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d102      	bne.n	8000dee <HAL_UART_RxCpltCallback+0x2a>
	{
		UpdateFirstFloor();
 8000de8:	f000 f826 	bl	8000e38 <UpdateFirstFloor>
 8000dec:	e015      	b.n	8000e1a <HAL_UART_RxCpltCallback+0x56>
	}
	else if(buffer_in[COMMAND] == Request_SecondFloor)
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <HAL_UART_RxCpltCallback+0x68>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d102      	bne.n	8000dfc <HAL_UART_RxCpltCallback+0x38>
	{
		UpdateSecondFloor();
 8000df6:	f000 f877 	bl	8000ee8 <UpdateSecondFloor>
 8000dfa:	e00e      	b.n	8000e1a <HAL_UART_RxCpltCallback+0x56>
	}
	else if(buffer_in[COMMAND] == Automatic_Mode)
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <HAL_UART_RxCpltCallback+0x68>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b03      	cmp	r3, #3
 8000e02:	d103      	bne.n	8000e0c <HAL_UART_RxCpltCallback+0x48>
	{
		current_mode = Automatic_Mode;
 8000e04:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_UART_RxCpltCallback+0x6c>)
 8000e06:	2203      	movs	r2, #3
 8000e08:	701a      	strb	r2, [r3, #0]
 8000e0a:	e006      	b.n	8000e1a <HAL_UART_RxCpltCallback+0x56>
	}
	else if(buffer_in[COMMAND] == Manual_Mode)
 8000e0c:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <HAL_UART_RxCpltCallback+0x68>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	d102      	bne.n	8000e1a <HAL_UART_RxCpltCallback+0x56>
	{
		current_mode = Manual_Mode;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_UART_RxCpltCallback+0x6c>)
 8000e16:	2204      	movs	r2, #4
 8000e18:	701a      	strb	r2, [r3, #0]
	}

	//The UART Port will be ready when arrive another data
	HAL_UART_Receive_IT(&hlpuart1, buffer_in, 2);
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	4903      	ldr	r1, [pc, #12]	; (8000e2c <HAL_UART_RxCpltCallback+0x68>)
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <HAL_UART_RxCpltCallback+0x70>)
 8000e20:	f004 fe74 	bl	8005b0c <HAL_UART_Receive_IT>
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20001e44 	.word	0x20001e44
 8000e30:	20000000 	.word	0x20000000
 8000e34:	20001d44 	.word	0x20001d44

08000e38 <UpdateFirstFloor>:


void UpdateFirstFloor(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	buffer[COMMAND] = Data_Requested;
 8000e3c:	4b25      	ldr	r3, [pc, #148]	; (8000ed4 <UpdateFirstFloor+0x9c>)
 8000e3e:	2202      	movs	r2, #2
 8000e40:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_15))
 8000e42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e46:	4824      	ldr	r0, [pc, #144]	; (8000ed8 <UpdateFirstFloor+0xa0>)
 8000e48:	f002 f9a2 	bl	8003190 <HAL_GPIO_ReadPin>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d009      	beq.n	8000e66 <UpdateFirstFloor+0x2e>
	{
		buffer[DATA] = BATHROOM1_ON;
 8000e52:	4b20      	ldr	r3, [pc, #128]	; (8000ed4 <UpdateFirstFloor+0x9c>)
 8000e54:	2208      	movs	r2, #8
 8000e56:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&hlpuart1, buffer, 2, HAL_MAX_DELAY);
 8000e58:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	491d      	ldr	r1, [pc, #116]	; (8000ed4 <UpdateFirstFloor+0x9c>)
 8000e60:	481e      	ldr	r0, [pc, #120]	; (8000edc <UpdateFirstFloor+0xa4>)
 8000e62:	f004 fd39 	bl	80058d8 <HAL_UART_Transmit>

	}

	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9))
 8000e66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e6a:	481d      	ldr	r0, [pc, #116]	; (8000ee0 <UpdateFirstFloor+0xa8>)
 8000e6c:	f002 f990 	bl	8003190 <HAL_GPIO_ReadPin>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d009      	beq.n	8000e8a <UpdateFirstFloor+0x52>
	{
		buffer[DATA] = KITCHEN_ON;
 8000e76:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <UpdateFirstFloor+0x9c>)
 8000e78:	220c      	movs	r2, #12
 8000e7a:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&hlpuart1, buffer, 2, HAL_MAX_DELAY);
 8000e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e80:	2202      	movs	r2, #2
 8000e82:	4914      	ldr	r1, [pc, #80]	; (8000ed4 <UpdateFirstFloor+0x9c>)
 8000e84:	4815      	ldr	r0, [pc, #84]	; (8000edc <UpdateFirstFloor+0xa4>)
 8000e86:	f004 fd27 	bl	80058d8 <HAL_UART_Transmit>
	}

	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_8))
 8000e8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e8e:	4815      	ldr	r0, [pc, #84]	; (8000ee4 <UpdateFirstFloor+0xac>)
 8000e90:	f002 f97e 	bl	8003190 <HAL_GPIO_ReadPin>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d009      	beq.n	8000eae <UpdateFirstFloor+0x76>
	{
		buffer[DATA] = GARDEN_ON;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <UpdateFirstFloor+0x9c>)
 8000e9c:	220e      	movs	r2, #14
 8000e9e:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&hlpuart1, buffer, 2, HAL_MAX_DELAY);
 8000ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea4:	2202      	movs	r2, #2
 8000ea6:	490b      	ldr	r1, [pc, #44]	; (8000ed4 <UpdateFirstFloor+0x9c>)
 8000ea8:	480c      	ldr	r0, [pc, #48]	; (8000edc <UpdateFirstFloor+0xa4>)
 8000eaa:	f004 fd15 	bl	80058d8 <HAL_UART_Transmit>
	}

	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7))
 8000eae:	2180      	movs	r1, #128	; 0x80
 8000eb0:	480c      	ldr	r0, [pc, #48]	; (8000ee4 <UpdateFirstFloor+0xac>)
 8000eb2:	f002 f96d 	bl	8003190 <HAL_GPIO_ReadPin>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d009      	beq.n	8000ed0 <UpdateFirstFloor+0x98>
	{
		buffer[DATA] = LIVINGROOM_ON;
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <UpdateFirstFloor+0x9c>)
 8000ebe:	2210      	movs	r2, #16
 8000ec0:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&hlpuart1, buffer, 2, HAL_MAX_DELAY);
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	4902      	ldr	r1, [pc, #8]	; (8000ed4 <UpdateFirstFloor+0x9c>)
 8000eca:	4804      	ldr	r0, [pc, #16]	; (8000edc <UpdateFirstFloor+0xa4>)
 8000ecc:	f004 fd04 	bl	80058d8 <HAL_UART_Transmit>
	}

}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20001e40 	.word	0x20001e40
 8000ed8:	48001400 	.word	0x48001400
 8000edc:	20001d44 	.word	0x20001d44
 8000ee0:	48000c00 	.word	0x48000c00
 8000ee4:	48001000 	.word	0x48001000

08000ee8 <UpdateSecondFloor>:

void UpdateSecondFloor(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	buffer[COMMAND] = Data_Requested;
 8000eec:	4b2f      	ldr	r3, [pc, #188]	; (8000fac <UpdateSecondFloor+0xc4>)
 8000eee:	2202      	movs	r2, #2
 8000ef0:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11))
 8000ef2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ef6:	482e      	ldr	r0, [pc, #184]	; (8000fb0 <UpdateSecondFloor+0xc8>)
 8000ef8:	f002 f94a 	bl	8003190 <HAL_GPIO_ReadPin>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d009      	beq.n	8000f16 <UpdateSecondFloor+0x2e>
	{
		buffer[DATA] = ROOM1_ON;
 8000f02:	4b2a      	ldr	r3, [pc, #168]	; (8000fac <UpdateSecondFloor+0xc4>)
 8000f04:	2202      	movs	r2, #2
 8000f06:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&hlpuart1, buffer, 2, HAL_MAX_DELAY);
 8000f08:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	4927      	ldr	r1, [pc, #156]	; (8000fac <UpdateSecondFloor+0xc4>)
 8000f10:	4828      	ldr	r0, [pc, #160]	; (8000fb4 <UpdateSecondFloor+0xcc>)
 8000f12:	f004 fce1 	bl	80058d8 <HAL_UART_Transmit>
	}

	if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_14))
 8000f16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f1a:	4827      	ldr	r0, [pc, #156]	; (8000fb8 <UpdateSecondFloor+0xd0>)
 8000f1c:	f002 f938 	bl	8003190 <HAL_GPIO_ReadPin>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d009      	beq.n	8000f3a <UpdateSecondFloor+0x52>
	{
		buffer[DATA] = ROOM2_ON;
 8000f26:	4b21      	ldr	r3, [pc, #132]	; (8000fac <UpdateSecondFloor+0xc4>)
 8000f28:	2204      	movs	r2, #4
 8000f2a:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&hlpuart1, buffer, 2, HAL_MAX_DELAY);
 8000f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f30:	2202      	movs	r2, #2
 8000f32:	491e      	ldr	r1, [pc, #120]	; (8000fac <UpdateSecondFloor+0xc4>)
 8000f34:	481f      	ldr	r0, [pc, #124]	; (8000fb4 <UpdateSecondFloor+0xcc>)
 8000f36:	f004 fccf 	bl	80058d8 <HAL_UART_Transmit>
	}

	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13))
 8000f3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f3e:	481c      	ldr	r0, [pc, #112]	; (8000fb0 <UpdateSecondFloor+0xc8>)
 8000f40:	f002 f926 	bl	8003190 <HAL_GPIO_ReadPin>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d009      	beq.n	8000f5e <UpdateSecondFloor+0x76>
	{
		buffer[DATA] = ROOM3_ON;
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <UpdateSecondFloor+0xc4>)
 8000f4c:	2206      	movs	r2, #6
 8000f4e:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&hlpuart1, buffer, 2, HAL_MAX_DELAY);
 8000f50:	f04f 33ff 	mov.w	r3, #4294967295
 8000f54:	2202      	movs	r2, #2
 8000f56:	4915      	ldr	r1, [pc, #84]	; (8000fac <UpdateSecondFloor+0xc4>)
 8000f58:	4816      	ldr	r0, [pc, #88]	; (8000fb4 <UpdateSecondFloor+0xcc>)
 8000f5a:	f004 fcbd 	bl	80058d8 <HAL_UART_Transmit>
	}

	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8))
 8000f5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f62:	4816      	ldr	r0, [pc, #88]	; (8000fbc <UpdateSecondFloor+0xd4>)
 8000f64:	f002 f914 	bl	8003190 <HAL_GPIO_ReadPin>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d009      	beq.n	8000f82 <UpdateSecondFloor+0x9a>
	{
		buffer[DATA] = BATHROOM2_ON;
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <UpdateSecondFloor+0xc4>)
 8000f70:	220a      	movs	r2, #10
 8000f72:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&hlpuart1, buffer, 2, HAL_MAX_DELAY);
 8000f74:	f04f 33ff 	mov.w	r3, #4294967295
 8000f78:	2202      	movs	r2, #2
 8000f7a:	490c      	ldr	r1, [pc, #48]	; (8000fac <UpdateSecondFloor+0xc4>)
 8000f7c:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <UpdateSecondFloor+0xcc>)
 8000f7e:	f004 fcab 	bl	80058d8 <HAL_UART_Transmit>
	}

	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10))
 8000f82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f86:	480a      	ldr	r0, [pc, #40]	; (8000fb0 <UpdateSecondFloor+0xc8>)
 8000f88:	f002 f902 	bl	8003190 <HAL_GPIO_ReadPin>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d009      	beq.n	8000fa6 <UpdateSecondFloor+0xbe>
	{
		buffer[DATA] = FAN_ON;
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <UpdateSecondFloor+0xc4>)
 8000f94:	2212      	movs	r2, #18
 8000f96:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&hlpuart1, buffer, 2, HAL_MAX_DELAY);
 8000f98:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	4903      	ldr	r1, [pc, #12]	; (8000fac <UpdateSecondFloor+0xc4>)
 8000fa0:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <UpdateSecondFloor+0xcc>)
 8000fa2:	f004 fc99 	bl	80058d8 <HAL_UART_Transmit>
	}

}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20001e40 	.word	0x20001e40
 8000fb0:	48001000 	.word	0x48001000
 8000fb4:	20001d44 	.word	0x20001d44
 8000fb8:	48001400 	.word	0x48001400
 8000fbc:	48000c00 	.word	0x48000c00

08000fc0 <ChangePinState>:

void ChangePinState(uint8_t data)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
	buffer[COMMAND] = Update_Leds;
 8000fca:	4b76      	ldr	r3, [pc, #472]	; (80011a4 <ChangePinState+0x1e4>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	701a      	strb	r2, [r3, #0]

	switch(data)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	3b02      	subs	r3, #2
 8000fd4:	2b11      	cmp	r3, #17
 8000fd6:	f200 80d9 	bhi.w	800118c <ChangePinState+0x1cc>
 8000fda:	a201      	add	r2, pc, #4	; (adr r2, 8000fe0 <ChangePinState+0x20>)
 8000fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe0:	08001029 	.word	0x08001029
 8000fe4:	0800103d 	.word	0x0800103d
 8000fe8:	08001051 	.word	0x08001051
 8000fec:	08001065 	.word	0x08001065
 8000ff0:	08001079 	.word	0x08001079
 8000ff4:	0800108d 	.word	0x0800108d
 8000ff8:	080010a1 	.word	0x080010a1
 8000ffc:	080010b5 	.word	0x080010b5
 8001000:	080010c9 	.word	0x080010c9
 8001004:	080010dd 	.word	0x080010dd
 8001008:	080010f1 	.word	0x080010f1
 800100c:	08001105 	.word	0x08001105
 8001010:	08001119 	.word	0x08001119
 8001014:	0800112d 	.word	0x0800112d
 8001018:	08001141 	.word	0x08001141
 800101c:	08001153 	.word	0x08001153
 8001020:	08001165 	.word	0x08001165
 8001024:	08001179 	.word	0x08001179
	{
		case ROOM1_ON:
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, ENCENDIDO);
 8001028:	2201      	movs	r2, #1
 800102a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800102e:	485e      	ldr	r0, [pc, #376]	; (80011a8 <ChangePinState+0x1e8>)
 8001030:	f002 f8c6 	bl	80031c0 <HAL_GPIO_WritePin>
			buffer[DATA] = ROOM1_ON;
 8001034:	4b5b      	ldr	r3, [pc, #364]	; (80011a4 <ChangePinState+0x1e4>)
 8001036:	2202      	movs	r2, #2
 8001038:	705a      	strb	r2, [r3, #1]
			break;
 800103a:	e0a7      	b.n	800118c <ChangePinState+0x1cc>
		case ROOM1_OFF:
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, APAGADO);
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001042:	4859      	ldr	r0, [pc, #356]	; (80011a8 <ChangePinState+0x1e8>)
 8001044:	f002 f8bc 	bl	80031c0 <HAL_GPIO_WritePin>
			buffer[DATA] = ROOM1_OFF;
 8001048:	4b56      	ldr	r3, [pc, #344]	; (80011a4 <ChangePinState+0x1e4>)
 800104a:	2203      	movs	r2, #3
 800104c:	705a      	strb	r2, [r3, #1]
			break;
 800104e:	e09d      	b.n	800118c <ChangePinState+0x1cc>
		case ROOM2_ON:
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, ENCENDIDO);
 8001050:	2201      	movs	r2, #1
 8001052:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001056:	4855      	ldr	r0, [pc, #340]	; (80011ac <ChangePinState+0x1ec>)
 8001058:	f002 f8b2 	bl	80031c0 <HAL_GPIO_WritePin>
			buffer[DATA] = ROOM2_ON;
 800105c:	4b51      	ldr	r3, [pc, #324]	; (80011a4 <ChangePinState+0x1e4>)
 800105e:	2204      	movs	r2, #4
 8001060:	705a      	strb	r2, [r3, #1]
			break;
 8001062:	e093      	b.n	800118c <ChangePinState+0x1cc>
		case ROOM2_OFF:
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, APAGADO);
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800106a:	4850      	ldr	r0, [pc, #320]	; (80011ac <ChangePinState+0x1ec>)
 800106c:	f002 f8a8 	bl	80031c0 <HAL_GPIO_WritePin>
			buffer[DATA] = ROOM2_OFF;
 8001070:	4b4c      	ldr	r3, [pc, #304]	; (80011a4 <ChangePinState+0x1e4>)
 8001072:	2205      	movs	r2, #5
 8001074:	705a      	strb	r2, [r3, #1]
			break;
 8001076:	e089      	b.n	800118c <ChangePinState+0x1cc>
		case ROOM3_ON:
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, ENCENDIDO);
 8001078:	2201      	movs	r2, #1
 800107a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800107e:	484a      	ldr	r0, [pc, #296]	; (80011a8 <ChangePinState+0x1e8>)
 8001080:	f002 f89e 	bl	80031c0 <HAL_GPIO_WritePin>
			buffer[DATA] = ROOM3_ON;
 8001084:	4b47      	ldr	r3, [pc, #284]	; (80011a4 <ChangePinState+0x1e4>)
 8001086:	2206      	movs	r2, #6
 8001088:	705a      	strb	r2, [r3, #1]
			break;
 800108a:	e07f      	b.n	800118c <ChangePinState+0x1cc>
		case ROOM3_OFF:
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, APAGADO);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001092:	4845      	ldr	r0, [pc, #276]	; (80011a8 <ChangePinState+0x1e8>)
 8001094:	f002 f894 	bl	80031c0 <HAL_GPIO_WritePin>
			buffer[DATA] = ROOM3_OFF;
 8001098:	4b42      	ldr	r3, [pc, #264]	; (80011a4 <ChangePinState+0x1e4>)
 800109a:	2207      	movs	r2, #7
 800109c:	705a      	strb	r2, [r3, #1]
			break;
 800109e:	e075      	b.n	800118c <ChangePinState+0x1cc>
		case BATHROOM1_ON:
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, ENCENDIDO);
 80010a0:	2201      	movs	r2, #1
 80010a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010a6:	4841      	ldr	r0, [pc, #260]	; (80011ac <ChangePinState+0x1ec>)
 80010a8:	f002 f88a 	bl	80031c0 <HAL_GPIO_WritePin>
			buffer[DATA] = BATHROOM1_ON;
 80010ac:	4b3d      	ldr	r3, [pc, #244]	; (80011a4 <ChangePinState+0x1e4>)
 80010ae:	2208      	movs	r2, #8
 80010b0:	705a      	strb	r2, [r3, #1]
			break;
 80010b2:	e06b      	b.n	800118c <ChangePinState+0x1cc>
		case BATHROOM1_OFF:
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, APAGADO);
 80010b4:	2200      	movs	r2, #0
 80010b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ba:	483c      	ldr	r0, [pc, #240]	; (80011ac <ChangePinState+0x1ec>)
 80010bc:	f002 f880 	bl	80031c0 <HAL_GPIO_WritePin>
			buffer[DATA] = BATHROOM1_OFF;
 80010c0:	4b38      	ldr	r3, [pc, #224]	; (80011a4 <ChangePinState+0x1e4>)
 80010c2:	2209      	movs	r2, #9
 80010c4:	705a      	strb	r2, [r3, #1]
			break;
 80010c6:	e061      	b.n	800118c <ChangePinState+0x1cc>
		case BATHROOM2_ON:
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, ENCENDIDO);
 80010c8:	2201      	movs	r2, #1
 80010ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ce:	4838      	ldr	r0, [pc, #224]	; (80011b0 <ChangePinState+0x1f0>)
 80010d0:	f002 f876 	bl	80031c0 <HAL_GPIO_WritePin>
			buffer[DATA] = BATHROOM2_ON;
 80010d4:	4b33      	ldr	r3, [pc, #204]	; (80011a4 <ChangePinState+0x1e4>)
 80010d6:	220a      	movs	r2, #10
 80010d8:	705a      	strb	r2, [r3, #1]
			break;
 80010da:	e057      	b.n	800118c <ChangePinState+0x1cc>
		case BATHROOM2_OFF:
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, APAGADO);
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e2:	4833      	ldr	r0, [pc, #204]	; (80011b0 <ChangePinState+0x1f0>)
 80010e4:	f002 f86c 	bl	80031c0 <HAL_GPIO_WritePin>
			buffer[DATA] = BATHROOM2_OFF;
 80010e8:	4b2e      	ldr	r3, [pc, #184]	; (80011a4 <ChangePinState+0x1e4>)
 80010ea:	220b      	movs	r2, #11
 80010ec:	705a      	strb	r2, [r3, #1]
			break;
 80010ee:	e04d      	b.n	800118c <ChangePinState+0x1cc>
		case KITCHEN_ON:
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, ENCENDIDO);
 80010f0:	2201      	movs	r2, #1
 80010f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f6:	482e      	ldr	r0, [pc, #184]	; (80011b0 <ChangePinState+0x1f0>)
 80010f8:	f002 f862 	bl	80031c0 <HAL_GPIO_WritePin>
			buffer[DATA] = KITCHEN_ON;
 80010fc:	4b29      	ldr	r3, [pc, #164]	; (80011a4 <ChangePinState+0x1e4>)
 80010fe:	220c      	movs	r2, #12
 8001100:	705a      	strb	r2, [r3, #1]
			break;
 8001102:	e043      	b.n	800118c <ChangePinState+0x1cc>
		case KITCHEN_OFF:
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, APAGADO);
 8001104:	2200      	movs	r2, #0
 8001106:	f44f 7100 	mov.w	r1, #512	; 0x200
 800110a:	4829      	ldr	r0, [pc, #164]	; (80011b0 <ChangePinState+0x1f0>)
 800110c:	f002 f858 	bl	80031c0 <HAL_GPIO_WritePin>
			buffer[DATA] = KITCHEN_OFF;
 8001110:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <ChangePinState+0x1e4>)
 8001112:	220d      	movs	r2, #13
 8001114:	705a      	strb	r2, [r3, #1]
			break;
 8001116:	e039      	b.n	800118c <ChangePinState+0x1cc>
		case GARDEN_ON:
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, ENCENDIDO);
 8001118:	2201      	movs	r2, #1
 800111a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800111e:	4822      	ldr	r0, [pc, #136]	; (80011a8 <ChangePinState+0x1e8>)
 8001120:	f002 f84e 	bl	80031c0 <HAL_GPIO_WritePin>
			buffer[DATA] = GARDEN_ON;
 8001124:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <ChangePinState+0x1e4>)
 8001126:	220e      	movs	r2, #14
 8001128:	705a      	strb	r2, [r3, #1]
			break;
 800112a:	e02f      	b.n	800118c <ChangePinState+0x1cc>
		case GARDEN_OFF:
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, APAGADO);
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001132:	481d      	ldr	r0, [pc, #116]	; (80011a8 <ChangePinState+0x1e8>)
 8001134:	f002 f844 	bl	80031c0 <HAL_GPIO_WritePin>
			buffer[DATA] = GARDEN_OFF;
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <ChangePinState+0x1e4>)
 800113a:	220f      	movs	r2, #15
 800113c:	705a      	strb	r2, [r3, #1]
			break;
 800113e:	e025      	b.n	800118c <ChangePinState+0x1cc>
		case LIVINGROOM_ON:
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, ENCENDIDO);
 8001140:	2201      	movs	r2, #1
 8001142:	2180      	movs	r1, #128	; 0x80
 8001144:	4818      	ldr	r0, [pc, #96]	; (80011a8 <ChangePinState+0x1e8>)
 8001146:	f002 f83b 	bl	80031c0 <HAL_GPIO_WritePin>
			buffer[DATA] = LIVINGROOM_ON;
 800114a:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <ChangePinState+0x1e4>)
 800114c:	2210      	movs	r2, #16
 800114e:	705a      	strb	r2, [r3, #1]
			break;
 8001150:	e01c      	b.n	800118c <ChangePinState+0x1cc>
		case LIVINGROOM_OFF:
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, APAGADO);
 8001152:	2200      	movs	r2, #0
 8001154:	2180      	movs	r1, #128	; 0x80
 8001156:	4814      	ldr	r0, [pc, #80]	; (80011a8 <ChangePinState+0x1e8>)
 8001158:	f002 f832 	bl	80031c0 <HAL_GPIO_WritePin>
			buffer[DATA] = LIVINGROOM_OFF;
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <ChangePinState+0x1e4>)
 800115e:	2211      	movs	r2, #17
 8001160:	705a      	strb	r2, [r3, #1]
			break;
 8001162:	e013      	b.n	800118c <ChangePinState+0x1cc>
		case FAN_ON:
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, ENCENDIDO);
 8001164:	2201      	movs	r2, #1
 8001166:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800116a:	480f      	ldr	r0, [pc, #60]	; (80011a8 <ChangePinState+0x1e8>)
 800116c:	f002 f828 	bl	80031c0 <HAL_GPIO_WritePin>
			buffer[DATA] = FAN_ON;
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <ChangePinState+0x1e4>)
 8001172:	2212      	movs	r2, #18
 8001174:	705a      	strb	r2, [r3, #1]
			break;
 8001176:	e009      	b.n	800118c <ChangePinState+0x1cc>
		case FAN_OFF:
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, APAGADO);
 8001178:	2200      	movs	r2, #0
 800117a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800117e:	480a      	ldr	r0, [pc, #40]	; (80011a8 <ChangePinState+0x1e8>)
 8001180:	f002 f81e 	bl	80031c0 <HAL_GPIO_WritePin>
			buffer[DATA] = FAN_OFF;
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <ChangePinState+0x1e4>)
 8001186:	2213      	movs	r2, #19
 8001188:	705a      	strb	r2, [r3, #1]
			break;
 800118a:	bf00      	nop
	}
	//Transimit the confirmation that the state change LED/FAN
	HAL_UART_Transmit(&hlpuart1, buffer, 2, HAL_MAX_DELAY);
 800118c:	f04f 33ff 	mov.w	r3, #4294967295
 8001190:	2202      	movs	r2, #2
 8001192:	4904      	ldr	r1, [pc, #16]	; (80011a4 <ChangePinState+0x1e4>)
 8001194:	4807      	ldr	r0, [pc, #28]	; (80011b4 <ChangePinState+0x1f4>)
 8001196:	f004 fb9f 	bl	80058d8 <HAL_UART_Transmit>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20001e40 	.word	0x20001e40
 80011a8:	48001000 	.word	0x48001000
 80011ac:	48001400 	.word	0x48001400
 80011b0:	48000c00 	.word	0x48000c00
 80011b4:	20001d44 	.word	0x20001d44

080011b8 <StartUpdate>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUpdate */
void StartUpdate(void *argument)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  osDelay(1);
 80011c0:	2001      	movs	r0, #1
 80011c2:	f006 fb4d 	bl	8007860 <osDelay>
 80011c6:	e7fb      	b.n	80011c0 <StartUpdate+0x8>

080011c8 <StartRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRead */
void StartRead(void *argument)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRead */
  /* Infinite loop */
  for(;;)
  {
	//GET ADC Value
	HAL_ADC_Start(&hadc1);
 80011d0:	4811      	ldr	r0, [pc, #68]	; (8001218 <StartRead+0x50>)
 80011d2:	f000 fe57 	bl	8001e84 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80011d6:	f04f 31ff 	mov.w	r1, #4294967295
 80011da:	480f      	ldr	r0, [pc, #60]	; (8001218 <StartRead+0x50>)
 80011dc:	f000 ff0c 	bl	8001ff8 <HAL_ADC_PollForConversion>
	temp_LM35 = HAL_ADC_GetValue(&hadc1)/10;
 80011e0:	480d      	ldr	r0, [pc, #52]	; (8001218 <StartRead+0x50>)
 80011e2:	f000 ffd9 	bl	8002198 <HAL_ADC_GetValue>
 80011e6:	4602      	mov	r2, r0
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <StartRead+0x54>)
 80011ea:	fba3 2302 	umull	r2, r3, r3, r2
 80011ee:	08db      	lsrs	r3, r3, #3
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <StartRead+0x58>)
 80011f4:	701a      	strb	r2, [r3, #0]
	buffer[DATA] = temp_LM35;
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <StartRead+0x58>)
 80011f8:	781a      	ldrb	r2, [r3, #0]
 80011fa:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <StartRead+0x5c>)
 80011fc:	705a      	strb	r2, [r3, #1]
	buffer[COMMAND] = Update_Temp;
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <StartRead+0x5c>)
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit_IT(&hlpuart1, buffer, 2);
 8001204:	2202      	movs	r2, #2
 8001206:	4907      	ldr	r1, [pc, #28]	; (8001224 <StartRead+0x5c>)
 8001208:	4807      	ldr	r0, [pc, #28]	; (8001228 <StartRead+0x60>)
 800120a:	f004 fbfb 	bl	8005a04 <HAL_UART_Transmit_IT>

	osDelay(250);
 800120e:	20fa      	movs	r0, #250	; 0xfa
 8001210:	f006 fb26 	bl	8007860 <osDelay>
	HAL_ADC_Start(&hadc1);
 8001214:	e7dc      	b.n	80011d0 <StartRead+0x8>
 8001216:	bf00      	nop
 8001218:	20001dd0 	.word	0x20001dd0
 800121c:	cccccccd 	.word	0xcccccccd
 8001220:	20001e3c 	.word	0x20001e3c
 8001224:	20001e40 	.word	0x20001e40
 8001228:	20001d44 	.word	0x20001d44

0800122c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a04      	ldr	r2, [pc, #16]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d101      	bne.n	8001242 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800123e:	f000 fa99 	bl	8001774 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40001000 	.word	0x40001000

08001250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001254:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001256:	e7fe      	b.n	8001256 <Error_Handler+0x6>

08001258 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <HAL_MspInit+0x4c>)
 8001260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001262:	4a10      	ldr	r2, [pc, #64]	; (80012a4 <HAL_MspInit+0x4c>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6613      	str	r3, [r2, #96]	; 0x60
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <HAL_MspInit+0x4c>)
 800126c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <HAL_MspInit+0x4c>)
 8001278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127a:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <HAL_MspInit+0x4c>)
 800127c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001280:	6593      	str	r3, [r2, #88]	; 0x58
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <HAL_MspInit+0x4c>)
 8001284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	210f      	movs	r1, #15
 8001292:	f06f 0001 	mvn.w	r0, #1
 8001296:	f001 fd5f 	bl	8002d58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000

080012a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a15      	ldr	r2, [pc, #84]	; (800131c <HAL_ADC_MspInit+0x74>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d123      	bne.n	8001312 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <HAL_ADC_MspInit+0x78>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ce:	4a14      	ldr	r2, [pc, #80]	; (8001320 <HAL_ADC_MspInit+0x78>)
 80012d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d6:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_ADC_MspInit+0x78>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e2:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <HAL_ADC_MspInit+0x78>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	4a0e      	ldr	r2, [pc, #56]	; (8001320 <HAL_ADC_MspInit+0x78>)
 80012e8:	f043 0302 	orr.w	r3, r3, #2
 80012ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ee:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <HAL_ADC_MspInit+0x78>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012fa:	2302      	movs	r3, #2
 80012fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012fe:	230b      	movs	r3, #11
 8001300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	4805      	ldr	r0, [pc, #20]	; (8001324 <HAL_ADC_MspInit+0x7c>)
 800130e:	f001 fdad 	bl	8002e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001312:	bf00      	nop
 8001314:	3728      	adds	r7, #40	; 0x28
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	50040000 	.word	0x50040000
 8001320:	40021000 	.word	0x40021000
 8001324:	48000400 	.word	0x48000400

08001328 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	; 0x28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a17      	ldr	r2, [pc, #92]	; (80013a4 <HAL_I2C_MspInit+0x7c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d127      	bne.n	800139a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800134a:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <HAL_I2C_MspInit+0x80>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	4a16      	ldr	r2, [pc, #88]	; (80013a8 <HAL_I2C_MspInit+0x80>)
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001356:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <HAL_I2C_MspInit+0x80>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001362:	2303      	movs	r3, #3
 8001364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001366:	2312      	movs	r3, #18
 8001368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800136a:	2301      	movs	r3, #1
 800136c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136e:	2303      	movs	r3, #3
 8001370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001372:	2304      	movs	r3, #4
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4619      	mov	r1, r3
 800137c:	480b      	ldr	r0, [pc, #44]	; (80013ac <HAL_I2C_MspInit+0x84>)
 800137e:	f001 fd75 	bl	8002e6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <HAL_I2C_MspInit+0x80>)
 8001384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001386:	4a08      	ldr	r2, [pc, #32]	; (80013a8 <HAL_I2C_MspInit+0x80>)
 8001388:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800138c:	6593      	str	r3, [r2, #88]	; 0x58
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_I2C_MspInit+0x80>)
 8001390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001392:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800139a:	bf00      	nop
 800139c:	3728      	adds	r7, #40	; 0x28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40005c00 	.word	0x40005c00
 80013a8:	40021000 	.word	0x40021000
 80013ac:	48000800 	.word	0x48000800

080013b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	; 0x28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a1c      	ldr	r2, [pc, #112]	; (8001440 <HAL_UART_MspInit+0x90>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d132      	bne.n	8001438 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80013d2:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <HAL_UART_MspInit+0x94>)
 80013d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d6:	4a1b      	ldr	r2, [pc, #108]	; (8001444 <HAL_UART_MspInit+0x94>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	65d3      	str	r3, [r2, #92]	; 0x5c
 80013de:	4b19      	ldr	r3, [pc, #100]	; (8001444 <HAL_UART_MspInit+0x94>)
 80013e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013ea:	4b16      	ldr	r3, [pc, #88]	; (8001444 <HAL_UART_MspInit+0x94>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	4a15      	ldr	r2, [pc, #84]	; (8001444 <HAL_UART_MspInit+0x94>)
 80013f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f6:	4b13      	ldr	r3, [pc, #76]	; (8001444 <HAL_UART_MspInit+0x94>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8001402:	f002 fa79 	bl	80038f8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001406:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800140a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001418:	2308      	movs	r3, #8
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4619      	mov	r1, r3
 8001422:	4809      	ldr	r0, [pc, #36]	; (8001448 <HAL_UART_MspInit+0x98>)
 8001424:	f001 fd22 	bl	8002e6c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8001428:	2200      	movs	r2, #0
 800142a:	2105      	movs	r1, #5
 800142c:	2046      	movs	r0, #70	; 0x46
 800142e:	f001 fc93 	bl	8002d58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001432:	2046      	movs	r0, #70	; 0x46
 8001434:	f001 fcac 	bl	8002d90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001438:	bf00      	nop
 800143a:	3728      	adds	r7, #40	; 0x28
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40008000 	.word	0x40008000
 8001444:	40021000 	.word	0x40021000
 8001448:	48001800 	.word	0x48001800

0800144c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800146c:	d154      	bne.n	8001518 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	4b2c      	ldr	r3, [pc, #176]	; (8001520 <HAL_PCD_MspInit+0xd4>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001472:	4a2b      	ldr	r2, [pc, #172]	; (8001520 <HAL_PCD_MspInit+0xd4>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800147a:	4b29      	ldr	r3, [pc, #164]	; (8001520 <HAL_PCD_MspInit+0xd4>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001486:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800148a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148c:	2302      	movs	r3, #2
 800148e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001494:	2303      	movs	r3, #3
 8001496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001498:	230a      	movs	r3, #10
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4619      	mov	r1, r3
 80014a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a6:	f001 fce1 	bl	8002e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80014aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	4619      	mov	r1, r3
 80014be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c2:	f001 fcd3 	bl	8002e6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014c6:	4b16      	ldr	r3, [pc, #88]	; (8001520 <HAL_PCD_MspInit+0xd4>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ca:	4a15      	ldr	r2, [pc, #84]	; (8001520 <HAL_PCD_MspInit+0xd4>)
 80014cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d2:	4b13      	ldr	r3, [pc, #76]	; (8001520 <HAL_PCD_MspInit+0xd4>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <HAL_PCD_MspInit+0xd4>)
 80014e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d114      	bne.n	8001514 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ea:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <HAL_PCD_MspInit+0xd4>)
 80014ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ee:	4a0c      	ldr	r2, [pc, #48]	; (8001520 <HAL_PCD_MspInit+0xd4>)
 80014f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f4:	6593      	str	r3, [r2, #88]	; 0x58
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <HAL_PCD_MspInit+0xd4>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001502:	f002 f9e9 	bl	80038d8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_PCD_MspInit+0xd4>)
 8001508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150a:	4a05      	ldr	r2, [pc, #20]	; (8001520 <HAL_PCD_MspInit+0xd4>)
 800150c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001510:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001512:	e001      	b.n	8001518 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8001514:	f002 f9e0 	bl	80038d8 <HAL_PWREx_EnableVddUSB>
}
 8001518:	bf00      	nop
 800151a:	3728      	adds	r7, #40	; 0x28
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40021000 	.word	0x40021000

08001524 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08c      	sub	sp, #48	; 0x30
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001534:	2200      	movs	r2, #0
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	2036      	movs	r0, #54	; 0x36
 800153a:	f001 fc0d 	bl	8002d58 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800153e:	2036      	movs	r0, #54	; 0x36
 8001540:	f001 fc26 	bl	8002d90 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001544:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <HAL_InitTick+0xa0>)
 8001546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001548:	4a1e      	ldr	r2, [pc, #120]	; (80015c4 <HAL_InitTick+0xa0>)
 800154a:	f043 0310 	orr.w	r3, r3, #16
 800154e:	6593      	str	r3, [r2, #88]	; 0x58
 8001550:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <HAL_InitTick+0xa0>)
 8001552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001554:	f003 0310 	and.w	r3, r3, #16
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800155c:	f107 0210 	add.w	r2, r7, #16
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	4611      	mov	r1, r2
 8001566:	4618      	mov	r0, r3
 8001568:	f003 f84c 	bl	8004604 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800156c:	f003 f81e 	bl	80045ac <HAL_RCC_GetPCLK1Freq>
 8001570:	4603      	mov	r3, r0
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001578:	4a13      	ldr	r2, [pc, #76]	; (80015c8 <HAL_InitTick+0xa4>)
 800157a:	fba2 2303 	umull	r2, r3, r2, r3
 800157e:	0c9b      	lsrs	r3, r3, #18
 8001580:	3b01      	subs	r3, #1
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <HAL_InitTick+0xa8>)
 8001586:	4a12      	ldr	r2, [pc, #72]	; (80015d0 <HAL_InitTick+0xac>)
 8001588:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <HAL_InitTick+0xa8>)
 800158c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001590:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001592:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <HAL_InitTick+0xa8>)
 8001594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001596:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <HAL_InitTick+0xa8>)
 800159a:	2200      	movs	r2, #0
 800159c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_InitTick+0xa8>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015a4:	4809      	ldr	r0, [pc, #36]	; (80015cc <HAL_InitTick+0xa8>)
 80015a6:	f003 fe75 	bl	8005294 <HAL_TIM_Base_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d104      	bne.n	80015ba <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80015b0:	4806      	ldr	r0, [pc, #24]	; (80015cc <HAL_InitTick+0xa8>)
 80015b2:	f003 fed1 	bl	8005358 <HAL_TIM_Base_Start_IT>
 80015b6:	4603      	mov	r3, r0
 80015b8:	e000      	b.n	80015bc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3730      	adds	r7, #48	; 0x30
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40021000 	.word	0x40021000
 80015c8:	431bde83 	.word	0x431bde83
 80015cc:	20001e4c 	.word	0x20001e4c
 80015d0:	40001000 	.word	0x40001000

080015d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <NMI_Handler+0x4>

080015da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015de:	e7fe      	b.n	80015de <HardFault_Handler+0x4>

080015e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <MemManage_Handler+0x4>

080015e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <BusFault_Handler+0x4>

080015ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <UsageFault_Handler+0x4>

080015f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001604:	2020      	movs	r0, #32
 8001606:	f001 fe0d 	bl	8003224 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800160a:	2040      	movs	r0, #64	; 0x40
 800160c:	f001 fe0a 	bl	8003224 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001610:	2080      	movs	r0, #128	; 0x80
 8001612:	f001 fe07 	bl	8003224 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001616:	f44f 7080 	mov.w	r0, #256	; 0x100
 800161a:	f001 fe03 	bl	8003224 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800161e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001622:	f001 fdff 	bl	8003224 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}

0800162a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800162e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001632:	f001 fdf7 	bl	8003224 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001636:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800163a:	f001 fdf3 	bl	8003224 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800163e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001642:	f001 fdef 	bl	8003224 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001646:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800164a:	f001 fdeb 	bl	8003224 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800164e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001652:	f001 fde7 	bl	8003224 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <TIM6_DAC_IRQHandler+0x10>)
 8001662:	f003 fee9 	bl	8005438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20001e4c 	.word	0x20001e4c

08001670 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <LPUART1_IRQHandler+0x10>)
 8001676:	f004 fb21 	bl	8005cbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20001d44 	.word	0x20001d44

08001684 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001688:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <SystemInit+0x64>)
 800168a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800168e:	4a16      	ldr	r2, [pc, #88]	; (80016e8 <SystemInit+0x64>)
 8001690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001698:	4b14      	ldr	r3, [pc, #80]	; (80016ec <SystemInit+0x68>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a13      	ldr	r2, [pc, #76]	; (80016ec <SystemInit+0x68>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <SystemInit+0x68>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <SystemInit+0x68>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a0f      	ldr	r2, [pc, #60]	; (80016ec <SystemInit+0x68>)
 80016b0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80016b4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80016b8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <SystemInit+0x68>)
 80016bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016c0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016c2:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <SystemInit+0x68>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a09      	ldr	r2, [pc, #36]	; (80016ec <SystemInit+0x68>)
 80016c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016cc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80016ce:	4b07      	ldr	r3, [pc, #28]	; (80016ec <SystemInit+0x68>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <SystemInit+0x64>)
 80016d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016da:	609a      	str	r2, [r3, #8]
#endif
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00
 80016ec:	40021000 	.word	0x40021000

080016f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001728 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016f4:	f7ff ffc6 	bl	8001684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80016f8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80016fa:	e003      	b.n	8001704 <LoopCopyDataInit>

080016fc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80016fe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001700:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001702:	3104      	adds	r1, #4

08001704 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001704:	480a      	ldr	r0, [pc, #40]	; (8001730 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001706:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001708:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800170a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800170c:	d3f6      	bcc.n	80016fc <CopyDataInit>
	ldr	r2, =_sbss
 800170e:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001710:	e002      	b.n	8001718 <LoopFillZerobss>

08001712 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001712:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001714:	f842 3b04 	str.w	r3, [r2], #4

08001718 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <LoopForever+0x16>)
	cmp	r2, r3
 800171a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800171c:	d3f9      	bcc.n	8001712 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800171e:	f008 fccd 	bl	800a0bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001722:	f7fe feed 	bl	8000500 <main>

08001726 <LoopForever>:

LoopForever:
    b LoopForever
 8001726:	e7fe      	b.n	8001726 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001728:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 800172c:	0800a240 	.word	0x0800a240
	ldr	r0, =_sdata
 8001730:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001734:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8001738:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 800173c:	20001edc 	.word	0x20001edc

08001740 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001740:	e7fe      	b.n	8001740 <ADC1_2_IRQHandler>

08001742 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800174c:	2003      	movs	r0, #3
 800174e:	f001 faf8 	bl	8002d42 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001752:	2000      	movs	r0, #0
 8001754:	f7ff fee6 	bl	8001524 <HAL_InitTick>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d002      	beq.n	8001764 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	71fb      	strb	r3, [r7, #7]
 8001762:	e001      	b.n	8001768 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001764:	f7ff fd78 	bl	8001258 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001768:	79fb      	ldrb	r3, [r7, #7]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_IncTick+0x20>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	4b06      	ldr	r3, [pc, #24]	; (8001798 <HAL_IncTick+0x24>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4413      	add	r3, r2
 8001784:	4a04      	ldr	r2, [pc, #16]	; (8001798 <HAL_IncTick+0x24>)
 8001786:	6013      	str	r3, [r2, #0]
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	2000000c 	.word	0x2000000c
 8001798:	20001e98 	.word	0x20001e98

0800179c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return uwTick;
 80017a0:	4b03      	ldr	r3, [pc, #12]	; (80017b0 <HAL_GetTick+0x14>)
 80017a2:	681b      	ldr	r3, [r3, #0]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	20001e98 	.word	0x20001e98

080017b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017bc:	f7ff ffee 	bl	800179c <HAL_GetTick>
 80017c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017cc:	d005      	beq.n	80017da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <HAL_Delay+0x40>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4413      	add	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017da:	bf00      	nop
 80017dc:	f7ff ffde 	bl	800179c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d8f7      	bhi.n	80017dc <HAL_Delay+0x28>
  {
  }
}
 80017ec:	bf00      	nop
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	2000000c 	.word	0x2000000c

080017f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	609a      	str	r2, [r3, #8]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	609a      	str	r2, [r3, #8]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001860:	b480      	push	{r7}
 8001862:	b087      	sub	sp, #28
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
 800186c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	3360      	adds	r3, #96	; 0x60
 8001872:	461a      	mov	r2, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <LL_ADC_SetOffset+0x44>)
 8001882:	4013      	ands	r3, r2
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	430a      	orrs	r2, r1
 800188e:	4313      	orrs	r3, r2
 8001890:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001898:	bf00      	nop
 800189a:	371c      	adds	r7, #28
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	03fff000 	.word	0x03fff000

080018a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3360      	adds	r3, #96	; 0x60
 80018b6:	461a      	mov	r2, r3
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b087      	sub	sp, #28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	3360      	adds	r3, #96	; 0x60
 80018e4:	461a      	mov	r2, r3
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	431a      	orrs	r2, r3
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80018fe:	bf00      	nop
 8001900:	371c      	adds	r7, #28
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
 8001912:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	615a      	str	r2, [r3, #20]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001944:	2301      	movs	r3, #1
 8001946:	e000      	b.n	800194a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001956:	b480      	push	{r7}
 8001958:	b087      	sub	sp, #28
 800195a:	af00      	add	r7, sp, #0
 800195c:	60f8      	str	r0, [r7, #12]
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	3330      	adds	r3, #48	; 0x30
 8001966:	461a      	mov	r2, r3
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	0a1b      	lsrs	r3, r3, #8
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	4413      	add	r3, r2
 8001974:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	f003 031f 	and.w	r3, r3, #31
 8001980:	211f      	movs	r1, #31
 8001982:	fa01 f303 	lsl.w	r3, r1, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	401a      	ands	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	0e9b      	lsrs	r3, r3, #26
 800198e:	f003 011f 	and.w	r1, r3, #31
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	f003 031f 	and.w	r3, r3, #31
 8001998:	fa01 f303 	lsl.w	r3, r1, r3
 800199c:	431a      	orrs	r2, r3
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019a2:	bf00      	nop
 80019a4:	371c      	adds	r7, #28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b087      	sub	sp, #28
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	60f8      	str	r0, [r7, #12]
 80019b6:	60b9      	str	r1, [r7, #8]
 80019b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	3314      	adds	r3, #20
 80019be:	461a      	mov	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	0e5b      	lsrs	r3, r3, #25
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	4413      	add	r3, r2
 80019cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	0d1b      	lsrs	r3, r3, #20
 80019d6:	f003 031f 	and.w	r3, r3, #31
 80019da:	2107      	movs	r1, #7
 80019dc:	fa01 f303 	lsl.w	r3, r1, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	401a      	ands	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	0d1b      	lsrs	r3, r3, #20
 80019e8:	f003 031f 	and.w	r3, r3, #31
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	fa01 f303 	lsl.w	r3, r1, r3
 80019f2:	431a      	orrs	r2, r3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019f8:	bf00      	nop
 80019fa:	371c      	adds	r7, #28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	401a      	ands	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f003 0318 	and.w	r3, r3, #24
 8001a26:	4908      	ldr	r1, [pc, #32]	; (8001a48 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a28:	40d9      	lsrs	r1, r3
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	400b      	ands	r3, r1
 8001a2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a32:	431a      	orrs	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a3a:	bf00      	nop
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	0007ffff 	.word	0x0007ffff

08001a4c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 031f 	and.w	r3, r3, #31
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6093      	str	r3, [r2, #8]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ab8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001abc:	d101      	bne.n	8001ac2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001ae0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ae4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b0c:	d101      	bne.n	8001b12 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b34:	f043 0201 	orr.w	r2, r3, #1
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d101      	bne.n	8001b60 <LL_ADC_IsEnabled+0x18>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <LL_ADC_IsEnabled+0x1a>
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b7e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b82:	f043 0204 	orr.w	r2, r3, #4
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d101      	bne.n	8001bae <LL_ADC_REG_IsConversionOngoing+0x18>
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 0308 	and.w	r3, r3, #8
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	d101      	bne.n	8001bd4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e000      	b.n	8001bd6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001be4:	b590      	push	{r4, r7, lr}
 8001be6:	b089      	sub	sp, #36	; 0x24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e132      	b.n	8001e64 <HAL_ADC_Init+0x280>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d109      	bne.n	8001c20 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff fb4b 	bl	80012a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ff3f 	bl	8001aa8 <LL_ADC_IsDeepPowerDownEnabled>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d004      	beq.n	8001c3a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff25 	bl	8001a84 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff ff5a 	bl	8001af8 <LL_ADC_IsInternalRegulatorEnabled>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d113      	bne.n	8001c72 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff ff3e 	bl	8001ad0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001c54:	4b85      	ldr	r3, [pc, #532]	; (8001e6c <HAL_ADC_Init+0x288>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	099b      	lsrs	r3, r3, #6
 8001c5a:	4a85      	ldr	r2, [pc, #532]	; (8001e70 <HAL_ADC_Init+0x28c>)
 8001c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c60:	099b      	lsrs	r3, r3, #6
 8001c62:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c64:	e002      	b.n	8001c6c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f9      	bne.n	8001c66 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff ff3e 	bl	8001af8 <LL_ADC_IsInternalRegulatorEnabled>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10d      	bne.n	8001c9e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c86:	f043 0210 	orr.w	r2, r3, #16
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c92:	f043 0201 	orr.w	r2, r3, #1
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff ff77 	bl	8001b96 <LL_ADC_REG_IsConversionOngoing>
 8001ca8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cae:	f003 0310 	and.w	r3, r3, #16
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f040 80cd 	bne.w	8001e52 <HAL_ADC_Init+0x26e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f040 80c9 	bne.w	8001e52 <HAL_ADC_Init+0x26e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001cc8:	f043 0202 	orr.w	r2, r3, #2
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff37 	bl	8001b48 <LL_ADC_IsEnabled>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d110      	bne.n	8001d02 <HAL_ADC_Init+0x11e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ce0:	4864      	ldr	r0, [pc, #400]	; (8001e74 <HAL_ADC_Init+0x290>)
 8001ce2:	f7ff ff31 	bl	8001b48 <LL_ADC_IsEnabled>
 8001ce6:	4604      	mov	r4, r0
 8001ce8:	4863      	ldr	r0, [pc, #396]	; (8001e78 <HAL_ADC_Init+0x294>)
 8001cea:	f7ff ff2d 	bl	8001b48 <LL_ADC_IsEnabled>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	4323      	orrs	r3, r4
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d105      	bne.n	8001d02 <HAL_ADC_Init+0x11e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	485f      	ldr	r0, [pc, #380]	; (8001e7c <HAL_ADC_Init+0x298>)
 8001cfe:	f7ff fd7b 	bl	80017f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	7e5b      	ldrb	r3, [r3, #25]
 8001d06:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d0c:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001d12:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001d18:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d20:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d106      	bne.n	8001d3e <HAL_ADC_Init+0x15a>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d34:	3b01      	subs	r3, #1
 8001d36:	045b      	lsls	r3, r3, #17
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d009      	beq.n	8001d5a <HAL_ADC_Init+0x176>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d52:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	4b47      	ldr	r3, [pc, #284]	; (8001e80 <HAL_ADC_Init+0x29c>)
 8001d62:	4013      	ands	r3, r2
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	69b9      	ldr	r1, [r7, #24]
 8001d6a:	430b      	orrs	r3, r1
 8001d6c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ff0f 	bl	8001b96 <LL_ADC_REG_IsConversionOngoing>
 8001d78:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff ff1c 	bl	8001bbc <LL_ADC_INJ_IsConversionOngoing>
 8001d84:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d140      	bne.n	8001e0e <HAL_ADC_Init+0x22a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d13d      	bne.n	8001e0e <HAL_ADC_Init+0x22a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	7e1b      	ldrb	r3, [r3, #24]
 8001d9a:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d9c:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001da4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001db4:	f023 0306 	bic.w	r3, r3, #6
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	69b9      	ldr	r1, [r7, #24]
 8001dbe:	430b      	orrs	r3, r1
 8001dc0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d118      	bne.n	8001dfe <HAL_ADC_Init+0x21a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001dd6:	f023 0304 	bic.w	r3, r3, #4
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001de2:	4311      	orrs	r1, r2
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001de8:	4311      	orrs	r1, r2
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001dee:	430a      	orrs	r2, r1
 8001df0:	431a      	orrs	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0201 	orr.w	r2, r2, #1
 8001dfa:	611a      	str	r2, [r3, #16]
 8001dfc:	e007      	b.n	8001e0e <HAL_ADC_Init+0x22a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	691a      	ldr	r2, [r3, #16]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 0201 	bic.w	r2, r2, #1
 8001e0c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d10c      	bne.n	8001e30 <HAL_ADC_Init+0x24c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1c:	f023 010f 	bic.w	r1, r3, #15
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	1e5a      	subs	r2, r3, #1
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	631a      	str	r2, [r3, #48]	; 0x30
 8001e2e:	e007      	b.n	8001e40 <HAL_ADC_Init+0x25c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 020f 	bic.w	r2, r2, #15
 8001e3e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e44:	f023 0303 	bic.w	r3, r3, #3
 8001e48:	f043 0201 	orr.w	r2, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	659a      	str	r2, [r3, #88]	; 0x58
 8001e50:	e007      	b.n	8001e62 <HAL_ADC_Init+0x27e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e56:	f043 0210 	orr.w	r2, r3, #16
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e62:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3724      	adds	r7, #36	; 0x24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd90      	pop	{r4, r7, pc}
 8001e6c:	20000004 	.word	0x20000004
 8001e70:	053e2d63 	.word	0x053e2d63
 8001e74:	50040000 	.word	0x50040000
 8001e78:	50040100 	.word	0x50040100
 8001e7c:	50040300 	.word	0x50040300
 8001e80:	fff0c007 	.word	0xfff0c007

08001e84 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e8c:	4857      	ldr	r0, [pc, #348]	; (8001fec <HAL_ADC_Start+0x168>)
 8001e8e:	f7ff fddd 	bl	8001a4c <LL_ADC_GetMultimode>
 8001e92:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fe7c 	bl	8001b96 <LL_ADC_REG_IsConversionOngoing>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f040 809c 	bne.w	8001fde <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_ADC_Start+0x30>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e097      	b.n	8001fe4 <HAL_ADC_Start+0x160>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 fd73 	bl	80029a8 <ADC_Enable>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ec6:	7dfb      	ldrb	r3, [r7, #23]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f040 8083 	bne.w	8001fd4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ed6:	f023 0301 	bic.w	r3, r3, #1
 8001eda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a42      	ldr	r2, [pc, #264]	; (8001ff0 <HAL_ADC_Start+0x16c>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d002      	beq.n	8001ef2 <HAL_ADC_Start+0x6e>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	e000      	b.n	8001ef4 <HAL_ADC_Start+0x70>
 8001ef2:	4b40      	ldr	r3, [pc, #256]	; (8001ff4 <HAL_ADC_Start+0x170>)
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d002      	beq.n	8001f02 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d105      	bne.n	8001f0e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f1a:	d106      	bne.n	8001f2a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f20:	f023 0206 	bic.w	r2, r3, #6
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f28:	e002      	b.n	8001f30 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	221c      	movs	r2, #28
 8001f36:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a2a      	ldr	r2, [pc, #168]	; (8001ff0 <HAL_ADC_Start+0x16c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d002      	beq.n	8001f50 <HAL_ADC_Start+0xcc>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	e000      	b.n	8001f52 <HAL_ADC_Start+0xce>
 8001f50:	4b28      	ldr	r3, [pc, #160]	; (8001ff4 <HAL_ADC_Start+0x170>)
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6812      	ldr	r2, [r2, #0]
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d008      	beq.n	8001f6c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	2b05      	cmp	r3, #5
 8001f64:	d002      	beq.n	8001f6c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	2b09      	cmp	r3, #9
 8001f6a:	d114      	bne.n	8001f96 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d007      	beq.n	8001f8a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fded 	bl	8001b6e <LL_ADC_REG_StartConversion>
 8001f94:	e025      	b.n	8001fe2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a12      	ldr	r2, [pc, #72]	; (8001ff0 <HAL_ADC_Start+0x16c>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d002      	beq.n	8001fb2 <HAL_ADC_Start+0x12e>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	e000      	b.n	8001fb4 <HAL_ADC_Start+0x130>
 8001fb2:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <HAL_ADC_Start+0x170>)
 8001fb4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00f      	beq.n	8001fe2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	659a      	str	r2, [r3, #88]	; 0x58
 8001fd2:	e006      	b.n	8001fe2 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001fdc:	e001      	b.n	8001fe2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	50040300 	.word	0x50040300
 8001ff0:	50040100 	.word	0x50040100
 8001ff4:	50040000 	.word	0x50040000

08001ff8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002002:	4862      	ldr	r0, [pc, #392]	; (800218c <HAL_ADC_PollForConversion+0x194>)
 8002004:	f7ff fd22 	bl	8001a4c <LL_ADC_GetMultimode>
 8002008:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	2b08      	cmp	r3, #8
 8002010:	d102      	bne.n	8002018 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002012:	2308      	movs	r3, #8
 8002014:	61fb      	str	r3, [r7, #28]
 8002016:	e02a      	b.n	800206e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d005      	beq.n	800202a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	2b05      	cmp	r3, #5
 8002022:	d002      	beq.n	800202a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	2b09      	cmp	r3, #9
 8002028:	d111      	bne.n	800204e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	d007      	beq.n	8002048 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203c:	f043 0220 	orr.w	r2, r3, #32
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e09d      	b.n	8002184 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002048:	2304      	movs	r3, #4
 800204a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800204c:	e00f      	b.n	800206e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800204e:	484f      	ldr	r0, [pc, #316]	; (800218c <HAL_ADC_PollForConversion+0x194>)
 8002050:	f7ff fd0a 	bl	8001a68 <LL_ADC_GetMultiDMATransfer>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d007      	beq.n	800206a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205e:	f043 0220 	orr.w	r2, r3, #32
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e08c      	b.n	8002184 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800206a:	2304      	movs	r3, #4
 800206c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800206e:	f7ff fb95 	bl	800179c <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002074:	e01a      	b.n	80020ac <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207c:	d016      	beq.n	80020ac <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800207e:	f7ff fb8d 	bl	800179c <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	429a      	cmp	r2, r3
 800208c:	d302      	bcc.n	8002094 <HAL_ADC_PollForConversion+0x9c>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10b      	bne.n	80020ac <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002098:	f043 0204 	orr.w	r2, r3, #4
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e06b      	b.n	8002184 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	4013      	ands	r3, r2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0dd      	beq.n	8002076 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fc30 	bl	8001930 <LL_ADC_REG_IsTriggerSourceSWStart>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d01c      	beq.n	8002110 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	7e5b      	ldrb	r3, [r3, #25]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d118      	bne.n	8002110 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d111      	bne.n	8002110 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d105      	bne.n	8002110 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002108:	f043 0201 	orr.w	r2, r3, #1
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a1e      	ldr	r2, [pc, #120]	; (8002190 <HAL_ADC_PollForConversion+0x198>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d002      	beq.n	8002120 <HAL_ADC_PollForConversion+0x128>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	e000      	b.n	8002122 <HAL_ADC_PollForConversion+0x12a>
 8002120:	4b1c      	ldr	r3, [pc, #112]	; (8002194 <HAL_ADC_PollForConversion+0x19c>)
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6812      	ldr	r2, [r2, #0]
 8002126:	4293      	cmp	r3, r2
 8002128:	d008      	beq.n	800213c <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d005      	beq.n	800213c <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	2b05      	cmp	r3, #5
 8002134:	d002      	beq.n	800213c <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	2b09      	cmp	r3, #9
 800213a:	d104      	bne.n	8002146 <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	61bb      	str	r3, [r7, #24]
 8002144:	e00c      	b.n	8002160 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a11      	ldr	r2, [pc, #68]	; (8002190 <HAL_ADC_PollForConversion+0x198>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d002      	beq.n	8002156 <HAL_ADC_PollForConversion+0x15e>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	e000      	b.n	8002158 <HAL_ADC_PollForConversion+0x160>
 8002156:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <HAL_ADC_PollForConversion+0x19c>)
 8002158:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	2b08      	cmp	r3, #8
 8002164:	d104      	bne.n	8002170 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2208      	movs	r2, #8
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	e008      	b.n	8002182 <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d103      	bne.n	8002182 <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	220c      	movs	r2, #12
 8002180:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3720      	adds	r7, #32
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	50040300 	.word	0x50040300
 8002190:	50040100 	.word	0x50040100
 8002194:	50040000 	.word	0x50040000

08002198 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
	...

080021b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b0b6      	sub	sp, #216	; 0xd8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d101      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x22>
 80021d2:	2302      	movs	r3, #2
 80021d4:	e3d4      	b.n	8002980 <HAL_ADC_ConfigChannel+0x7cc>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fcd7 	bl	8001b96 <LL_ADC_REG_IsConversionOngoing>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f040 83b9 	bne.w	8002962 <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b05      	cmp	r3, #5
 80021f6:	d824      	bhi.n	8002242 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	3b02      	subs	r3, #2
 80021fe:	2b03      	cmp	r3, #3
 8002200:	d81b      	bhi.n	800223a <HAL_ADC_ConfigChannel+0x86>
 8002202:	a201      	add	r2, pc, #4	; (adr r2, 8002208 <HAL_ADC_ConfigChannel+0x54>)
 8002204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002208:	08002219 	.word	0x08002219
 800220c:	08002221 	.word	0x08002221
 8002210:	08002229 	.word	0x08002229
 8002214:	08002231 	.word	0x08002231
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	220c      	movs	r2, #12
 800221c:	605a      	str	r2, [r3, #4]
          break;
 800221e:	e011      	b.n	8002244 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	2212      	movs	r2, #18
 8002224:	605a      	str	r2, [r3, #4]
          break;
 8002226:	e00d      	b.n	8002244 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	2218      	movs	r2, #24
 800222c:	605a      	str	r2, [r3, #4]
          break;
 800222e:	e009      	b.n	8002244 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002236:	605a      	str	r2, [r3, #4]
          break;
 8002238:	e004      	b.n	8002244 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	2206      	movs	r2, #6
 800223e:	605a      	str	r2, [r3, #4]
          break;
 8002240:	e000      	b.n	8002244 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002242:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6818      	ldr	r0, [r3, #0]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	6859      	ldr	r1, [r3, #4]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	f7ff fb80 	bl	8001956 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff fc9b 	bl	8001b96 <LL_ADC_REG_IsConversionOngoing>
 8002260:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff fca7 	bl	8001bbc <LL_ADC_INJ_IsConversionOngoing>
 800226e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002272:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002276:	2b00      	cmp	r3, #0
 8002278:	f040 81c1 	bne.w	80025fe <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800227c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002280:	2b00      	cmp	r3, #0
 8002282:	f040 81bc 	bne.w	80025fe <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800228e:	d10f      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6818      	ldr	r0, [r3, #0]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2200      	movs	r2, #0
 800229a:	4619      	mov	r1, r3
 800229c:	f7ff fb87 	bl	80019ae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff fb2e 	bl	800190a <LL_ADC_SetSamplingTimeCommonConfig>
 80022ae:	e00e      	b.n	80022ce <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	6819      	ldr	r1, [r3, #0]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	461a      	mov	r2, r3
 80022be:	f7ff fb76 	bl	80019ae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2100      	movs	r1, #0
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff fb1e 	bl	800190a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	695a      	ldr	r2, [r3, #20]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	08db      	lsrs	r3, r3, #3
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d00a      	beq.n	8002306 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6818      	ldr	r0, [r3, #0]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	6919      	ldr	r1, [r3, #16]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002300:	f7ff faae 	bl	8001860 <LL_ADC_SetOffset>
 8002304:	e17b      	b.n	80025fe <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2100      	movs	r1, #0
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff facb 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 8002312:	4603      	mov	r3, r0
 8002314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10a      	bne.n	8002332 <HAL_ADC_ConfigChannel+0x17e>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2100      	movs	r1, #0
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fac0 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 8002328:	4603      	mov	r3, r0
 800232a:	0e9b      	lsrs	r3, r3, #26
 800232c:	f003 021f 	and.w	r2, r3, #31
 8002330:	e01e      	b.n	8002370 <HAL_ADC_ConfigChannel+0x1bc>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2100      	movs	r1, #0
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff fab5 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 800233e:	4603      	mov	r3, r0
 8002340:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002344:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002348:	fa93 f3a3 	rbit	r3, r3
 800234c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002350:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002354:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002358:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002360:	2320      	movs	r3, #32
 8002362:	e004      	b.n	800236e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002364:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002368:	fab3 f383 	clz	r3, r3
 800236c:	b2db      	uxtb	r3, r3
 800236e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002378:	2b00      	cmp	r3, #0
 800237a:	d105      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x1d4>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	0e9b      	lsrs	r3, r3, #26
 8002382:	f003 031f 	and.w	r3, r3, #31
 8002386:	e018      	b.n	80023ba <HAL_ADC_ConfigChannel+0x206>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002390:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002394:	fa93 f3a3 	rbit	r3, r3
 8002398:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800239c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80023a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80023ac:	2320      	movs	r3, #32
 80023ae:	e004      	b.n	80023ba <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80023b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023b4:	fab3 f383 	clz	r3, r3
 80023b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d106      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2200      	movs	r2, #0
 80023c4:	2100      	movs	r1, #0
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff fa84 	bl	80018d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2101      	movs	r1, #1
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fa68 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 80023d8:	4603      	mov	r3, r0
 80023da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10a      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x244>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2101      	movs	r1, #1
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff fa5d 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 80023ee:	4603      	mov	r3, r0
 80023f0:	0e9b      	lsrs	r3, r3, #26
 80023f2:	f003 021f 	and.w	r2, r3, #31
 80023f6:	e01e      	b.n	8002436 <HAL_ADC_ConfigChannel+0x282>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2101      	movs	r1, #1
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff fa52 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 8002404:	4603      	mov	r3, r0
 8002406:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800240e:	fa93 f3a3 	rbit	r3, r3
 8002412:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002416:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800241a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800241e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002426:	2320      	movs	r3, #32
 8002428:	e004      	b.n	8002434 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800242a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800242e:	fab3 f383 	clz	r3, r3
 8002432:	b2db      	uxtb	r3, r3
 8002434:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800243e:	2b00      	cmp	r3, #0
 8002440:	d105      	bne.n	800244e <HAL_ADC_ConfigChannel+0x29a>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	0e9b      	lsrs	r3, r3, #26
 8002448:	f003 031f 	and.w	r3, r3, #31
 800244c:	e018      	b.n	8002480 <HAL_ADC_ConfigChannel+0x2cc>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002456:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800245a:	fa93 f3a3 	rbit	r3, r3
 800245e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002462:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002466:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800246a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002472:	2320      	movs	r3, #32
 8002474:	e004      	b.n	8002480 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002476:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800247a:	fab3 f383 	clz	r3, r3
 800247e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002480:	429a      	cmp	r2, r3
 8002482:	d106      	bne.n	8002492 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2200      	movs	r2, #0
 800248a:	2101      	movs	r1, #1
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fa21 	bl	80018d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2102      	movs	r1, #2
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff fa05 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 800249e:	4603      	mov	r3, r0
 80024a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10a      	bne.n	80024be <HAL_ADC_ConfigChannel+0x30a>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2102      	movs	r1, #2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff f9fa 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 80024b4:	4603      	mov	r3, r0
 80024b6:	0e9b      	lsrs	r3, r3, #26
 80024b8:	f003 021f 	and.w	r2, r3, #31
 80024bc:	e01e      	b.n	80024fc <HAL_ADC_ConfigChannel+0x348>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2102      	movs	r1, #2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff f9ef 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 80024ca:	4603      	mov	r3, r0
 80024cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024d4:	fa93 f3a3 	rbit	r3, r3
 80024d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80024dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80024e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80024ec:	2320      	movs	r3, #32
 80024ee:	e004      	b.n	80024fa <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80024f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024f4:	fab3 f383 	clz	r3, r3
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002504:	2b00      	cmp	r3, #0
 8002506:	d105      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x360>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	0e9b      	lsrs	r3, r3, #26
 800250e:	f003 031f 	and.w	r3, r3, #31
 8002512:	e016      	b.n	8002542 <HAL_ADC_ConfigChannel+0x38e>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002520:	fa93 f3a3 	rbit	r3, r3
 8002524:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002526:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002528:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800252c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002534:	2320      	movs	r3, #32
 8002536:	e004      	b.n	8002542 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002538:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800253c:	fab3 f383 	clz	r3, r3
 8002540:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002542:	429a      	cmp	r2, r3
 8002544:	d106      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2200      	movs	r2, #0
 800254c:	2102      	movs	r1, #2
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff f9c0 	bl	80018d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2103      	movs	r1, #3
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff f9a4 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 8002560:	4603      	mov	r3, r0
 8002562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10a      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x3cc>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2103      	movs	r1, #3
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff f999 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 8002576:	4603      	mov	r3, r0
 8002578:	0e9b      	lsrs	r3, r3, #26
 800257a:	f003 021f 	and.w	r2, r3, #31
 800257e:	e017      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x3fc>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2103      	movs	r1, #3
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff f98e 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 800258c:	4603      	mov	r3, r0
 800258e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002590:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002592:	fa93 f3a3 	rbit	r3, r3
 8002596:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002598:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800259a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800259c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80025a2:	2320      	movs	r3, #32
 80025a4:	e003      	b.n	80025ae <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80025a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025a8:	fab3 f383 	clz	r3, r3
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d105      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x414>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	0e9b      	lsrs	r3, r3, #26
 80025c2:	f003 031f 	and.w	r3, r3, #31
 80025c6:	e011      	b.n	80025ec <HAL_ADC_ConfigChannel+0x438>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025d0:	fa93 f3a3 	rbit	r3, r3
 80025d4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80025d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80025da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80025e0:	2320      	movs	r3, #32
 80025e2:	e003      	b.n	80025ec <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80025e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e6:	fab3 f383 	clz	r3, r3
 80025ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d106      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2200      	movs	r2, #0
 80025f6:	2103      	movs	r1, #3
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff f96b 	bl	80018d4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff faa0 	bl	8001b48 <LL_ADC_IsEnabled>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	f040 8140 	bne.w	8002890 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6818      	ldr	r0, [r3, #0]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	6819      	ldr	r1, [r3, #0]
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	461a      	mov	r2, r3
 800261e:	f7ff f9f1 	bl	8001a04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	4a8f      	ldr	r2, [pc, #572]	; (8002864 <HAL_ADC_ConfigChannel+0x6b0>)
 8002628:	4293      	cmp	r3, r2
 800262a:	f040 8131 	bne.w	8002890 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10b      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x4a2>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	0e9b      	lsrs	r3, r3, #26
 8002644:	3301      	adds	r3, #1
 8002646:	f003 031f 	and.w	r3, r3, #31
 800264a:	2b09      	cmp	r3, #9
 800264c:	bf94      	ite	ls
 800264e:	2301      	movls	r3, #1
 8002650:	2300      	movhi	r3, #0
 8002652:	b2db      	uxtb	r3, r3
 8002654:	e019      	b.n	800268a <HAL_ADC_ConfigChannel+0x4d6>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800265e:	fa93 f3a3 	rbit	r3, r3
 8002662:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002664:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002666:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002668:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800266e:	2320      	movs	r3, #32
 8002670:	e003      	b.n	800267a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002674:	fab3 f383 	clz	r3, r3
 8002678:	b2db      	uxtb	r3, r3
 800267a:	3301      	adds	r3, #1
 800267c:	f003 031f 	and.w	r3, r3, #31
 8002680:	2b09      	cmp	r3, #9
 8002682:	bf94      	ite	ls
 8002684:	2301      	movls	r3, #1
 8002686:	2300      	movhi	r3, #0
 8002688:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800268a:	2b00      	cmp	r3, #0
 800268c:	d079      	beq.n	8002782 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002696:	2b00      	cmp	r3, #0
 8002698:	d107      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x4f6>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	0e9b      	lsrs	r3, r3, #26
 80026a0:	3301      	adds	r3, #1
 80026a2:	069b      	lsls	r3, r3, #26
 80026a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026a8:	e015      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x522>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026b2:	fa93 f3a3 	rbit	r3, r3
 80026b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80026b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ba:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80026bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80026c2:	2320      	movs	r3, #32
 80026c4:	e003      	b.n	80026ce <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80026c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026c8:	fab3 f383 	clz	r3, r3
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	3301      	adds	r3, #1
 80026d0:	069b      	lsls	r3, r3, #26
 80026d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d109      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x542>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	0e9b      	lsrs	r3, r3, #26
 80026e8:	3301      	adds	r3, #1
 80026ea:	f003 031f 	and.w	r3, r3, #31
 80026ee:	2101      	movs	r1, #1
 80026f0:	fa01 f303 	lsl.w	r3, r1, r3
 80026f4:	e017      	b.n	8002726 <HAL_ADC_ConfigChannel+0x572>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026fe:	fa93 f3a3 	rbit	r3, r3
 8002702:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002706:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800270e:	2320      	movs	r3, #32
 8002710:	e003      	b.n	800271a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002714:	fab3 f383 	clz	r3, r3
 8002718:	b2db      	uxtb	r3, r3
 800271a:	3301      	adds	r3, #1
 800271c:	f003 031f 	and.w	r3, r3, #31
 8002720:	2101      	movs	r1, #1
 8002722:	fa01 f303 	lsl.w	r3, r1, r3
 8002726:	ea42 0103 	orr.w	r1, r2, r3
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10a      	bne.n	800274c <HAL_ADC_ConfigChannel+0x598>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	0e9b      	lsrs	r3, r3, #26
 800273c:	3301      	adds	r3, #1
 800273e:	f003 021f 	and.w	r2, r3, #31
 8002742:	4613      	mov	r3, r2
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	4413      	add	r3, r2
 8002748:	051b      	lsls	r3, r3, #20
 800274a:	e018      	b.n	800277e <HAL_ADC_ConfigChannel+0x5ca>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002754:	fa93 f3a3 	rbit	r3, r3
 8002758:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800275a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800275c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800275e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002764:	2320      	movs	r3, #32
 8002766:	e003      	b.n	8002770 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800276a:	fab3 f383 	clz	r3, r3
 800276e:	b2db      	uxtb	r3, r3
 8002770:	3301      	adds	r3, #1
 8002772:	f003 021f 	and.w	r2, r3, #31
 8002776:	4613      	mov	r3, r2
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	4413      	add	r3, r2
 800277c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800277e:	430b      	orrs	r3, r1
 8002780:	e081      	b.n	8002886 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278a:	2b00      	cmp	r3, #0
 800278c:	d107      	bne.n	800279e <HAL_ADC_ConfigChannel+0x5ea>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	0e9b      	lsrs	r3, r3, #26
 8002794:	3301      	adds	r3, #1
 8002796:	069b      	lsls	r3, r3, #26
 8002798:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800279c:	e015      	b.n	80027ca <HAL_ADC_ConfigChannel+0x616>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80027ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ae:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80027b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80027b6:	2320      	movs	r3, #32
 80027b8:	e003      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80027ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027bc:	fab3 f383 	clz	r3, r3
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	3301      	adds	r3, #1
 80027c4:	069b      	lsls	r3, r3, #26
 80027c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d109      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x636>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	0e9b      	lsrs	r3, r3, #26
 80027dc:	3301      	adds	r3, #1
 80027de:	f003 031f 	and.w	r3, r3, #31
 80027e2:	2101      	movs	r1, #1
 80027e4:	fa01 f303 	lsl.w	r3, r1, r3
 80027e8:	e017      	b.n	800281a <HAL_ADC_ConfigChannel+0x666>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f0:	6a3b      	ldr	r3, [r7, #32]
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	61fb      	str	r3, [r7, #28]
  return result;
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002802:	2320      	movs	r3, #32
 8002804:	e003      	b.n	800280e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	fab3 f383 	clz	r3, r3
 800280c:	b2db      	uxtb	r3, r3
 800280e:	3301      	adds	r3, #1
 8002810:	f003 031f 	and.w	r3, r3, #31
 8002814:	2101      	movs	r1, #1
 8002816:	fa01 f303 	lsl.w	r3, r1, r3
 800281a:	ea42 0103 	orr.w	r1, r2, r3
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10d      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x692>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	0e9b      	lsrs	r3, r3, #26
 8002830:	3301      	adds	r3, #1
 8002832:	f003 021f 	and.w	r2, r3, #31
 8002836:	4613      	mov	r3, r2
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	4413      	add	r3, r2
 800283c:	3b1e      	subs	r3, #30
 800283e:	051b      	lsls	r3, r3, #20
 8002840:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002844:	e01e      	b.n	8002884 <HAL_ADC_ConfigChannel+0x6d0>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	fa93 f3a3 	rbit	r3, r3
 8002852:	613b      	str	r3, [r7, #16]
  return result;
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d104      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800285e:	2320      	movs	r3, #32
 8002860:	e006      	b.n	8002870 <HAL_ADC_ConfigChannel+0x6bc>
 8002862:	bf00      	nop
 8002864:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	fab3 f383 	clz	r3, r3
 800286e:	b2db      	uxtb	r3, r3
 8002870:	3301      	adds	r3, #1
 8002872:	f003 021f 	and.w	r2, r3, #31
 8002876:	4613      	mov	r3, r2
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	4413      	add	r3, r2
 800287c:	3b1e      	subs	r3, #30
 800287e:	051b      	lsls	r3, r3, #20
 8002880:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002884:	430b      	orrs	r3, r1
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	6892      	ldr	r2, [r2, #8]
 800288a:	4619      	mov	r1, r3
 800288c:	f7ff f88f 	bl	80019ae <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	4b3c      	ldr	r3, [pc, #240]	; (8002988 <HAL_ADC_ConfigChannel+0x7d4>)
 8002896:	4013      	ands	r3, r2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d06b      	beq.n	8002974 <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800289c:	483b      	ldr	r0, [pc, #236]	; (800298c <HAL_ADC_ConfigChannel+0x7d8>)
 800289e:	f7fe ffd1 	bl	8001844 <LL_ADC_GetCommonPathInternalCh>
 80028a2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a39      	ldr	r2, [pc, #228]	; (8002990 <HAL_ADC_ConfigChannel+0x7dc>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d126      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d120      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a34      	ldr	r2, [pc, #208]	; (8002994 <HAL_ADC_ConfigChannel+0x7e0>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d156      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028ce:	4619      	mov	r1, r3
 80028d0:	482e      	ldr	r0, [pc, #184]	; (800298c <HAL_ADC_ConfigChannel+0x7d8>)
 80028d2:	f7fe ffa4 	bl	800181e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80028d6:	4b30      	ldr	r3, [pc, #192]	; (8002998 <HAL_ADC_ConfigChannel+0x7e4>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	099b      	lsrs	r3, r3, #6
 80028dc:	4a2f      	ldr	r2, [pc, #188]	; (800299c <HAL_ADC_ConfigChannel+0x7e8>)
 80028de:	fba2 2303 	umull	r2, r3, r2, r3
 80028e2:	099a      	lsrs	r2, r3, #6
 80028e4:	4613      	mov	r3, r2
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	4413      	add	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028ee:	e002      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1f9      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028fc:	e03a      	b.n	8002974 <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a27      	ldr	r2, [pc, #156]	; (80029a0 <HAL_ADC_ConfigChannel+0x7ec>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d113      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x77c>
 8002908:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800290c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10d      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a1e      	ldr	r2, [pc, #120]	; (8002994 <HAL_ADC_ConfigChannel+0x7e0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d12a      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800291e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002922:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002926:	4619      	mov	r1, r3
 8002928:	4818      	ldr	r0, [pc, #96]	; (800298c <HAL_ADC_ConfigChannel+0x7d8>)
 800292a:	f7fe ff78 	bl	800181e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800292e:	e021      	b.n	8002974 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a1b      	ldr	r2, [pc, #108]	; (80029a4 <HAL_ADC_ConfigChannel+0x7f0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d11c      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800293a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800293e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d116      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a12      	ldr	r2, [pc, #72]	; (8002994 <HAL_ADC_ConfigChannel+0x7e0>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d111      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002950:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002954:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002958:	4619      	mov	r1, r3
 800295a:	480c      	ldr	r0, [pc, #48]	; (800298c <HAL_ADC_ConfigChannel+0x7d8>)
 800295c:	f7fe ff5f 	bl	800181e <LL_ADC_SetCommonPathInternalCh>
 8002960:	e008      	b.n	8002974 <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002966:	f043 0220 	orr.w	r2, r3, #32
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800297c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002980:	4618      	mov	r0, r3
 8002982:	37d8      	adds	r7, #216	; 0xd8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	80080000 	.word	0x80080000
 800298c:	50040300 	.word	0x50040300
 8002990:	c7520000 	.word	0xc7520000
 8002994:	50040000 	.word	0x50040000
 8002998:	20000004 	.word	0x20000004
 800299c:	053e2d63 	.word	0x053e2d63
 80029a0:	cb840000 	.word	0xcb840000
 80029a4:	80000001 	.word	0x80000001

080029a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff f8c7 	bl	8001b48 <LL_ADC_IsEnabled>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d146      	bne.n	8002a4e <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	4b24      	ldr	r3, [pc, #144]	; (8002a58 <ADC_Enable+0xb0>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00d      	beq.n	80029ea <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d2:	f043 0210 	orr.w	r2, r3, #16
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029de:	f043 0201 	orr.w	r2, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e032      	b.n	8002a50 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff f896 	bl	8001b20 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80029f4:	f7fe fed2 	bl	800179c <HAL_GetTick>
 80029f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029fa:	e021      	b.n	8002a40 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff f8a1 	bl	8001b48 <LL_ADC_IsEnabled>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d104      	bne.n	8002a16 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff f885 	bl	8001b20 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a16:	f7fe fec1 	bl	800179c <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d90d      	bls.n	8002a40 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a28:	f043 0210 	orr.w	r2, r3, #16
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a34:	f043 0201 	orr.w	r2, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e007      	b.n	8002a50 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d1d6      	bne.n	80029fc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	8000003f 	.word	0x8000003f

08002a5c <LL_ADC_IsEnabled>:
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d101      	bne.n	8002a74 <LL_ADC_IsEnabled+0x18>
 8002a70:	2301      	movs	r3, #1
 8002a72:	e000      	b.n	8002a76 <LL_ADC_IsEnabled+0x1a>
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <LL_ADC_REG_IsConversionOngoing>:
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d101      	bne.n	8002a9a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002aa8:	b590      	push	{r4, r7, lr}
 8002aaa:	b0a1      	sub	sp, #132	; 0x84
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e085      	b.n	8002bd2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a42      	ldr	r2, [pc, #264]	; (8002bdc <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d102      	bne.n	8002ade <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002ad8:	4b41      	ldr	r3, [pc, #260]	; (8002be0 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	e001      	b.n	8002ae2 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10b      	bne.n	8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aec:	f043 0220 	orr.w	r2, r3, #32
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e068      	b.n	8002bd2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff ffbd 	bl	8002a82 <LL_ADC_REG_IsConversionOngoing>
 8002b08:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff ffb7 	bl	8002a82 <LL_ADC_REG_IsConversionOngoing>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d14a      	bne.n	8002bb0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002b1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d147      	bne.n	8002bb0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b20:	4b30      	ldr	r3, [pc, #192]	; (8002be4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002b22:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d027      	beq.n	8002b7c <HAL_ADCEx_MultiModeConfigChannel+0xd4>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	6859      	ldr	r1, [r3, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b3e:	035b      	lsls	r3, r3, #13
 8002b40:	430b      	orrs	r3, r1
 8002b42:	431a      	orrs	r2, r3
 8002b44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b46:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b48:	4824      	ldr	r0, [pc, #144]	; (8002bdc <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002b4a:	f7ff ff87 	bl	8002a5c <LL_ADC_IsEnabled>
 8002b4e:	4604      	mov	r4, r0
 8002b50:	4823      	ldr	r0, [pc, #140]	; (8002be0 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8002b52:	f7ff ff83 	bl	8002a5c <LL_ADC_IsEnabled>
 8002b56:	4603      	mov	r3, r0
 8002b58:	4323      	orrs	r3, r4
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d132      	bne.n	8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002b5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002b66:	f023 030f 	bic.w	r3, r3, #15
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	6811      	ldr	r1, [r2, #0]
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	6892      	ldr	r2, [r2, #8]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	431a      	orrs	r2, r3
 8002b76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b78:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b7a:	e023      	b.n	8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002b7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b86:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b88:	4814      	ldr	r0, [pc, #80]	; (8002bdc <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002b8a:	f7ff ff67 	bl	8002a5c <LL_ADC_IsEnabled>
 8002b8e:	4604      	mov	r4, r0
 8002b90:	4813      	ldr	r0, [pc, #76]	; (8002be0 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8002b92:	f7ff ff63 	bl	8002a5c <LL_ADC_IsEnabled>
 8002b96:	4603      	mov	r3, r0
 8002b98:	4323      	orrs	r3, r4
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d112      	bne.n	8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ba6:	f023 030f 	bic.w	r3, r3, #15
 8002baa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002bac:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bae:	e009      	b.n	8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb4:	f043 0220 	orr.w	r2, r3, #32
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002bc2:	e000      	b.n	8002bc6 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bc4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002bce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3784      	adds	r7, #132	; 0x84
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd90      	pop	{r4, r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	50040000 	.word	0x50040000
 8002be0:	50040100 	.word	0x50040100
 8002be4:	50040300 	.word	0x50040300

08002be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bf8:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <__NVIC_SetPriorityGrouping+0x44>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c04:	4013      	ands	r3, r2
 8002c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c1a:	4a04      	ldr	r2, [pc, #16]	; (8002c2c <__NVIC_SetPriorityGrouping+0x44>)
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	60d3      	str	r3, [r2, #12]
}
 8002c20:	bf00      	nop
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	e000ed00 	.word	0xe000ed00

08002c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c34:	4b04      	ldr	r3, [pc, #16]	; (8002c48 <__NVIC_GetPriorityGrouping+0x18>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	0a1b      	lsrs	r3, r3, #8
 8002c3a:	f003 0307 	and.w	r3, r3, #7
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	e000ed00 	.word	0xe000ed00

08002c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	db0b      	blt.n	8002c76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	f003 021f 	and.w	r2, r3, #31
 8002c64:	4907      	ldr	r1, [pc, #28]	; (8002c84 <__NVIC_EnableIRQ+0x38>)
 8002c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	2001      	movs	r0, #1
 8002c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	e000e100 	.word	0xe000e100

08002c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	6039      	str	r1, [r7, #0]
 8002c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	db0a      	blt.n	8002cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	490c      	ldr	r1, [pc, #48]	; (8002cd4 <__NVIC_SetPriority+0x4c>)
 8002ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca6:	0112      	lsls	r2, r2, #4
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	440b      	add	r3, r1
 8002cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cb0:	e00a      	b.n	8002cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	4908      	ldr	r1, [pc, #32]	; (8002cd8 <__NVIC_SetPriority+0x50>)
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	3b04      	subs	r3, #4
 8002cc0:	0112      	lsls	r2, r2, #4
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	761a      	strb	r2, [r3, #24]
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	e000e100 	.word	0xe000e100
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b089      	sub	sp, #36	; 0x24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f1c3 0307 	rsb	r3, r3, #7
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	bf28      	it	cs
 8002cfa:	2304      	movcs	r3, #4
 8002cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	3304      	adds	r3, #4
 8002d02:	2b06      	cmp	r3, #6
 8002d04:	d902      	bls.n	8002d0c <NVIC_EncodePriority+0x30>
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3b03      	subs	r3, #3
 8002d0a:	e000      	b.n	8002d0e <NVIC_EncodePriority+0x32>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d10:	f04f 32ff 	mov.w	r2, #4294967295
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43da      	mvns	r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	401a      	ands	r2, r3
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d24:	f04f 31ff 	mov.w	r1, #4294967295
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2e:	43d9      	mvns	r1, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d34:	4313      	orrs	r3, r2
         );
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3724      	adds	r7, #36	; 0x24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7ff ff4c 	bl	8002be8 <__NVIC_SetPriorityGrouping>
}
 8002d50:	bf00      	nop
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
 8002d64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d6a:	f7ff ff61 	bl	8002c30 <__NVIC_GetPriorityGrouping>
 8002d6e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	68b9      	ldr	r1, [r7, #8]
 8002d74:	6978      	ldr	r0, [r7, #20]
 8002d76:	f7ff ffb1 	bl	8002cdc <NVIC_EncodePriority>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d80:	4611      	mov	r1, r2
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff ff80 	bl	8002c88 <__NVIC_SetPriority>
}
 8002d88:	bf00      	nop
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff ff54 	bl	8002c4c <__NVIC_EnableIRQ>
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d005      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2204      	movs	r2, #4
 8002dc8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	73fb      	strb	r3, [r7, #15]
 8002dce:	e047      	b.n	8002e60 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 020e 	bic.w	r2, r2, #14
 8002dde:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0201 	bic.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e04:	f003 021c 	and.w	r2, r3, #28
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e12:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e1c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00c      	beq.n	8002e40 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e34:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e3e:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	4798      	blx	r3
    }
  }
  return status;
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
	...

08002e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b087      	sub	sp, #28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e7a:	e166      	b.n	800314a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	2101      	movs	r1, #1
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	fa01 f303 	lsl.w	r3, r1, r3
 8002e88:	4013      	ands	r3, r2
 8002e8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 8158 	beq.w	8003144 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d00b      	beq.n	8002eb4 <HAL_GPIO_Init+0x48>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d007      	beq.n	8002eb4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ea8:	2b11      	cmp	r3, #17
 8002eaa:	d003      	beq.n	8002eb4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b12      	cmp	r3, #18
 8002eb2:	d130      	bne.n	8002f16 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	2203      	movs	r2, #3
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002eea:	2201      	movs	r2, #1
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	091b      	lsrs	r3, r3, #4
 8002f00:	f003 0201 	and.w	r2, r3, #1
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	2203      	movs	r2, #3
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43db      	mvns	r3, r3
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d003      	beq.n	8002f56 <HAL_GPIO_Init+0xea>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b12      	cmp	r3, #18
 8002f54:	d123      	bne.n	8002f9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	08da      	lsrs	r2, r3, #3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3208      	adds	r2, #8
 8002f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	220f      	movs	r2, #15
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	43db      	mvns	r3, r3
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	4013      	ands	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	691a      	ldr	r2, [r3, #16]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	08da      	lsrs	r2, r3, #3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3208      	adds	r2, #8
 8002f98:	6939      	ldr	r1, [r7, #16]
 8002f9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	2203      	movs	r2, #3
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 0203 	and.w	r2, r3, #3
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 80b2 	beq.w	8003144 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fe0:	4b61      	ldr	r3, [pc, #388]	; (8003168 <HAL_GPIO_Init+0x2fc>)
 8002fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe4:	4a60      	ldr	r2, [pc, #384]	; (8003168 <HAL_GPIO_Init+0x2fc>)
 8002fe6:	f043 0301 	orr.w	r3, r3, #1
 8002fea:	6613      	str	r3, [r2, #96]	; 0x60
 8002fec:	4b5e      	ldr	r3, [pc, #376]	; (8003168 <HAL_GPIO_Init+0x2fc>)
 8002fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	60bb      	str	r3, [r7, #8]
 8002ff6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ff8:	4a5c      	ldr	r2, [pc, #368]	; (800316c <HAL_GPIO_Init+0x300>)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	089b      	lsrs	r3, r3, #2
 8002ffe:	3302      	adds	r3, #2
 8003000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003004:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f003 0303 	and.w	r3, r3, #3
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	220f      	movs	r2, #15
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43db      	mvns	r3, r3
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	4013      	ands	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003022:	d02b      	beq.n	800307c <HAL_GPIO_Init+0x210>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a52      	ldr	r2, [pc, #328]	; (8003170 <HAL_GPIO_Init+0x304>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d025      	beq.n	8003078 <HAL_GPIO_Init+0x20c>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a51      	ldr	r2, [pc, #324]	; (8003174 <HAL_GPIO_Init+0x308>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d01f      	beq.n	8003074 <HAL_GPIO_Init+0x208>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a50      	ldr	r2, [pc, #320]	; (8003178 <HAL_GPIO_Init+0x30c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d019      	beq.n	8003070 <HAL_GPIO_Init+0x204>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a4f      	ldr	r2, [pc, #316]	; (800317c <HAL_GPIO_Init+0x310>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d013      	beq.n	800306c <HAL_GPIO_Init+0x200>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a4e      	ldr	r2, [pc, #312]	; (8003180 <HAL_GPIO_Init+0x314>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d00d      	beq.n	8003068 <HAL_GPIO_Init+0x1fc>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a4d      	ldr	r2, [pc, #308]	; (8003184 <HAL_GPIO_Init+0x318>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d007      	beq.n	8003064 <HAL_GPIO_Init+0x1f8>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a4c      	ldr	r2, [pc, #304]	; (8003188 <HAL_GPIO_Init+0x31c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d101      	bne.n	8003060 <HAL_GPIO_Init+0x1f4>
 800305c:	2307      	movs	r3, #7
 800305e:	e00e      	b.n	800307e <HAL_GPIO_Init+0x212>
 8003060:	2308      	movs	r3, #8
 8003062:	e00c      	b.n	800307e <HAL_GPIO_Init+0x212>
 8003064:	2306      	movs	r3, #6
 8003066:	e00a      	b.n	800307e <HAL_GPIO_Init+0x212>
 8003068:	2305      	movs	r3, #5
 800306a:	e008      	b.n	800307e <HAL_GPIO_Init+0x212>
 800306c:	2304      	movs	r3, #4
 800306e:	e006      	b.n	800307e <HAL_GPIO_Init+0x212>
 8003070:	2303      	movs	r3, #3
 8003072:	e004      	b.n	800307e <HAL_GPIO_Init+0x212>
 8003074:	2302      	movs	r3, #2
 8003076:	e002      	b.n	800307e <HAL_GPIO_Init+0x212>
 8003078:	2301      	movs	r3, #1
 800307a:	e000      	b.n	800307e <HAL_GPIO_Init+0x212>
 800307c:	2300      	movs	r3, #0
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	f002 0203 	and.w	r2, r2, #3
 8003084:	0092      	lsls	r2, r2, #2
 8003086:	4093      	lsls	r3, r2
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800308e:	4937      	ldr	r1, [pc, #220]	; (800316c <HAL_GPIO_Init+0x300>)
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	089b      	lsrs	r3, r3, #2
 8003094:	3302      	adds	r3, #2
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800309c:	4b3b      	ldr	r3, [pc, #236]	; (800318c <HAL_GPIO_Init+0x320>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	43db      	mvns	r3, r3
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	4013      	ands	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4313      	orrs	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030c0:	4a32      	ldr	r2, [pc, #200]	; (800318c <HAL_GPIO_Init+0x320>)
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80030c6:	4b31      	ldr	r3, [pc, #196]	; (800318c <HAL_GPIO_Init+0x320>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	43db      	mvns	r3, r3
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	4013      	ands	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030ea:	4a28      	ldr	r2, [pc, #160]	; (800318c <HAL_GPIO_Init+0x320>)
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030f0:	4b26      	ldr	r3, [pc, #152]	; (800318c <HAL_GPIO_Init+0x320>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	43db      	mvns	r3, r3
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4013      	ands	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	4313      	orrs	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003114:	4a1d      	ldr	r2, [pc, #116]	; (800318c <HAL_GPIO_Init+0x320>)
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800311a:	4b1c      	ldr	r3, [pc, #112]	; (800318c <HAL_GPIO_Init+0x320>)
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	43db      	mvns	r3, r3
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	4013      	ands	r3, r2
 8003128:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4313      	orrs	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800313e:	4a13      	ldr	r2, [pc, #76]	; (800318c <HAL_GPIO_Init+0x320>)
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	3301      	adds	r3, #1
 8003148:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	fa22 f303 	lsr.w	r3, r2, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	f47f ae91 	bne.w	8002e7c <HAL_GPIO_Init+0x10>
  }
}
 800315a:	bf00      	nop
 800315c:	371c      	adds	r7, #28
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40021000 	.word	0x40021000
 800316c:	40010000 	.word	0x40010000
 8003170:	48000400 	.word	0x48000400
 8003174:	48000800 	.word	0x48000800
 8003178:	48000c00 	.word	0x48000c00
 800317c:	48001000 	.word	0x48001000
 8003180:	48001400 	.word	0x48001400
 8003184:	48001800 	.word	0x48001800
 8003188:	48001c00 	.word	0x48001c00
 800318c:	40010400 	.word	0x40010400

08003190 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	460b      	mov	r3, r1
 800319a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	887b      	ldrh	r3, [r7, #2]
 80031a2:	4013      	ands	r3, r2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031a8:	2301      	movs	r3, #1
 80031aa:	73fb      	strb	r3, [r7, #15]
 80031ac:	e001      	b.n	80031b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031ae:	2300      	movs	r3, #0
 80031b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	807b      	strh	r3, [r7, #2]
 80031cc:	4613      	mov	r3, r2
 80031ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031d0:	787b      	ldrb	r3, [r7, #1]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031d6:	887a      	ldrh	r2, [r7, #2]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031dc:	e002      	b.n	80031e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031de:	887a      	ldrh	r2, [r7, #2]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	460b      	mov	r3, r1
 80031fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003202:	887a      	ldrh	r2, [r7, #2]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4013      	ands	r3, r2
 8003208:	041a      	lsls	r2, r3, #16
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	43d9      	mvns	r1, r3
 800320e:	887b      	ldrh	r3, [r7, #2]
 8003210:	400b      	ands	r3, r1
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	619a      	str	r2, [r3, #24]
}
 8003218:	bf00      	nop
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800322e:	4b08      	ldr	r3, [pc, #32]	; (8003250 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003230:	695a      	ldr	r2, [r3, #20]
 8003232:	88fb      	ldrh	r3, [r7, #6]
 8003234:	4013      	ands	r3, r2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d006      	beq.n	8003248 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800323a:	4a05      	ldr	r2, [pc, #20]	; (8003250 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800323c:	88fb      	ldrh	r3, [r7, #6]
 800323e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003240:	88fb      	ldrh	r3, [r7, #6]
 8003242:	4618      	mov	r0, r3
 8003244:	f7fd fc9c 	bl	8000b80 <HAL_GPIO_EXTI_Callback>
  }
}
 8003248:	bf00      	nop
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40010400 	.word	0x40010400

08003254 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e081      	b.n	800336a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d106      	bne.n	8003280 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7fe f854 	bl	8001328 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2224      	movs	r2, #36	; 0x24
 8003284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0201 	bic.w	r2, r2, #1
 8003296:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d107      	bne.n	80032ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032ca:	609a      	str	r2, [r3, #8]
 80032cc:	e006      	b.n	80032dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689a      	ldr	r2, [r3, #8]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80032da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d104      	bne.n	80032ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003300:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003310:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691a      	ldr	r2, [r3, #16]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	ea42 0103 	orr.w	r1, r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	021a      	lsls	r2, r3, #8
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	69d9      	ldr	r1, [r3, #28]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a1a      	ldr	r2, [r3, #32]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0201 	orr.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2220      	movs	r2, #32
 8003356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b20      	cmp	r3, #32
 8003386:	d138      	bne.n	80033fa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800338e:	2b01      	cmp	r3, #1
 8003390:	d101      	bne.n	8003396 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003392:	2302      	movs	r3, #2
 8003394:	e032      	b.n	80033fc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2224      	movs	r2, #36	; 0x24
 80033a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0201 	bic.w	r2, r2, #1
 80033b4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033c4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6819      	ldr	r1, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f042 0201 	orr.w	r2, r2, #1
 80033e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	e000      	b.n	80033fc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033fa:	2302      	movs	r3, #2
  }
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b20      	cmp	r3, #32
 800341c:	d139      	bne.n	8003492 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003424:	2b01      	cmp	r3, #1
 8003426:	d101      	bne.n	800342c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003428:	2302      	movs	r3, #2
 800342a:	e033      	b.n	8003494 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2224      	movs	r2, #36	; 0x24
 8003438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0201 	bic.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800345a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	021b      	lsls	r3, r3, #8
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	4313      	orrs	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f042 0201 	orr.w	r2, r2, #1
 800347c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2220      	movs	r2, #32
 8003482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	e000      	b.n	8003494 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003492:	2302      	movs	r3, #2
  }
}
 8003494:	4618      	mov	r0, r3
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034a2:	b08f      	sub	sp, #60	; 0x3c
 80034a4:	af0a      	add	r7, sp, #40	; 0x28
 80034a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e116      	b.n	80036e0 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d106      	bne.n	80034d2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7fd ffbd 	bl	800144c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2203      	movs	r2, #3
 80034d6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d102      	bne.n	80034ec <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f003 fe5f 	bl	80071b4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	603b      	str	r3, [r7, #0]
 80034fc:	687e      	ldr	r6, [r7, #4]
 80034fe:	466d      	mov	r5, sp
 8003500:	f106 0410 	add.w	r4, r6, #16
 8003504:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800350a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800350c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003510:	e885 0003 	stmia.w	r5, {r0, r1}
 8003514:	1d33      	adds	r3, r6, #4
 8003516:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003518:	6838      	ldr	r0, [r7, #0]
 800351a:	f003 fdf9 	bl	8007110 <USB_CoreInit>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d005      	beq.n	8003530 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e0d7      	b.n	80036e0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2100      	movs	r1, #0
 8003536:	4618      	mov	r0, r3
 8003538:	f003 fe4d 	bl	80071d6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800353c:	2300      	movs	r3, #0
 800353e:	73fb      	strb	r3, [r7, #15]
 8003540:	e04a      	b.n	80035d8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003542:	7bfa      	ldrb	r2, [r7, #15]
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	333d      	adds	r3, #61	; 0x3d
 8003552:	2201      	movs	r2, #1
 8003554:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003556:	7bfa      	ldrb	r2, [r7, #15]
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	4613      	mov	r3, r2
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	1a9b      	subs	r3, r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	440b      	add	r3, r1
 8003564:	333c      	adds	r3, #60	; 0x3c
 8003566:	7bfa      	ldrb	r2, [r7, #15]
 8003568:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800356a:	7bfa      	ldrb	r2, [r7, #15]
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	b298      	uxth	r0, r3
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	1a9b      	subs	r3, r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	440b      	add	r3, r1
 800357c:	3342      	adds	r3, #66	; 0x42
 800357e:	4602      	mov	r2, r0
 8003580:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003582:	7bfa      	ldrb	r2, [r7, #15]
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	4613      	mov	r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	1a9b      	subs	r3, r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	333f      	adds	r3, #63	; 0x3f
 8003592:	2200      	movs	r2, #0
 8003594:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003596:	7bfa      	ldrb	r2, [r7, #15]
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	3344      	adds	r3, #68	; 0x44
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035aa:	7bfa      	ldrb	r2, [r7, #15]
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	1a9b      	subs	r3, r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	3348      	adds	r3, #72	; 0x48
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035be:	7bfa      	ldrb	r2, [r7, #15]
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	3350      	adds	r3, #80	; 0x50
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035d2:	7bfb      	ldrb	r3, [r7, #15]
 80035d4:	3301      	adds	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]
 80035d8:	7bfa      	ldrb	r2, [r7, #15]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d3af      	bcc.n	8003542 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035e2:	2300      	movs	r3, #0
 80035e4:	73fb      	strb	r3, [r7, #15]
 80035e6:	e044      	b.n	8003672 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035e8:	7bfa      	ldrb	r2, [r7, #15]
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80035fa:	2200      	movs	r2, #0
 80035fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035fe:	7bfa      	ldrb	r2, [r7, #15]
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	1a9b      	subs	r3, r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003610:	7bfa      	ldrb	r2, [r7, #15]
 8003612:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003614:	7bfa      	ldrb	r2, [r7, #15]
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	4613      	mov	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	1a9b      	subs	r3, r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003626:	2200      	movs	r2, #0
 8003628:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800362a:	7bfa      	ldrb	r2, [r7, #15]
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	4613      	mov	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	1a9b      	subs	r3, r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003640:	7bfa      	ldrb	r2, [r7, #15]
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	4613      	mov	r3, r2
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	1a9b      	subs	r3, r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003656:	7bfa      	ldrb	r2, [r7, #15]
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	4613      	mov	r3, r2
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	1a9b      	subs	r3, r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	440b      	add	r3, r1
 8003664:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800366c:	7bfb      	ldrb	r3, [r7, #15]
 800366e:	3301      	adds	r3, #1
 8003670:	73fb      	strb	r3, [r7, #15]
 8003672:	7bfa      	ldrb	r2, [r7, #15]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	429a      	cmp	r2, r3
 800367a:	d3b5      	bcc.n	80035e8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	603b      	str	r3, [r7, #0]
 8003682:	687e      	ldr	r6, [r7, #4]
 8003684:	466d      	mov	r5, sp
 8003686:	f106 0410 	add.w	r4, r6, #16
 800368a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800368c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800368e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003690:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003692:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003696:	e885 0003 	stmia.w	r5, {r0, r1}
 800369a:	1d33      	adds	r3, r6, #4
 800369c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800369e:	6838      	ldr	r0, [r7, #0]
 80036a0:	f003 fdc4 	bl	800722c <USB_DevInit>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d005      	beq.n	80036b6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2202      	movs	r2, #2
 80036ae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e014      	b.n	80036e0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d102      	bne.n	80036d4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f80a 	bl	80036e8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f003 ff54 	bl	8007586 <USB_DevDisconnect>

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800371a:	f043 0303 	orr.w	r3, r3, #3
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003734:	4b05      	ldr	r3, [pc, #20]	; (800374c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a04      	ldr	r2, [pc, #16]	; (800374c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800373a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800373e:	6013      	str	r3, [r2, #0]
}
 8003740:	bf00      	nop
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	40007000 	.word	0x40007000

08003750 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003754:	4b0d      	ldr	r3, [pc, #52]	; (800378c <HAL_PWREx_GetVoltageRange+0x3c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800375c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003760:	d102      	bne.n	8003768 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003766:	e00b      	b.n	8003780 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003768:	4b08      	ldr	r3, [pc, #32]	; (800378c <HAL_PWREx_GetVoltageRange+0x3c>)
 800376a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800376e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003776:	d102      	bne.n	800377e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003778:	f44f 7300 	mov.w	r3, #512	; 0x200
 800377c:	e000      	b.n	8003780 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800377e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003780:	4618      	mov	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	40007000 	.word	0x40007000

08003790 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d141      	bne.n	8003822 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800379e:	4b4b      	ldr	r3, [pc, #300]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037aa:	d131      	bne.n	8003810 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037ac:	4b47      	ldr	r3, [pc, #284]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037b2:	4a46      	ldr	r2, [pc, #280]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037bc:	4b43      	ldr	r3, [pc, #268]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037c4:	4a41      	ldr	r2, [pc, #260]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80037cc:	4b40      	ldr	r3, [pc, #256]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2232      	movs	r2, #50	; 0x32
 80037d2:	fb02 f303 	mul.w	r3, r2, r3
 80037d6:	4a3f      	ldr	r2, [pc, #252]	; (80038d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80037d8:	fba2 2303 	umull	r2, r3, r2, r3
 80037dc:	0c9b      	lsrs	r3, r3, #18
 80037de:	3301      	adds	r3, #1
 80037e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037e2:	e002      	b.n	80037ea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	3b01      	subs	r3, #1
 80037e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037ea:	4b38      	ldr	r3, [pc, #224]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f6:	d102      	bne.n	80037fe <HAL_PWREx_ControlVoltageScaling+0x6e>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1f2      	bne.n	80037e4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037fe:	4b33      	ldr	r3, [pc, #204]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800380a:	d158      	bne.n	80038be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e057      	b.n	80038c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003810:	4b2e      	ldr	r3, [pc, #184]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003812:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003816:	4a2d      	ldr	r2, [pc, #180]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800381c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003820:	e04d      	b.n	80038be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003828:	d141      	bne.n	80038ae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800382a:	4b28      	ldr	r3, [pc, #160]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003836:	d131      	bne.n	800389c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003838:	4b24      	ldr	r3, [pc, #144]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800383a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800383e:	4a23      	ldr	r2, [pc, #140]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003844:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003848:	4b20      	ldr	r3, [pc, #128]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003850:	4a1e      	ldr	r2, [pc, #120]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003852:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003856:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003858:	4b1d      	ldr	r3, [pc, #116]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2232      	movs	r2, #50	; 0x32
 800385e:	fb02 f303 	mul.w	r3, r2, r3
 8003862:	4a1c      	ldr	r2, [pc, #112]	; (80038d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003864:	fba2 2303 	umull	r2, r3, r2, r3
 8003868:	0c9b      	lsrs	r3, r3, #18
 800386a:	3301      	adds	r3, #1
 800386c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800386e:	e002      	b.n	8003876 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	3b01      	subs	r3, #1
 8003874:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003876:	4b15      	ldr	r3, [pc, #84]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800387e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003882:	d102      	bne.n	800388a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f2      	bne.n	8003870 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800388a:	4b10      	ldr	r3, [pc, #64]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003896:	d112      	bne.n	80038be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e011      	b.n	80038c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800389c:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800389e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038a2:	4a0a      	ldr	r2, [pc, #40]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80038ac:	e007      	b.n	80038be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038ae:	4b07      	ldr	r3, [pc, #28]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038b6:	4a05      	ldr	r2, [pc, #20]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038bc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	40007000 	.word	0x40007000
 80038d0:	20000004 	.word	0x20000004
 80038d4:	431bde83 	.word	0x431bde83

080038d8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80038dc:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	4a04      	ldr	r2, [pc, #16]	; (80038f4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80038e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038e6:	6053      	str	r3, [r2, #4]
}
 80038e8:	bf00      	nop
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	40007000 	.word	0x40007000

080038f8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80038fc:	4b05      	ldr	r3, [pc, #20]	; (8003914 <HAL_PWREx_EnableVddIO2+0x1c>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	4a04      	ldr	r2, [pc, #16]	; (8003914 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003906:	6053      	str	r3, [r2, #4]
}
 8003908:	bf00      	nop
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40007000 	.word	0x40007000

08003918 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b08a      	sub	sp, #40	; 0x28
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d102      	bne.n	800392c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	f000 bc76 	b.w	8004218 <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800392c:	4ba1      	ldr	r3, [pc, #644]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 030c 	and.w	r3, r3, #12
 8003934:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003936:	4b9f      	ldr	r3, [pc, #636]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0310 	and.w	r3, r3, #16
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 80e6 	beq.w	8003b1a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d007      	beq.n	8003964 <HAL_RCC_OscConfig+0x4c>
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	2b0c      	cmp	r3, #12
 8003958:	f040 808d 	bne.w	8003a76 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	2b01      	cmp	r3, #1
 8003960:	f040 8089 	bne.w	8003a76 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003964:	4b93      	ldr	r3, [pc, #588]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d006      	beq.n	800397e <HAL_RCC_OscConfig+0x66>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d102      	bne.n	800397e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	f000 bc4d 	b.w	8004218 <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003982:	4b8c      	ldr	r3, [pc, #560]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d004      	beq.n	8003998 <HAL_RCC_OscConfig+0x80>
 800398e:	4b89      	ldr	r3, [pc, #548]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003996:	e005      	b.n	80039a4 <HAL_RCC_OscConfig+0x8c>
 8003998:	4b86      	ldr	r3, [pc, #536]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 800399a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800399e:	091b      	lsrs	r3, r3, #4
 80039a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d224      	bcs.n	80039f2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 fe5b 	bl	8004668 <RCC_SetFlashLatencyFromMSIRange>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	f000 bc2d 	b.w	8004218 <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039be:	4b7d      	ldr	r3, [pc, #500]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a7c      	ldr	r2, [pc, #496]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 80039c4:	f043 0308 	orr.w	r3, r3, #8
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	4b7a      	ldr	r3, [pc, #488]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	4977      	ldr	r1, [pc, #476]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039dc:	4b75      	ldr	r3, [pc, #468]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	021b      	lsls	r3, r3, #8
 80039ea:	4972      	ldr	r1, [pc, #456]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	604b      	str	r3, [r1, #4]
 80039f0:	e025      	b.n	8003a3e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039f2:	4b70      	ldr	r3, [pc, #448]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a6f      	ldr	r2, [pc, #444]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 80039f8:	f043 0308 	orr.w	r3, r3, #8
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	4b6d      	ldr	r3, [pc, #436]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	496a      	ldr	r1, [pc, #424]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a10:	4b68      	ldr	r3, [pc, #416]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	021b      	lsls	r3, r3, #8
 8003a1e:	4965      	ldr	r1, [pc, #404]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a24:	6a3b      	ldr	r3, [r7, #32]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d109      	bne.n	8003a3e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fe1a 	bl	8004668 <RCC_SetFlashLatencyFromMSIRange>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e3ec      	b.n	8004218 <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a3e:	f000 fd1f 	bl	8004480 <HAL_RCC_GetSysClockFreq>
 8003a42:	4601      	mov	r1, r0
 8003a44:	4b5b      	ldr	r3, [pc, #364]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	091b      	lsrs	r3, r3, #4
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	4a5a      	ldr	r2, [pc, #360]	; (8003bb8 <HAL_RCC_OscConfig+0x2a0>)
 8003a50:	5cd3      	ldrb	r3, [r2, r3]
 8003a52:	f003 031f 	and.w	r3, r3, #31
 8003a56:	fa21 f303 	lsr.w	r3, r1, r3
 8003a5a:	4a58      	ldr	r2, [pc, #352]	; (8003bbc <HAL_RCC_OscConfig+0x2a4>)
 8003a5c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a5e:	4b58      	ldr	r3, [pc, #352]	; (8003bc0 <HAL_RCC_OscConfig+0x2a8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fd fd5e 	bl	8001524 <HAL_InitTick>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8003a6c:	7dfb      	ldrb	r3, [r7, #23]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d052      	beq.n	8003b18 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003a72:	7dfb      	ldrb	r3, [r7, #23]
 8003a74:	e3d0      	b.n	8004218 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d032      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a7e:	4b4d      	ldr	r3, [pc, #308]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a4c      	ldr	r2, [pc, #304]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a8a:	f7fd fe87 	bl	800179c <HAL_GetTick>
 8003a8e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a92:	f7fd fe83 	bl	800179c <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e3b9      	b.n	8004218 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003aa4:	4b43      	ldr	r3, [pc, #268]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f0      	beq.n	8003a92 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ab0:	4b40      	ldr	r3, [pc, #256]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a3f      	ldr	r2, [pc, #252]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 8003ab6:	f043 0308 	orr.w	r3, r3, #8
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	4b3d      	ldr	r3, [pc, #244]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	493a      	ldr	r1, [pc, #232]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ace:	4b39      	ldr	r3, [pc, #228]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	021b      	lsls	r3, r3, #8
 8003adc:	4935      	ldr	r1, [pc, #212]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	604b      	str	r3, [r1, #4]
 8003ae2:	e01a      	b.n	8003b1a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ae4:	4b33      	ldr	r3, [pc, #204]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a32      	ldr	r2, [pc, #200]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 8003aea:	f023 0301 	bic.w	r3, r3, #1
 8003aee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003af0:	f7fd fe54 	bl	800179c <HAL_GetTick>
 8003af4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003af8:	f7fd fe50 	bl	800179c <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e386      	b.n	8004218 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b0a:	4b2a      	ldr	r3, [pc, #168]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_OscConfig+0x1e0>
 8003b16:	e000      	b.n	8003b1a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b18:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d073      	beq.n	8003c0e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d005      	beq.n	8003b38 <HAL_RCC_OscConfig+0x220>
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	2b0c      	cmp	r3, #12
 8003b30:	d10e      	bne.n	8003b50 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	2b03      	cmp	r3, #3
 8003b36:	d10b      	bne.n	8003b50 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b38:	4b1e      	ldr	r3, [pc, #120]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d063      	beq.n	8003c0c <HAL_RCC_OscConfig+0x2f4>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d15f      	bne.n	8003c0c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e363      	b.n	8004218 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b58:	d106      	bne.n	8003b68 <HAL_RCC_OscConfig+0x250>
 8003b5a:	4b16      	ldr	r3, [pc, #88]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a15      	ldr	r2, [pc, #84]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 8003b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	e01d      	b.n	8003ba4 <HAL_RCC_OscConfig+0x28c>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b70:	d10c      	bne.n	8003b8c <HAL_RCC_OscConfig+0x274>
 8003b72:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a0f      	ldr	r2, [pc, #60]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 8003b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	4b0d      	ldr	r3, [pc, #52]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a0c      	ldr	r2, [pc, #48]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 8003b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	e00b      	b.n	8003ba4 <HAL_RCC_OscConfig+0x28c>
 8003b8c:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a08      	ldr	r2, [pc, #32]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 8003b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a05      	ldr	r2, [pc, #20]	; (8003bb4 <HAL_RCC_OscConfig+0x29c>)
 8003b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d01b      	beq.n	8003be4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bac:	f7fd fdf6 	bl	800179c <HAL_GetTick>
 8003bb0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bb2:	e010      	b.n	8003bd6 <HAL_RCC_OscConfig+0x2be>
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	0800a1d0 	.word	0x0800a1d0
 8003bbc:	20000004 	.word	0x20000004
 8003bc0:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc4:	f7fd fdea 	bl	800179c <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b64      	cmp	r3, #100	; 0x64
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e320      	b.n	8004218 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bd6:	4ba0      	ldr	r3, [pc, #640]	; (8003e58 <HAL_RCC_OscConfig+0x540>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0f0      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x2ac>
 8003be2:	e014      	b.n	8003c0e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be4:	f7fd fdda 	bl	800179c <HAL_GetTick>
 8003be8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bec:	f7fd fdd6 	bl	800179c <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b64      	cmp	r3, #100	; 0x64
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e30c      	b.n	8004218 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bfe:	4b96      	ldr	r3, [pc, #600]	; (8003e58 <HAL_RCC_OscConfig+0x540>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0x2d4>
 8003c0a:	e000      	b.n	8003c0e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d060      	beq.n	8003cdc <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d005      	beq.n	8003c2c <HAL_RCC_OscConfig+0x314>
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	2b0c      	cmp	r3, #12
 8003c24:	d119      	bne.n	8003c5a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d116      	bne.n	8003c5a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c2c:	4b8a      	ldr	r3, [pc, #552]	; (8003e58 <HAL_RCC_OscConfig+0x540>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d005      	beq.n	8003c44 <HAL_RCC_OscConfig+0x32c>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e2e9      	b.n	8004218 <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c44:	4b84      	ldr	r3, [pc, #528]	; (8003e58 <HAL_RCC_OscConfig+0x540>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	061b      	lsls	r3, r3, #24
 8003c52:	4981      	ldr	r1, [pc, #516]	; (8003e58 <HAL_RCC_OscConfig+0x540>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c58:	e040      	b.n	8003cdc <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d023      	beq.n	8003caa <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c62:	4b7d      	ldr	r3, [pc, #500]	; (8003e58 <HAL_RCC_OscConfig+0x540>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a7c      	ldr	r2, [pc, #496]	; (8003e58 <HAL_RCC_OscConfig+0x540>)
 8003c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6e:	f7fd fd95 	bl	800179c <HAL_GetTick>
 8003c72:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c74:	e008      	b.n	8003c88 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c76:	f7fd fd91 	bl	800179c <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e2c7      	b.n	8004218 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c88:	4b73      	ldr	r3, [pc, #460]	; (8003e58 <HAL_RCC_OscConfig+0x540>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0f0      	beq.n	8003c76 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c94:	4b70      	ldr	r3, [pc, #448]	; (8003e58 <HAL_RCC_OscConfig+0x540>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	061b      	lsls	r3, r3, #24
 8003ca2:	496d      	ldr	r1, [pc, #436]	; (8003e58 <HAL_RCC_OscConfig+0x540>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	604b      	str	r3, [r1, #4]
 8003ca8:	e018      	b.n	8003cdc <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003caa:	4b6b      	ldr	r3, [pc, #428]	; (8003e58 <HAL_RCC_OscConfig+0x540>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a6a      	ldr	r2, [pc, #424]	; (8003e58 <HAL_RCC_OscConfig+0x540>)
 8003cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb6:	f7fd fd71 	bl	800179c <HAL_GetTick>
 8003cba:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cbe:	f7fd fd6d 	bl	800179c <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e2a3      	b.n	8004218 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cd0:	4b61      	ldr	r3, [pc, #388]	; (8003e58 <HAL_RCC_OscConfig+0x540>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f0      	bne.n	8003cbe <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d07f      	beq.n	8003de8 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d05f      	beq.n	8003db0 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003cf0:	4b59      	ldr	r3, [pc, #356]	; (8003e58 <HAL_RCC_OscConfig+0x540>)
 8003cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cf6:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	699a      	ldr	r2, [r3, #24]
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	f003 0310 	and.w	r3, r3, #16
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d037      	beq.n	8003d76 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d006      	beq.n	8003d1e <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e27c      	b.n	8004218 <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d01b      	beq.n	8003d60 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8003d28:	4b4b      	ldr	r3, [pc, #300]	; (8003e58 <HAL_RCC_OscConfig+0x540>)
 8003d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d2e:	4a4a      	ldr	r2, [pc, #296]	; (8003e58 <HAL_RCC_OscConfig+0x540>)
 8003d30:	f023 0301 	bic.w	r3, r3, #1
 8003d34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d38:	f7fd fd30 	bl	800179c <HAL_GetTick>
 8003d3c:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d40:	f7fd fd2c 	bl	800179c <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b11      	cmp	r3, #17
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e262      	b.n	8004218 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d52:	4b41      	ldr	r3, [pc, #260]	; (8003e58 <HAL_RCC_OscConfig+0x540>)
 8003d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1ef      	bne.n	8003d40 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003d60:	4b3d      	ldr	r3, [pc, #244]	; (8003e58 <HAL_RCC_OscConfig+0x540>)
 8003d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d66:	f023 0210 	bic.w	r2, r3, #16
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	493a      	ldr	r1, [pc, #232]	; (8003e58 <HAL_RCC_OscConfig+0x540>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d76:	4b38      	ldr	r3, [pc, #224]	; (8003e58 <HAL_RCC_OscConfig+0x540>)
 8003d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d7c:	4a36      	ldr	r2, [pc, #216]	; (8003e58 <HAL_RCC_OscConfig+0x540>)
 8003d7e:	f043 0301 	orr.w	r3, r3, #1
 8003d82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d86:	f7fd fd09 	bl	800179c <HAL_GetTick>
 8003d8a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d8e:	f7fd fd05 	bl	800179c <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b11      	cmp	r3, #17
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e23b      	b.n	8004218 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003da0:	4b2d      	ldr	r3, [pc, #180]	; (8003e58 <HAL_RCC_OscConfig+0x540>)
 8003da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0ef      	beq.n	8003d8e <HAL_RCC_OscConfig+0x476>
 8003dae:	e01b      	b.n	8003de8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003db0:	4b29      	ldr	r3, [pc, #164]	; (8003e58 <HAL_RCC_OscConfig+0x540>)
 8003db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003db6:	4a28      	ldr	r2, [pc, #160]	; (8003e58 <HAL_RCC_OscConfig+0x540>)
 8003db8:	f023 0301 	bic.w	r3, r3, #1
 8003dbc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc0:	f7fd fcec 	bl	800179c <HAL_GetTick>
 8003dc4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dc8:	f7fd fce8 	bl	800179c <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b11      	cmp	r3, #17
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e21e      	b.n	8004218 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dda:	4b1f      	ldr	r3, [pc, #124]	; (8003e58 <HAL_RCC_OscConfig+0x540>)
 8003ddc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1ef      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 80c1 	beq.w	8003f78 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003df6:	2300      	movs	r3, #0
 8003df8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003dfc:	4b16      	ldr	r3, [pc, #88]	; (8003e58 <HAL_RCC_OscConfig+0x540>)
 8003dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10e      	bne.n	8003e26 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e08:	4b13      	ldr	r3, [pc, #76]	; (8003e58 <HAL_RCC_OscConfig+0x540>)
 8003e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0c:	4a12      	ldr	r2, [pc, #72]	; (8003e58 <HAL_RCC_OscConfig+0x540>)
 8003e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e12:	6593      	str	r3, [r2, #88]	; 0x58
 8003e14:	4b10      	ldr	r3, [pc, #64]	; (8003e58 <HAL_RCC_OscConfig+0x540>)
 8003e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e20:	2301      	movs	r3, #1
 8003e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e26:	4b0d      	ldr	r3, [pc, #52]	; (8003e5c <HAL_RCC_OscConfig+0x544>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d11c      	bne.n	8003e6c <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e32:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <HAL_RCC_OscConfig+0x544>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a09      	ldr	r2, [pc, #36]	; (8003e5c <HAL_RCC_OscConfig+0x544>)
 8003e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e3e:	f7fd fcad 	bl	800179c <HAL_GetTick>
 8003e42:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e44:	e00c      	b.n	8003e60 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e46:	f7fd fca9 	bl	800179c <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d905      	bls.n	8003e60 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e1df      	b.n	8004218 <HAL_RCC_OscConfig+0x900>
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e60:	4b99      	ldr	r3, [pc, #612]	; (80040c8 <HAL_RCC_OscConfig+0x7b0>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0ec      	beq.n	8003e46 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d02c      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003e78:	4b94      	ldr	r3, [pc, #592]	; (80040cc <HAL_RCC_OscConfig+0x7b4>)
 8003e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8a:	4990      	ldr	r1, [pc, #576]	; (80040cc <HAL_RCC_OscConfig+0x7b4>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d010      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e9e:	4b8b      	ldr	r3, [pc, #556]	; (80040cc <HAL_RCC_OscConfig+0x7b4>)
 8003ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea4:	4a89      	ldr	r2, [pc, #548]	; (80040cc <HAL_RCC_OscConfig+0x7b4>)
 8003ea6:	f043 0304 	orr.w	r3, r3, #4
 8003eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003eae:	4b87      	ldr	r3, [pc, #540]	; (80040cc <HAL_RCC_OscConfig+0x7b4>)
 8003eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb4:	4a85      	ldr	r2, [pc, #532]	; (80040cc <HAL_RCC_OscConfig+0x7b4>)
 8003eb6:	f043 0301 	orr.w	r3, r3, #1
 8003eba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ebe:	e018      	b.n	8003ef2 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ec0:	4b82      	ldr	r3, [pc, #520]	; (80040cc <HAL_RCC_OscConfig+0x7b4>)
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec6:	4a81      	ldr	r2, [pc, #516]	; (80040cc <HAL_RCC_OscConfig+0x7b4>)
 8003ec8:	f043 0301 	orr.w	r3, r3, #1
 8003ecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ed0:	e00f      	b.n	8003ef2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ed2:	4b7e      	ldr	r3, [pc, #504]	; (80040cc <HAL_RCC_OscConfig+0x7b4>)
 8003ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed8:	4a7c      	ldr	r2, [pc, #496]	; (80040cc <HAL_RCC_OscConfig+0x7b4>)
 8003eda:	f023 0301 	bic.w	r3, r3, #1
 8003ede:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ee2:	4b7a      	ldr	r3, [pc, #488]	; (80040cc <HAL_RCC_OscConfig+0x7b4>)
 8003ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee8:	4a78      	ldr	r2, [pc, #480]	; (80040cc <HAL_RCC_OscConfig+0x7b4>)
 8003eea:	f023 0304 	bic.w	r3, r3, #4
 8003eee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d016      	beq.n	8003f28 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efa:	f7fd fc4f 	bl	800179c <HAL_GetTick>
 8003efe:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f00:	e00a      	b.n	8003f18 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f02:	f7fd fc4b 	bl	800179c <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e17f      	b.n	8004218 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f18:	4b6c      	ldr	r3, [pc, #432]	; (80040cc <HAL_RCC_OscConfig+0x7b4>)
 8003f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0ed      	beq.n	8003f02 <HAL_RCC_OscConfig+0x5ea>
 8003f26:	e01d      	b.n	8003f64 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f28:	f7fd fc38 	bl	800179c <HAL_GetTick>
 8003f2c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f2e:	e00a      	b.n	8003f46 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f30:	f7fd fc34 	bl	800179c <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e168      	b.n	8004218 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f46:	4b61      	ldr	r3, [pc, #388]	; (80040cc <HAL_RCC_OscConfig+0x7b4>)
 8003f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1ed      	bne.n	8003f30 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003f54:	4b5d      	ldr	r3, [pc, #372]	; (80040cc <HAL_RCC_OscConfig+0x7b4>)
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5a:	4a5c      	ldr	r2, [pc, #368]	; (80040cc <HAL_RCC_OscConfig+0x7b4>)
 8003f5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d105      	bne.n	8003f78 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f6c:	4b57      	ldr	r3, [pc, #348]	; (80040cc <HAL_RCC_OscConfig+0x7b4>)
 8003f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f70:	4a56      	ldr	r2, [pc, #344]	; (80040cc <HAL_RCC_OscConfig+0x7b4>)
 8003f72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f76:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0320 	and.w	r3, r3, #32
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d03c      	beq.n	8003ffe <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d01c      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f8c:	4b4f      	ldr	r3, [pc, #316]	; (80040cc <HAL_RCC_OscConfig+0x7b4>)
 8003f8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f92:	4a4e      	ldr	r2, [pc, #312]	; (80040cc <HAL_RCC_OscConfig+0x7b4>)
 8003f94:	f043 0301 	orr.w	r3, r3, #1
 8003f98:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f9c:	f7fd fbfe 	bl	800179c <HAL_GetTick>
 8003fa0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fa4:	f7fd fbfa 	bl	800179c <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e130      	b.n	8004218 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fb6:	4b45      	ldr	r3, [pc, #276]	; (80040cc <HAL_RCC_OscConfig+0x7b4>)
 8003fb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0ef      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x68c>
 8003fc4:	e01b      	b.n	8003ffe <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003fc6:	4b41      	ldr	r3, [pc, #260]	; (80040cc <HAL_RCC_OscConfig+0x7b4>)
 8003fc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fcc:	4a3f      	ldr	r2, [pc, #252]	; (80040cc <HAL_RCC_OscConfig+0x7b4>)
 8003fce:	f023 0301 	bic.w	r3, r3, #1
 8003fd2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd6:	f7fd fbe1 	bl	800179c <HAL_GetTick>
 8003fda:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fde:	f7fd fbdd 	bl	800179c <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e113      	b.n	8004218 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ff0:	4b36      	ldr	r3, [pc, #216]	; (80040cc <HAL_RCC_OscConfig+0x7b4>)
 8003ff2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1ef      	bne.n	8003fde <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 8107 	beq.w	8004216 <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	2b02      	cmp	r3, #2
 800400e:	f040 80cf 	bne.w	80041b0 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004012:	4b2e      	ldr	r3, [pc, #184]	; (80040cc <HAL_RCC_OscConfig+0x7b4>)
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	f003 0203 	and.w	r2, r3, #3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004022:	429a      	cmp	r2, r3
 8004024:	d12c      	bne.n	8004080 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004030:	3b01      	subs	r3, #1
 8004032:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004034:	429a      	cmp	r2, r3
 8004036:	d123      	bne.n	8004080 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004042:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004044:	429a      	cmp	r2, r3
 8004046:	d11b      	bne.n	8004080 <HAL_RCC_OscConfig+0x768>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004052:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004054:	429a      	cmp	r2, r3
 8004056:	d113      	bne.n	8004080 <HAL_RCC_OscConfig+0x768>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	085b      	lsrs	r3, r3, #1
 8004064:	3b01      	subs	r3, #1
 8004066:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004068:	429a      	cmp	r2, r3
 800406a:	d109      	bne.n	8004080 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004076:	085b      	lsrs	r3, r3, #1
 8004078:	3b01      	subs	r3, #1
 800407a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800407c:	429a      	cmp	r2, r3
 800407e:	d071      	beq.n	8004164 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	2b0c      	cmp	r3, #12
 8004084:	d06c      	beq.n	8004160 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004086:	4b11      	ldr	r3, [pc, #68]	; (80040cc <HAL_RCC_OscConfig+0x7b4>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d105      	bne.n	800409e <HAL_RCC_OscConfig+0x786>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004092:	4b0e      	ldr	r3, [pc, #56]	; (80040cc <HAL_RCC_OscConfig+0x7b4>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_RCC_OscConfig+0x78a>
#endif
            )
          {
            return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e0ba      	b.n	8004218 <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80040a2:	4b0a      	ldr	r3, [pc, #40]	; (80040cc <HAL_RCC_OscConfig+0x7b4>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a09      	ldr	r2, [pc, #36]	; (80040cc <HAL_RCC_OscConfig+0x7b4>)
 80040a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ac:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040ae:	f7fd fb75 	bl	800179c <HAL_GetTick>
 80040b2:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040b4:	e00c      	b.n	80040d0 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b6:	f7fd fb71 	bl	800179c <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d905      	bls.n	80040d0 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e0a7      	b.n	8004218 <HAL_RCC_OscConfig+0x900>
 80040c8:	40007000 	.word	0x40007000
 80040cc:	40021000 	.word	0x40021000
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040d0:	4b53      	ldr	r3, [pc, #332]	; (8004220 <HAL_RCC_OscConfig+0x908>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1ec      	bne.n	80040b6 <HAL_RCC_OscConfig+0x79e>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040dc:	4b50      	ldr	r3, [pc, #320]	; (8004220 <HAL_RCC_OscConfig+0x908>)
 80040de:	68da      	ldr	r2, [r3, #12]
 80040e0:	4b50      	ldr	r3, [pc, #320]	; (8004224 <HAL_RCC_OscConfig+0x90c>)
 80040e2:	4013      	ands	r3, r2
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040ec:	3a01      	subs	r2, #1
 80040ee:	0112      	lsls	r2, r2, #4
 80040f0:	4311      	orrs	r1, r2
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040f6:	0212      	lsls	r2, r2, #8
 80040f8:	4311      	orrs	r1, r2
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80040fe:	0852      	lsrs	r2, r2, #1
 8004100:	3a01      	subs	r2, #1
 8004102:	0552      	lsls	r2, r2, #21
 8004104:	4311      	orrs	r1, r2
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800410a:	0852      	lsrs	r2, r2, #1
 800410c:	3a01      	subs	r2, #1
 800410e:	0652      	lsls	r2, r2, #25
 8004110:	4311      	orrs	r1, r2
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004116:	06d2      	lsls	r2, r2, #27
 8004118:	430a      	orrs	r2, r1
 800411a:	4941      	ldr	r1, [pc, #260]	; (8004220 <HAL_RCC_OscConfig+0x908>)
 800411c:	4313      	orrs	r3, r2
 800411e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004120:	4b3f      	ldr	r3, [pc, #252]	; (8004220 <HAL_RCC_OscConfig+0x908>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a3e      	ldr	r2, [pc, #248]	; (8004220 <HAL_RCC_OscConfig+0x908>)
 8004126:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800412a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800412c:	4b3c      	ldr	r3, [pc, #240]	; (8004220 <HAL_RCC_OscConfig+0x908>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	4a3b      	ldr	r2, [pc, #236]	; (8004220 <HAL_RCC_OscConfig+0x908>)
 8004132:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004136:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004138:	f7fd fb30 	bl	800179c <HAL_GetTick>
 800413c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004140:	f7fd fb2c 	bl	800179c <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e062      	b.n	8004218 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004152:	4b33      	ldr	r3, [pc, #204]	; (8004220 <HAL_RCC_OscConfig+0x908>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0f0      	beq.n	8004140 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800415e:	e05a      	b.n	8004216 <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e059      	b.n	8004218 <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004164:	4b2e      	ldr	r3, [pc, #184]	; (8004220 <HAL_RCC_OscConfig+0x908>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d152      	bne.n	8004216 <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004170:	4b2b      	ldr	r3, [pc, #172]	; (8004220 <HAL_RCC_OscConfig+0x908>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a2a      	ldr	r2, [pc, #168]	; (8004220 <HAL_RCC_OscConfig+0x908>)
 8004176:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800417a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800417c:	4b28      	ldr	r3, [pc, #160]	; (8004220 <HAL_RCC_OscConfig+0x908>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	4a27      	ldr	r2, [pc, #156]	; (8004220 <HAL_RCC_OscConfig+0x908>)
 8004182:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004186:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004188:	f7fd fb08 	bl	800179c <HAL_GetTick>
 800418c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004190:	f7fd fb04 	bl	800179c <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e03a      	b.n	8004218 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041a2:	4b1f      	ldr	r3, [pc, #124]	; (8004220 <HAL_RCC_OscConfig+0x908>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0f0      	beq.n	8004190 <HAL_RCC_OscConfig+0x878>
 80041ae:	e032      	b.n	8004216 <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041b0:	6a3b      	ldr	r3, [r7, #32]
 80041b2:	2b0c      	cmp	r3, #12
 80041b4:	d02d      	beq.n	8004212 <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b6:	4b1a      	ldr	r3, [pc, #104]	; (8004220 <HAL_RCC_OscConfig+0x908>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a19      	ldr	r2, [pc, #100]	; (8004220 <HAL_RCC_OscConfig+0x908>)
 80041bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041c0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80041c2:	4b17      	ldr	r3, [pc, #92]	; (8004220 <HAL_RCC_OscConfig+0x908>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d105      	bne.n	80041da <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80041ce:	4b14      	ldr	r3, [pc, #80]	; (8004220 <HAL_RCC_OscConfig+0x908>)
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	4a13      	ldr	r2, [pc, #76]	; (8004220 <HAL_RCC_OscConfig+0x908>)
 80041d4:	f023 0303 	bic.w	r3, r3, #3
 80041d8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80041da:	4b11      	ldr	r3, [pc, #68]	; (8004220 <HAL_RCC_OscConfig+0x908>)
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	4a10      	ldr	r2, [pc, #64]	; (8004220 <HAL_RCC_OscConfig+0x908>)
 80041e0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80041e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ea:	f7fd fad7 	bl	800179c <HAL_GetTick>
 80041ee:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041f0:	e008      	b.n	8004204 <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f2:	f7fd fad3 	bl	800179c <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e009      	b.n	8004218 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004204:	4b06      	ldr	r3, [pc, #24]	; (8004220 <HAL_RCC_OscConfig+0x908>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1f0      	bne.n	80041f2 <HAL_RCC_OscConfig+0x8da>
 8004210:	e001      	b.n	8004216 <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e000      	b.n	8004218 <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3728      	adds	r7, #40	; 0x28
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40021000 	.word	0x40021000
 8004224:	019d800c 	.word	0x019d800c

08004228 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004232:	2300      	movs	r3, #0
 8004234:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e10f      	b.n	8004460 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004240:	4b89      	ldr	r3, [pc, #548]	; (8004468 <HAL_RCC_ClockConfig+0x240>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 030f 	and.w	r3, r3, #15
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d910      	bls.n	8004270 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424e:	4b86      	ldr	r3, [pc, #536]	; (8004468 <HAL_RCC_ClockConfig+0x240>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f023 020f 	bic.w	r2, r3, #15
 8004256:	4984      	ldr	r1, [pc, #528]	; (8004468 <HAL_RCC_ClockConfig+0x240>)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	4313      	orrs	r3, r2
 800425c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800425e:	4b82      	ldr	r3, [pc, #520]	; (8004468 <HAL_RCC_ClockConfig+0x240>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d001      	beq.n	8004270 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e0f7      	b.n	8004460 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 8089 	beq.w	8004390 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2b03      	cmp	r3, #3
 8004284:	d133      	bne.n	80042ee <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004286:	4b79      	ldr	r3, [pc, #484]	; (800446c <HAL_RCC_ClockConfig+0x244>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e0e4      	b.n	8004460 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004296:	f000 fa41 	bl	800471c <RCC_GetSysClockFreqFromPLLSource>
 800429a:	4602      	mov	r2, r0
 800429c:	4b74      	ldr	r3, [pc, #464]	; (8004470 <HAL_RCC_ClockConfig+0x248>)
 800429e:	429a      	cmp	r2, r3
 80042a0:	d955      	bls.n	800434e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80042a2:	4b72      	ldr	r3, [pc, #456]	; (800446c <HAL_RCC_ClockConfig+0x244>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10a      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80042ae:	4b6f      	ldr	r3, [pc, #444]	; (800446c <HAL_RCC_ClockConfig+0x244>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042b6:	4a6d      	ldr	r2, [pc, #436]	; (800446c <HAL_RCC_ClockConfig+0x244>)
 80042b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80042be:	2380      	movs	r3, #128	; 0x80
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	e044      	b.n	800434e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d03e      	beq.n	800434e <HAL_RCC_ClockConfig+0x126>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d13a      	bne.n	800434e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80042d8:	4b64      	ldr	r3, [pc, #400]	; (800446c <HAL_RCC_ClockConfig+0x244>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042e0:	4a62      	ldr	r2, [pc, #392]	; (800446c <HAL_RCC_ClockConfig+0x244>)
 80042e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80042e8:	2380      	movs	r3, #128	; 0x80
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	e02f      	b.n	800434e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d107      	bne.n	8004306 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042f6:	4b5d      	ldr	r3, [pc, #372]	; (800446c <HAL_RCC_ClockConfig+0x244>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d115      	bne.n	800432e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e0ac      	b.n	8004460 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d107      	bne.n	800431e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800430e:	4b57      	ldr	r3, [pc, #348]	; (800446c <HAL_RCC_ClockConfig+0x244>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d109      	bne.n	800432e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e0a0      	b.n	8004460 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800431e:	4b53      	ldr	r3, [pc, #332]	; (800446c <HAL_RCC_ClockConfig+0x244>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e098      	b.n	8004460 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800432e:	f000 f8a7 	bl	8004480 <HAL_RCC_GetSysClockFreq>
 8004332:	4602      	mov	r2, r0
 8004334:	4b4e      	ldr	r3, [pc, #312]	; (8004470 <HAL_RCC_ClockConfig+0x248>)
 8004336:	429a      	cmp	r2, r3
 8004338:	d909      	bls.n	800434e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800433a:	4b4c      	ldr	r3, [pc, #304]	; (800446c <HAL_RCC_ClockConfig+0x244>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004342:	4a4a      	ldr	r2, [pc, #296]	; (800446c <HAL_RCC_ClockConfig+0x244>)
 8004344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004348:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800434a:	2380      	movs	r3, #128	; 0x80
 800434c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800434e:	4b47      	ldr	r3, [pc, #284]	; (800446c <HAL_RCC_ClockConfig+0x244>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f023 0203 	bic.w	r2, r3, #3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	4944      	ldr	r1, [pc, #272]	; (800446c <HAL_RCC_ClockConfig+0x244>)
 800435c:	4313      	orrs	r3, r2
 800435e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004360:	f7fd fa1c 	bl	800179c <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004366:	e00a      	b.n	800437e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004368:	f7fd fa18 	bl	800179c <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	f241 3288 	movw	r2, #5000	; 0x1388
 8004376:	4293      	cmp	r3, r2
 8004378:	d901      	bls.n	800437e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e070      	b.n	8004460 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800437e:	4b3b      	ldr	r3, [pc, #236]	; (800446c <HAL_RCC_ClockConfig+0x244>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 020c 	and.w	r2, r3, #12
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	429a      	cmp	r2, r3
 800438e:	d1eb      	bne.n	8004368 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d009      	beq.n	80043b0 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800439c:	4b33      	ldr	r3, [pc, #204]	; (800446c <HAL_RCC_ClockConfig+0x244>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	4930      	ldr	r1, [pc, #192]	; (800446c <HAL_RCC_ClockConfig+0x244>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	608b      	str	r3, [r1, #8]
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	2b80      	cmp	r3, #128	; 0x80
 80043b4:	d105      	bne.n	80043c2 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80043b6:	4b2d      	ldr	r3, [pc, #180]	; (800446c <HAL_RCC_ClockConfig+0x244>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	4a2c      	ldr	r2, [pc, #176]	; (800446c <HAL_RCC_ClockConfig+0x244>)
 80043bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043c0:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043c2:	4b29      	ldr	r3, [pc, #164]	; (8004468 <HAL_RCC_ClockConfig+0x240>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d210      	bcs.n	80043f2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043d0:	4b25      	ldr	r3, [pc, #148]	; (8004468 <HAL_RCC_ClockConfig+0x240>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f023 020f 	bic.w	r2, r3, #15
 80043d8:	4923      	ldr	r1, [pc, #140]	; (8004468 <HAL_RCC_ClockConfig+0x240>)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	4313      	orrs	r3, r2
 80043de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e0:	4b21      	ldr	r3, [pc, #132]	; (8004468 <HAL_RCC_ClockConfig+0x240>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 030f 	and.w	r3, r3, #15
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d001      	beq.n	80043f2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e036      	b.n	8004460 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0304 	and.w	r3, r3, #4
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d008      	beq.n	8004410 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043fe:	4b1b      	ldr	r3, [pc, #108]	; (800446c <HAL_RCC_ClockConfig+0x244>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	4918      	ldr	r1, [pc, #96]	; (800446c <HAL_RCC_ClockConfig+0x244>)
 800440c:	4313      	orrs	r3, r2
 800440e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0308 	and.w	r3, r3, #8
 8004418:	2b00      	cmp	r3, #0
 800441a:	d009      	beq.n	8004430 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800441c:	4b13      	ldr	r3, [pc, #76]	; (800446c <HAL_RCC_ClockConfig+0x244>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	4910      	ldr	r1, [pc, #64]	; (800446c <HAL_RCC_ClockConfig+0x244>)
 800442c:	4313      	orrs	r3, r2
 800442e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004430:	f000 f826 	bl	8004480 <HAL_RCC_GetSysClockFreq>
 8004434:	4601      	mov	r1, r0
 8004436:	4b0d      	ldr	r3, [pc, #52]	; (800446c <HAL_RCC_ClockConfig+0x244>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	091b      	lsrs	r3, r3, #4
 800443c:	f003 030f 	and.w	r3, r3, #15
 8004440:	4a0c      	ldr	r2, [pc, #48]	; (8004474 <HAL_RCC_ClockConfig+0x24c>)
 8004442:	5cd3      	ldrb	r3, [r2, r3]
 8004444:	f003 031f 	and.w	r3, r3, #31
 8004448:	fa21 f303 	lsr.w	r3, r1, r3
 800444c:	4a0a      	ldr	r2, [pc, #40]	; (8004478 <HAL_RCC_ClockConfig+0x250>)
 800444e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004450:	4b0a      	ldr	r3, [pc, #40]	; (800447c <HAL_RCC_ClockConfig+0x254>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4618      	mov	r0, r3
 8004456:	f7fd f865 	bl	8001524 <HAL_InitTick>
 800445a:	4603      	mov	r3, r0
 800445c:	73fb      	strb	r3, [r7, #15]

  return status;
 800445e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004460:	4618      	mov	r0, r3
 8004462:	3718      	adds	r7, #24
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40022000 	.word	0x40022000
 800446c:	40021000 	.word	0x40021000
 8004470:	04c4b400 	.word	0x04c4b400
 8004474:	0800a1d0 	.word	0x0800a1d0
 8004478:	20000004 	.word	0x20000004
 800447c:	20000008 	.word	0x20000008

08004480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004480:	b480      	push	{r7}
 8004482:	b089      	sub	sp, #36	; 0x24
 8004484:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004486:	2300      	movs	r3, #0
 8004488:	61fb      	str	r3, [r7, #28]
 800448a:	2300      	movs	r3, #0
 800448c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800448e:	4b3d      	ldr	r3, [pc, #244]	; (8004584 <HAL_RCC_GetSysClockFreq+0x104>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 030c 	and.w	r3, r3, #12
 8004496:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004498:	4b3a      	ldr	r3, [pc, #232]	; (8004584 <HAL_RCC_GetSysClockFreq+0x104>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f003 0303 	and.w	r3, r3, #3
 80044a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <HAL_RCC_GetSysClockFreq+0x34>
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	2b0c      	cmp	r3, #12
 80044ac:	d121      	bne.n	80044f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d11e      	bne.n	80044f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80044b4:	4b33      	ldr	r3, [pc, #204]	; (8004584 <HAL_RCC_GetSysClockFreq+0x104>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0308 	and.w	r3, r3, #8
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d107      	bne.n	80044d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80044c0:	4b30      	ldr	r3, [pc, #192]	; (8004584 <HAL_RCC_GetSysClockFreq+0x104>)
 80044c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044c6:	0a1b      	lsrs	r3, r3, #8
 80044c8:	f003 030f 	and.w	r3, r3, #15
 80044cc:	61fb      	str	r3, [r7, #28]
 80044ce:	e005      	b.n	80044dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80044d0:	4b2c      	ldr	r3, [pc, #176]	; (8004584 <HAL_RCC_GetSysClockFreq+0x104>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	091b      	lsrs	r3, r3, #4
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80044dc:	4a2a      	ldr	r2, [pc, #168]	; (8004588 <HAL_RCC_GetSysClockFreq+0x108>)
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10d      	bne.n	8004508 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044f0:	e00a      	b.n	8004508 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	2b04      	cmp	r3, #4
 80044f6:	d102      	bne.n	80044fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044f8:	4b24      	ldr	r3, [pc, #144]	; (800458c <HAL_RCC_GetSysClockFreq+0x10c>)
 80044fa:	61bb      	str	r3, [r7, #24]
 80044fc:	e004      	b.n	8004508 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	2b08      	cmp	r3, #8
 8004502:	d101      	bne.n	8004508 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004504:	4b22      	ldr	r3, [pc, #136]	; (8004590 <HAL_RCC_GetSysClockFreq+0x110>)
 8004506:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	2b0c      	cmp	r3, #12
 800450c:	d133      	bne.n	8004576 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800450e:	4b1d      	ldr	r3, [pc, #116]	; (8004584 <HAL_RCC_GetSysClockFreq+0x104>)
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f003 0303 	and.w	r3, r3, #3
 8004516:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2b02      	cmp	r3, #2
 800451c:	d002      	beq.n	8004524 <HAL_RCC_GetSysClockFreq+0xa4>
 800451e:	2b03      	cmp	r3, #3
 8004520:	d003      	beq.n	800452a <HAL_RCC_GetSysClockFreq+0xaa>
 8004522:	e005      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004524:	4b19      	ldr	r3, [pc, #100]	; (800458c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004526:	617b      	str	r3, [r7, #20]
      break;
 8004528:	e005      	b.n	8004536 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800452a:	4b19      	ldr	r3, [pc, #100]	; (8004590 <HAL_RCC_GetSysClockFreq+0x110>)
 800452c:	617b      	str	r3, [r7, #20]
      break;
 800452e:	e002      	b.n	8004536 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	617b      	str	r3, [r7, #20]
      break;
 8004534:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004536:	4b13      	ldr	r3, [pc, #76]	; (8004584 <HAL_RCC_GetSysClockFreq+0x104>)
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	091b      	lsrs	r3, r3, #4
 800453c:	f003 030f 	and.w	r3, r3, #15
 8004540:	3301      	adds	r3, #1
 8004542:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004544:	4b0f      	ldr	r3, [pc, #60]	; (8004584 <HAL_RCC_GetSysClockFreq+0x104>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	0a1b      	lsrs	r3, r3, #8
 800454a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	fb02 f203 	mul.w	r2, r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	fbb2 f3f3 	udiv	r3, r2, r3
 800455a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800455c:	4b09      	ldr	r3, [pc, #36]	; (8004584 <HAL_RCC_GetSysClockFreq+0x104>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	0e5b      	lsrs	r3, r3, #25
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	3301      	adds	r3, #1
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	fbb2 f3f3 	udiv	r3, r2, r3
 8004574:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004576:	69bb      	ldr	r3, [r7, #24]
}
 8004578:	4618      	mov	r0, r3
 800457a:	3724      	adds	r7, #36	; 0x24
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	40021000 	.word	0x40021000
 8004588:	0800a1e8 	.word	0x0800a1e8
 800458c:	00f42400 	.word	0x00f42400
 8004590:	007a1200 	.word	0x007a1200

08004594 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004598:	4b03      	ldr	r3, [pc, #12]	; (80045a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800459a:	681b      	ldr	r3, [r3, #0]
}
 800459c:	4618      	mov	r0, r3
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	20000004 	.word	0x20000004

080045ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80045b0:	f7ff fff0 	bl	8004594 <HAL_RCC_GetHCLKFreq>
 80045b4:	4601      	mov	r1, r0
 80045b6:	4b06      	ldr	r3, [pc, #24]	; (80045d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	0a1b      	lsrs	r3, r3, #8
 80045bc:	f003 0307 	and.w	r3, r3, #7
 80045c0:	4a04      	ldr	r2, [pc, #16]	; (80045d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045c2:	5cd3      	ldrb	r3, [r2, r3]
 80045c4:	f003 031f 	and.w	r3, r3, #31
 80045c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40021000 	.word	0x40021000
 80045d4:	0800a1e0 	.word	0x0800a1e0

080045d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80045dc:	f7ff ffda 	bl	8004594 <HAL_RCC_GetHCLKFreq>
 80045e0:	4601      	mov	r1, r0
 80045e2:	4b06      	ldr	r3, [pc, #24]	; (80045fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	0adb      	lsrs	r3, r3, #11
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	4a04      	ldr	r2, [pc, #16]	; (8004600 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045ee:	5cd3      	ldrb	r3, [r2, r3]
 80045f0:	f003 031f 	and.w	r3, r3, #31
 80045f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40021000 	.word	0x40021000
 8004600:	0800a1e0 	.word	0x0800a1e0

08004604 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	220f      	movs	r2, #15
 8004612:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004614:	4b12      	ldr	r3, [pc, #72]	; (8004660 <HAL_RCC_GetClockConfig+0x5c>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 0203 	and.w	r2, r3, #3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004620:	4b0f      	ldr	r3, [pc, #60]	; (8004660 <HAL_RCC_GetClockConfig+0x5c>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800462c:	4b0c      	ldr	r3, [pc, #48]	; (8004660 <HAL_RCC_GetClockConfig+0x5c>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004638:	4b09      	ldr	r3, [pc, #36]	; (8004660 <HAL_RCC_GetClockConfig+0x5c>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	08db      	lsrs	r3, r3, #3
 800463e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004646:	4b07      	ldr	r3, [pc, #28]	; (8004664 <HAL_RCC_GetClockConfig+0x60>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 020f 	and.w	r2, r3, #15
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	601a      	str	r2, [r3, #0]
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	40021000 	.word	0x40021000
 8004664:	40022000 	.word	0x40022000

08004668 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004670:	2300      	movs	r3, #0
 8004672:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004674:	4b27      	ldr	r3, [pc, #156]	; (8004714 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d003      	beq.n	8004688 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004680:	f7ff f866 	bl	8003750 <HAL_PWREx_GetVoltageRange>
 8004684:	6178      	str	r0, [r7, #20]
 8004686:	e014      	b.n	80046b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004688:	4b22      	ldr	r3, [pc, #136]	; (8004714 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800468a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468c:	4a21      	ldr	r2, [pc, #132]	; (8004714 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800468e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004692:	6593      	str	r3, [r2, #88]	; 0x58
 8004694:	4b1f      	ldr	r3, [pc, #124]	; (8004714 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469c:	60fb      	str	r3, [r7, #12]
 800469e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80046a0:	f7ff f856 	bl	8003750 <HAL_PWREx_GetVoltageRange>
 80046a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80046a6:	4b1b      	ldr	r3, [pc, #108]	; (8004714 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80046a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046aa:	4a1a      	ldr	r2, [pc, #104]	; (8004714 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80046ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046b8:	d10b      	bne.n	80046d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b80      	cmp	r3, #128	; 0x80
 80046be:	d913      	bls.n	80046e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2ba0      	cmp	r3, #160	; 0xa0
 80046c4:	d902      	bls.n	80046cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80046c6:	2302      	movs	r3, #2
 80046c8:	613b      	str	r3, [r7, #16]
 80046ca:	e00d      	b.n	80046e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046cc:	2301      	movs	r3, #1
 80046ce:	613b      	str	r3, [r7, #16]
 80046d0:	e00a      	b.n	80046e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b7f      	cmp	r3, #127	; 0x7f
 80046d6:	d902      	bls.n	80046de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80046d8:	2302      	movs	r3, #2
 80046da:	613b      	str	r3, [r7, #16]
 80046dc:	e004      	b.n	80046e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b70      	cmp	r3, #112	; 0x70
 80046e2:	d101      	bne.n	80046e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046e4:	2301      	movs	r3, #1
 80046e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80046e8:	4b0b      	ldr	r3, [pc, #44]	; (8004718 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f023 020f 	bic.w	r2, r3, #15
 80046f0:	4909      	ldr	r1, [pc, #36]	; (8004718 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80046f8:	4b07      	ldr	r3, [pc, #28]	; (8004718 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 030f 	and.w	r3, r3, #15
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	429a      	cmp	r2, r3
 8004704:	d001      	beq.n	800470a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e000      	b.n	800470c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3718      	adds	r7, #24
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	40021000 	.word	0x40021000
 8004718:	40022000 	.word	0x40022000

0800471c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800471c:	b480      	push	{r7}
 800471e:	b087      	sub	sp, #28
 8004720:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004722:	2300      	movs	r3, #0
 8004724:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8004726:	4b2d      	ldr	r3, [pc, #180]	; (80047dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	2b01      	cmp	r3, #1
 8004730:	d118      	bne.n	8004764 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004732:	4b2a      	ldr	r3, [pc, #168]	; (80047dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	2b00      	cmp	r3, #0
 800473c:	d107      	bne.n	800474e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800473e:	4b27      	ldr	r3, [pc, #156]	; (80047dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004744:	0a1b      	lsrs	r3, r3, #8
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	e005      	b.n	800475a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800474e:	4b23      	ldr	r3, [pc, #140]	; (80047dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	091b      	lsrs	r3, r3, #4
 8004754:	f003 030f 	and.w	r3, r3, #15
 8004758:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800475a:	4a21      	ldr	r2, [pc, #132]	; (80047e0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004762:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004764:	4b1d      	ldr	r3, [pc, #116]	; (80047dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f003 0303 	and.w	r3, r3, #3
 800476c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b02      	cmp	r3, #2
 8004772:	d002      	beq.n	800477a <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8004774:	2b03      	cmp	r3, #3
 8004776:	d003      	beq.n	8004780 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8004778:	e005      	b.n	8004786 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800477a:	4b1a      	ldr	r3, [pc, #104]	; (80047e4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800477c:	613b      	str	r3, [r7, #16]
    break;
 800477e:	e005      	b.n	800478c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004780:	4b19      	ldr	r3, [pc, #100]	; (80047e8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004782:	613b      	str	r3, [r7, #16]
    break;
 8004784:	e002      	b.n	800478c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	613b      	str	r3, [r7, #16]
    break;
 800478a:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800478c:	4b13      	ldr	r3, [pc, #76]	; (80047dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	091b      	lsrs	r3, r3, #4
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	3301      	adds	r3, #1
 8004798:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800479a:	4b10      	ldr	r3, [pc, #64]	; (80047dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	0a1b      	lsrs	r3, r3, #8
 80047a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	fb02 f203 	mul.w	r2, r2, r3
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b0:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047b2:	4b0a      	ldr	r3, [pc, #40]	; (80047dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	0e5b      	lsrs	r3, r3, #25
 80047b8:	f003 0303 	and.w	r3, r3, #3
 80047bc:	3301      	adds	r3, #1
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ca:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80047cc:	683b      	ldr	r3, [r7, #0]
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	371c      	adds	r7, #28
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40021000 	.word	0x40021000
 80047e0:	0800a1e8 	.word	0x0800a1e8
 80047e4:	00f42400 	.word	0x00f42400
 80047e8:	007a1200 	.word	0x007a1200

080047ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047f4:	2300      	movs	r3, #0
 80047f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047f8:	2300      	movs	r3, #0
 80047fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004804:	2b00      	cmp	r3, #0
 8004806:	d03d      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800480c:	2b40      	cmp	r3, #64	; 0x40
 800480e:	d00b      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8004810:	2b40      	cmp	r3, #64	; 0x40
 8004812:	d804      	bhi.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00e      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8004818:	2b20      	cmp	r3, #32
 800481a:	d015      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800481c:	e01d      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800481e:	2b60      	cmp	r3, #96	; 0x60
 8004820:	d01e      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004822:	2b80      	cmp	r3, #128	; 0x80
 8004824:	d01c      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004826:	e018      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004828:	4b86      	ldr	r3, [pc, #536]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	4a85      	ldr	r2, [pc, #532]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800482e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004832:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004834:	e015      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	3304      	adds	r3, #4
 800483a:	2100      	movs	r1, #0
 800483c:	4618      	mov	r0, r3
 800483e:	f000 fb49 	bl	8004ed4 <RCCEx_PLLSAI1_Config>
 8004842:	4603      	mov	r3, r0
 8004844:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004846:	e00c      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	3320      	adds	r3, #32
 800484c:	2100      	movs	r1, #0
 800484e:	4618      	mov	r0, r3
 8004850:	f000 fc30 	bl	80050b4 <RCCEx_PLLSAI2_Config>
 8004854:	4603      	mov	r3, r0
 8004856:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004858:	e003      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	74fb      	strb	r3, [r7, #19]
      break;
 800485e:	e000      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8004860:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004862:	7cfb      	ldrb	r3, [r7, #19]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10b      	bne.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004868:	4b76      	ldr	r3, [pc, #472]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800486a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800486e:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004876:	4973      	ldr	r1, [pc, #460]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004878:	4313      	orrs	r3, r2
 800487a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800487e:	e001      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004880:	7cfb      	ldrb	r3, [r7, #19]
 8004882:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d042      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004898:	d00f      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xce>
 800489a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800489e:	d805      	bhi.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d011      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80048a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048a8:	d017      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xee>
 80048aa:	e01f      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x100>
 80048ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048b0:	d01f      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80048b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048b6:	d01c      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80048b8:	e018      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048ba:	4b62      	ldr	r3, [pc, #392]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	4a61      	ldr	r2, [pc, #388]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048c6:	e015      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3304      	adds	r3, #4
 80048cc:	2100      	movs	r1, #0
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 fb00 	bl	8004ed4 <RCCEx_PLLSAI1_Config>
 80048d4:	4603      	mov	r3, r0
 80048d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048d8:	e00c      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	3320      	adds	r3, #32
 80048de:	2100      	movs	r1, #0
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 fbe7 	bl	80050b4 <RCCEx_PLLSAI2_Config>
 80048e6:	4603      	mov	r3, r0
 80048e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048ea:	e003      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	74fb      	strb	r3, [r7, #19]
      break;
 80048f0:	e000      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 80048f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048f4:	7cfb      	ldrb	r3, [r7, #19]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10b      	bne.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048fa:	4b52      	ldr	r3, [pc, #328]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004900:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004908:	494e      	ldr	r1, [pc, #312]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800490a:	4313      	orrs	r3, r2
 800490c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004910:	e001      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004912:	7cfb      	ldrb	r3, [r7, #19]
 8004914:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 809f 	beq.w	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004924:	2300      	movs	r3, #0
 8004926:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004928:	4b46      	ldr	r3, [pc, #280]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800492a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004934:	2301      	movs	r3, #1
 8004936:	e000      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004938:	2300      	movs	r3, #0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00d      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800493e:	4b41      	ldr	r3, [pc, #260]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004942:	4a40      	ldr	r2, [pc, #256]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004948:	6593      	str	r3, [r2, #88]	; 0x58
 800494a:	4b3e      	ldr	r3, [pc, #248]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800494c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004952:	60bb      	str	r3, [r7, #8]
 8004954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004956:	2301      	movs	r3, #1
 8004958:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800495a:	4b3b      	ldr	r3, [pc, #236]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a3a      	ldr	r2, [pc, #232]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004964:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004966:	f7fc ff19 	bl	800179c <HAL_GetTick>
 800496a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800496c:	e009      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800496e:	f7fc ff15 	bl	800179c <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d902      	bls.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	74fb      	strb	r3, [r7, #19]
        break;
 8004980:	e005      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004982:	4b31      	ldr	r3, [pc, #196]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498a:	2b00      	cmp	r3, #0
 800498c:	d0ef      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 800498e:	7cfb      	ldrb	r3, [r7, #19]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d15b      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004994:	4b2b      	ldr	r3, [pc, #172]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800499a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800499e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d01f      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d019      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049b2:	4b24      	ldr	r3, [pc, #144]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049be:	4b21      	ldr	r3, [pc, #132]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c4:	4a1f      	ldr	r2, [pc, #124]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049ce:	4b1d      	ldr	r3, [pc, #116]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d4:	4a1b      	ldr	r2, [pc, #108]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049de:	4a19      	ldr	r2, [pc, #100]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d016      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f0:	f7fc fed4 	bl	800179c <HAL_GetTick>
 80049f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049f6:	e00b      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049f8:	f7fc fed0 	bl	800179c <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d902      	bls.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	74fb      	strb	r3, [r7, #19]
            break;
 8004a0e:	e006      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a10:	4b0c      	ldr	r3, [pc, #48]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d0ec      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8004a1e:	7cfb      	ldrb	r3, [r7, #19]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10c      	bne.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a24:	4b07      	ldr	r3, [pc, #28]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a34:	4903      	ldr	r1, [pc, #12]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a3c:	e008      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a3e:	7cfb      	ldrb	r3, [r7, #19]
 8004a40:	74bb      	strb	r3, [r7, #18]
 8004a42:	e005      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004a44:	40021000 	.word	0x40021000
 8004a48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4c:	7cfb      	ldrb	r3, [r7, #19]
 8004a4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a50:	7c7b      	ldrb	r3, [r7, #17]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d105      	bne.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a56:	4ba0      	ldr	r3, [pc, #640]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5a:	4a9f      	ldr	r2, [pc, #636]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00a      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a6e:	4b9a      	ldr	r3, [pc, #616]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a74:	f023 0203 	bic.w	r2, r3, #3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7c:	4996      	ldr	r1, [pc, #600]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00a      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a90:	4b91      	ldr	r3, [pc, #580]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a96:	f023 020c 	bic.w	r2, r3, #12
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9e:	498e      	ldr	r1, [pc, #568]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0304 	and.w	r3, r3, #4
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ab2:	4b89      	ldr	r3, [pc, #548]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac0:	4985      	ldr	r1, [pc, #532]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0308 	and.w	r3, r3, #8
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00a      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ad4:	4b80      	ldr	r3, [pc, #512]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ada:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ae2:	497d      	ldr	r1, [pc, #500]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0310 	and.w	r3, r3, #16
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00a      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004af6:	4b78      	ldr	r3, [pc, #480]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b04:	4974      	ldr	r1, [pc, #464]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0320 	and.w	r3, r3, #32
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00a      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b18:	4b6f      	ldr	r3, [pc, #444]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b26:	496c      	ldr	r1, [pc, #432]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b3a:	4b67      	ldr	r3, [pc, #412]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b48:	4963      	ldr	r1, [pc, #396]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00a      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b5c:	4b5e      	ldr	r3, [pc, #376]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b6a:	495b      	ldr	r1, [pc, #364]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b7e:	4b56      	ldr	r3, [pc, #344]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8c:	4952      	ldr	r1, [pc, #328]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00a      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ba0:	4b4d      	ldr	r3, [pc, #308]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bae:	494a      	ldr	r1, [pc, #296]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bc2:	4b45      	ldr	r3, [pc, #276]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd0:	4941      	ldr	r1, [pc, #260]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00a      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004be4:	4b3c      	ldr	r3, [pc, #240]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bea:	f023 0203 	bic.w	r2, r3, #3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bf2:	4939      	ldr	r1, [pc, #228]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d028      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c06:	4b34      	ldr	r3, [pc, #208]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c14:	4930      	ldr	r1, [pc, #192]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c24:	d106      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c26:	4b2c      	ldr	r3, [pc, #176]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	4a2b      	ldr	r2, [pc, #172]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c30:	60d3      	str	r3, [r2, #12]
 8004c32:	e011      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c3c:	d10c      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	3304      	adds	r3, #4
 8004c42:	2101      	movs	r1, #1
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 f945 	bl	8004ed4 <RCCEx_PLLSAI1_Config>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c4e:	7cfb      	ldrb	r3, [r7, #19]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8004c54:	7cfb      	ldrb	r3, [r7, #19]
 8004c56:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d04d      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c6c:	d108      	bne.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004c6e:	4b1a      	ldr	r3, [pc, #104]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c74:	4a18      	ldr	r2, [pc, #96]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c7a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004c7e:	e012      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8004c80:	4b15      	ldr	r3, [pc, #84]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c86:	4a14      	ldr	r2, [pc, #80]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c8c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004c90:	4b11      	ldr	r3, [pc, #68]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c9e:	490e      	ldr	r1, [pc, #56]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004caa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cae:	d106      	bne.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cb0:	4b09      	ldr	r3, [pc, #36]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	4a08      	ldr	r2, [pc, #32]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cba:	60d3      	str	r3, [r2, #12]
 8004cbc:	e020      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cc6:	d109      	bne.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004cc8:	4b03      	ldr	r3, [pc, #12]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	4a02      	ldr	r2, [pc, #8]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd2:	60d3      	str	r3, [r2, #12]
 8004cd4:	e014      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004cd6:	bf00      	nop
 8004cd8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ce0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ce4:	d10c      	bne.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	3304      	adds	r3, #4
 8004cea:	2101      	movs	r1, #1
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 f8f1 	bl	8004ed4 <RCCEx_PLLSAI1_Config>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cf6:	7cfb      	ldrb	r3, [r7, #19]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d001      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004cfc:	7cfb      	ldrb	r3, [r7, #19]
 8004cfe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d028      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d0c:	4b68      	ldr	r3, [pc, #416]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d1a:	4965      	ldr	r1, [pc, #404]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d2a:	d106      	bne.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d2c:	4b60      	ldr	r3, [pc, #384]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	4a5f      	ldr	r2, [pc, #380]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004d32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d36:	60d3      	str	r3, [r2, #12]
 8004d38:	e011      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d42:	d10c      	bne.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	3304      	adds	r3, #4
 8004d48:	2101      	movs	r1, #1
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 f8c2 	bl	8004ed4 <RCCEx_PLLSAI1_Config>
 8004d50:	4603      	mov	r3, r0
 8004d52:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d54:	7cfb      	ldrb	r3, [r7, #19]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8004d5a:	7cfb      	ldrb	r3, [r7, #19]
 8004d5c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d01e      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d6a:	4b51      	ldr	r3, [pc, #324]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d70:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d7a:	494d      	ldr	r1, [pc, #308]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d8c:	d10c      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	3304      	adds	r3, #4
 8004d92:	2102      	movs	r1, #2
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 f89d 	bl	8004ed4 <RCCEx_PLLSAI1_Config>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d9e:	7cfb      	ldrb	r3, [r7, #19]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8004da4:	7cfb      	ldrb	r3, [r7, #19]
 8004da6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00b      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004db4:	4b3e      	ldr	r3, [pc, #248]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004db6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dba:	f023 0204 	bic.w	r2, r3, #4
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dc4:	493a      	ldr	r1, [pc, #232]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00b      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004dd8:	4b35      	ldr	r3, [pc, #212]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004dda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dde:	f023 0218 	bic.w	r2, r3, #24
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de8:	4931      	ldr	r1, [pc, #196]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d035      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x67c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004dfc:	4b2c      	ldr	r3, [pc, #176]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a2b      	ldr	r2, [pc, #172]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004e02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e08:	f7fc fcc8 	bl	800179c <HAL_GetTick>
 8004e0c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e0e:	e009      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e10:	f7fc fcc4 	bl	800179c <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d902      	bls.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x638>
      {
        ret = HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	74fb      	strb	r3, [r7, #19]
        break;
 8004e22:	e005      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x644>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e24:	4b22      	ldr	r3, [pc, #136]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1ef      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x624>
      }
    }

    if(ret == HAL_OK)
 8004e30:	7cfb      	ldrb	r3, [r7, #19]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d113      	bne.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x672>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004e36:	4b1e      	ldr	r3, [pc, #120]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004e38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e46:	491a      	ldr	r1, [pc, #104]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	3320      	adds	r3, #32
 8004e52:	2102      	movs	r1, #2
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 f92d 	bl	80050b4 <RCCEx_PLLSAI2_Config>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8004e5e:	7cfb      	ldrb	r3, [r7, #19]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    {
      /* set overall return value */
      status = ret;
 8004e64:	7cfb      	ldrb	r3, [r7, #19]
 8004e66:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d017      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004e74:	4b0e      	ldr	r3, [pc, #56]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004e76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e84:	490a      	ldr	r1, [pc, #40]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e96:	d105      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e98:	4b05      	ldr	r3, [pc, #20]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	4a04      	ldr	r2, [pc, #16]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004e9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ea2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ea4:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	40021000 	.word	0x40021000

08004eb4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004eb8:	4b05      	ldr	r3, [pc, #20]	; (8004ed0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a04      	ldr	r2, [pc, #16]	; (8004ed0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004ebe:	f043 0304 	orr.w	r3, r3, #4
 8004ec2:	6013      	str	r3, [r2, #0]
}
 8004ec4:	bf00      	nop
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	40021000 	.word	0x40021000

08004ed4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ee2:	4b70      	ldr	r3, [pc, #448]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	f003 0303 	and.w	r3, r3, #3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00e      	beq.n	8004f0c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004eee:	4b6d      	ldr	r3, [pc, #436]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	f003 0203 	and.w	r2, r3, #3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d103      	bne.n	8004f06 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
       ||
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d13f      	bne.n	8004f86 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	73fb      	strb	r3, [r7, #15]
 8004f0a:	e03c      	b.n	8004f86 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d00c      	beq.n	8004f2e <RCCEx_PLLSAI1_Config+0x5a>
 8004f14:	2b03      	cmp	r3, #3
 8004f16:	d013      	beq.n	8004f40 <RCCEx_PLLSAI1_Config+0x6c>
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d120      	bne.n	8004f5e <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f1c:	4b61      	ldr	r3, [pc, #388]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d11d      	bne.n	8004f64 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f2c:	e01a      	b.n	8004f64 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f2e:	4b5d      	ldr	r3, [pc, #372]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d116      	bne.n	8004f68 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f3e:	e013      	b.n	8004f68 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f40:	4b58      	ldr	r3, [pc, #352]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10f      	bne.n	8004f6c <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f4c:	4b55      	ldr	r3, [pc, #340]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d109      	bne.n	8004f6c <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f5c:	e006      	b.n	8004f6c <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	73fb      	strb	r3, [r7, #15]
      break;
 8004f62:	e004      	b.n	8004f6e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004f64:	bf00      	nop
 8004f66:	e002      	b.n	8004f6e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004f68:	bf00      	nop
 8004f6a:	e000      	b.n	8004f6e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004f6c:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f6e:	7bfb      	ldrb	r3, [r7, #15]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d108      	bne.n	8004f86 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004f74:	4b4b      	ldr	r3, [pc, #300]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f023 0203 	bic.w	r2, r3, #3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4948      	ldr	r1, [pc, #288]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004f86:	7bfb      	ldrb	r3, [r7, #15]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f040 8086 	bne.w	800509a <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f8e:	4b45      	ldr	r3, [pc, #276]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a44      	ldr	r2, [pc, #272]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004f94:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f9a:	f7fc fbff 	bl	800179c <HAL_GetTick>
 8004f9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004fa0:	e009      	b.n	8004fb6 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fa2:	f7fc fbfb 	bl	800179c <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d902      	bls.n	8004fb6 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	73fb      	strb	r3, [r7, #15]
        break;
 8004fb4:	e005      	b.n	8004fc2 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004fb6:	4b3b      	ldr	r3, [pc, #236]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1ef      	bne.n	8004fa2 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8004fc2:	7bfb      	ldrb	r3, [r7, #15]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d168      	bne.n	800509a <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d113      	bne.n	8004ff6 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fce:	4b35      	ldr	r3, [pc, #212]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004fd0:	691a      	ldr	r2, [r3, #16]
 8004fd2:	4b35      	ldr	r3, [pc, #212]	; (80050a8 <RCCEx_PLLSAI1_Config+0x1d4>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	6892      	ldr	r2, [r2, #8]
 8004fda:	0211      	lsls	r1, r2, #8
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	68d2      	ldr	r2, [r2, #12]
 8004fe0:	06d2      	lsls	r2, r2, #27
 8004fe2:	4311      	orrs	r1, r2
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	6852      	ldr	r2, [r2, #4]
 8004fe8:	3a01      	subs	r2, #1
 8004fea:	0112      	lsls	r2, r2, #4
 8004fec:	430a      	orrs	r2, r1
 8004fee:	492d      	ldr	r1, [pc, #180]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	610b      	str	r3, [r1, #16]
 8004ff4:	e02d      	b.n	8005052 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d115      	bne.n	8005028 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ffc:	4b29      	ldr	r3, [pc, #164]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004ffe:	691a      	ldr	r2, [r3, #16]
 8005000:	4b2a      	ldr	r3, [pc, #168]	; (80050ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8005002:	4013      	ands	r3, r2
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6892      	ldr	r2, [r2, #8]
 8005008:	0211      	lsls	r1, r2, #8
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	6912      	ldr	r2, [r2, #16]
 800500e:	0852      	lsrs	r2, r2, #1
 8005010:	3a01      	subs	r2, #1
 8005012:	0552      	lsls	r2, r2, #21
 8005014:	4311      	orrs	r1, r2
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	6852      	ldr	r2, [r2, #4]
 800501a:	3a01      	subs	r2, #1
 800501c:	0112      	lsls	r2, r2, #4
 800501e:	430a      	orrs	r2, r1
 8005020:	4920      	ldr	r1, [pc, #128]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005022:	4313      	orrs	r3, r2
 8005024:	610b      	str	r3, [r1, #16]
 8005026:	e014      	b.n	8005052 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005028:	4b1e      	ldr	r3, [pc, #120]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	4b20      	ldr	r3, [pc, #128]	; (80050b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800502e:	4013      	ands	r3, r2
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6892      	ldr	r2, [r2, #8]
 8005034:	0211      	lsls	r1, r2, #8
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6952      	ldr	r2, [r2, #20]
 800503a:	0852      	lsrs	r2, r2, #1
 800503c:	3a01      	subs	r2, #1
 800503e:	0652      	lsls	r2, r2, #25
 8005040:	4311      	orrs	r1, r2
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	6852      	ldr	r2, [r2, #4]
 8005046:	3a01      	subs	r2, #1
 8005048:	0112      	lsls	r2, r2, #4
 800504a:	430a      	orrs	r2, r1
 800504c:	4915      	ldr	r1, [pc, #84]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800504e:	4313      	orrs	r3, r2
 8005050:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005052:	4b14      	ldr	r3, [pc, #80]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a13      	ldr	r2, [pc, #76]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005058:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800505c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800505e:	f7fc fb9d 	bl	800179c <HAL_GetTick>
 8005062:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005064:	e009      	b.n	800507a <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005066:	f7fc fb99 	bl	800179c <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d902      	bls.n	800507a <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	73fb      	strb	r3, [r7, #15]
          break;
 8005078:	e005      	b.n	8005086 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800507a:	4b0a      	ldr	r3, [pc, #40]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d0ef      	beq.n	8005066 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8005086:	7bfb      	ldrb	r3, [r7, #15]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d106      	bne.n	800509a <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800508c:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800508e:	691a      	ldr	r2, [r3, #16]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	4903      	ldr	r1, [pc, #12]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005096:	4313      	orrs	r3, r2
 8005098:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800509a:	7bfb      	ldrb	r3, [r7, #15]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	40021000 	.word	0x40021000
 80050a8:	07ff800f 	.word	0x07ff800f
 80050ac:	ff9f800f 	.word	0xff9f800f
 80050b0:	f9ff800f 	.word	0xf9ff800f

080050b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80050c2:	4b70      	ldr	r3, [pc, #448]	; (8005284 <RCCEx_PLLSAI2_Config+0x1d0>)
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00e      	beq.n	80050ec <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80050ce:	4b6d      	ldr	r3, [pc, #436]	; (8005284 <RCCEx_PLLSAI2_Config+0x1d0>)
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f003 0203 	and.w	r2, r3, #3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d103      	bne.n	80050e6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
       ||
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d13f      	bne.n	8005166 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	73fb      	strb	r3, [r7, #15]
 80050ea:	e03c      	b.n	8005166 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d00c      	beq.n	800510e <RCCEx_PLLSAI2_Config+0x5a>
 80050f4:	2b03      	cmp	r3, #3
 80050f6:	d013      	beq.n	8005120 <RCCEx_PLLSAI2_Config+0x6c>
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d120      	bne.n	800513e <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80050fc:	4b61      	ldr	r3, [pc, #388]	; (8005284 <RCCEx_PLLSAI2_Config+0x1d0>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d11d      	bne.n	8005144 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800510c:	e01a      	b.n	8005144 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800510e:	4b5d      	ldr	r3, [pc, #372]	; (8005284 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005116:	2b00      	cmp	r3, #0
 8005118:	d116      	bne.n	8005148 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800511e:	e013      	b.n	8005148 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005120:	4b58      	ldr	r3, [pc, #352]	; (8005284 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10f      	bne.n	800514c <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800512c:	4b55      	ldr	r3, [pc, #340]	; (8005284 <RCCEx_PLLSAI2_Config+0x1d0>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d109      	bne.n	800514c <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800513c:	e006      	b.n	800514c <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	73fb      	strb	r3, [r7, #15]
      break;
 8005142:	e004      	b.n	800514e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005144:	bf00      	nop
 8005146:	e002      	b.n	800514e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005148:	bf00      	nop
 800514a:	e000      	b.n	800514e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 800514c:	bf00      	nop
    }

    if(status == HAL_OK)
 800514e:	7bfb      	ldrb	r3, [r7, #15]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d108      	bne.n	8005166 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005154:	4b4b      	ldr	r3, [pc, #300]	; (8005284 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	f023 0203 	bic.w	r2, r3, #3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4948      	ldr	r1, [pc, #288]	; (8005284 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005162:	4313      	orrs	r3, r2
 8005164:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005166:	7bfb      	ldrb	r3, [r7, #15]
 8005168:	2b00      	cmp	r3, #0
 800516a:	f040 8086 	bne.w	800527a <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800516e:	4b45      	ldr	r3, [pc, #276]	; (8005284 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a44      	ldr	r2, [pc, #272]	; (8005284 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005178:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800517a:	f7fc fb0f 	bl	800179c <HAL_GetTick>
 800517e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005180:	e009      	b.n	8005196 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005182:	f7fc fb0b 	bl	800179c <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b02      	cmp	r3, #2
 800518e:	d902      	bls.n	8005196 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	73fb      	strb	r3, [r7, #15]
        break;
 8005194:	e005      	b.n	80051a2 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005196:	4b3b      	ldr	r3, [pc, #236]	; (8005284 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1ef      	bne.n	8005182 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80051a2:	7bfb      	ldrb	r3, [r7, #15]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d168      	bne.n	800527a <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d113      	bne.n	80051d6 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80051ae:	4b35      	ldr	r3, [pc, #212]	; (8005284 <RCCEx_PLLSAI2_Config+0x1d0>)
 80051b0:	695a      	ldr	r2, [r3, #20]
 80051b2:	4b35      	ldr	r3, [pc, #212]	; (8005288 <RCCEx_PLLSAI2_Config+0x1d4>)
 80051b4:	4013      	ands	r3, r2
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6892      	ldr	r2, [r2, #8]
 80051ba:	0211      	lsls	r1, r2, #8
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	68d2      	ldr	r2, [r2, #12]
 80051c0:	06d2      	lsls	r2, r2, #27
 80051c2:	4311      	orrs	r1, r2
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6852      	ldr	r2, [r2, #4]
 80051c8:	3a01      	subs	r2, #1
 80051ca:	0112      	lsls	r2, r2, #4
 80051cc:	430a      	orrs	r2, r1
 80051ce:	492d      	ldr	r1, [pc, #180]	; (8005284 <RCCEx_PLLSAI2_Config+0x1d0>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	614b      	str	r3, [r1, #20]
 80051d4:	e02d      	b.n	8005232 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d115      	bne.n	8005208 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80051dc:	4b29      	ldr	r3, [pc, #164]	; (8005284 <RCCEx_PLLSAI2_Config+0x1d0>)
 80051de:	695a      	ldr	r2, [r3, #20]
 80051e0:	4b2a      	ldr	r3, [pc, #168]	; (800528c <RCCEx_PLLSAI2_Config+0x1d8>)
 80051e2:	4013      	ands	r3, r2
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6892      	ldr	r2, [r2, #8]
 80051e8:	0211      	lsls	r1, r2, #8
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6912      	ldr	r2, [r2, #16]
 80051ee:	0852      	lsrs	r2, r2, #1
 80051f0:	3a01      	subs	r2, #1
 80051f2:	0552      	lsls	r2, r2, #21
 80051f4:	4311      	orrs	r1, r2
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	6852      	ldr	r2, [r2, #4]
 80051fa:	3a01      	subs	r2, #1
 80051fc:	0112      	lsls	r2, r2, #4
 80051fe:	430a      	orrs	r2, r1
 8005200:	4920      	ldr	r1, [pc, #128]	; (8005284 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005202:	4313      	orrs	r3, r2
 8005204:	614b      	str	r3, [r1, #20]
 8005206:	e014      	b.n	8005232 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005208:	4b1e      	ldr	r3, [pc, #120]	; (8005284 <RCCEx_PLLSAI2_Config+0x1d0>)
 800520a:	695a      	ldr	r2, [r3, #20]
 800520c:	4b20      	ldr	r3, [pc, #128]	; (8005290 <RCCEx_PLLSAI2_Config+0x1dc>)
 800520e:	4013      	ands	r3, r2
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	6892      	ldr	r2, [r2, #8]
 8005214:	0211      	lsls	r1, r2, #8
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6952      	ldr	r2, [r2, #20]
 800521a:	0852      	lsrs	r2, r2, #1
 800521c:	3a01      	subs	r2, #1
 800521e:	0652      	lsls	r2, r2, #25
 8005220:	4311      	orrs	r1, r2
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	6852      	ldr	r2, [r2, #4]
 8005226:	3a01      	subs	r2, #1
 8005228:	0112      	lsls	r2, r2, #4
 800522a:	430a      	orrs	r2, r1
 800522c:	4915      	ldr	r1, [pc, #84]	; (8005284 <RCCEx_PLLSAI2_Config+0x1d0>)
 800522e:	4313      	orrs	r3, r2
 8005230:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005232:	4b14      	ldr	r3, [pc, #80]	; (8005284 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a13      	ldr	r2, [pc, #76]	; (8005284 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800523c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800523e:	f7fc faad 	bl	800179c <HAL_GetTick>
 8005242:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005244:	e009      	b.n	800525a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005246:	f7fc faa9 	bl	800179c <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d902      	bls.n	800525a <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	73fb      	strb	r3, [r7, #15]
          break;
 8005258:	e005      	b.n	8005266 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800525a:	4b0a      	ldr	r3, [pc, #40]	; (8005284 <RCCEx_PLLSAI2_Config+0x1d0>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d0ef      	beq.n	8005246 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8005266:	7bfb      	ldrb	r3, [r7, #15]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d106      	bne.n	800527a <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800526c:	4b05      	ldr	r3, [pc, #20]	; (8005284 <RCCEx_PLLSAI2_Config+0x1d0>)
 800526e:	695a      	ldr	r2, [r3, #20]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	4903      	ldr	r1, [pc, #12]	; (8005284 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005276:	4313      	orrs	r3, r2
 8005278:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800527a:	7bfb      	ldrb	r3, [r7, #15]
}
 800527c:	4618      	mov	r0, r3
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	40021000 	.word	0x40021000
 8005288:	07ff800f 	.word	0x07ff800f
 800528c:	ff9f800f 	.word	0xff9f800f
 8005290:	f9ff800f 	.word	0xf9ff800f

08005294 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d101      	bne.n	80052a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e049      	b.n	800533a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d106      	bne.n	80052c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f841 	bl	8005342 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	3304      	adds	r3, #4
 80052d0:	4619      	mov	r1, r3
 80052d2:	4610      	mov	r0, r2
 80052d4:	f000 f9f8 	bl	80056c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
	...

08005358 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b01      	cmp	r3, #1
 800536a:	d001      	beq.n	8005370 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e04f      	b.n	8005410 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2202      	movs	r2, #2
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68da      	ldr	r2, [r3, #12]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f042 0201 	orr.w	r2, r2, #1
 8005386:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a23      	ldr	r2, [pc, #140]	; (800541c <HAL_TIM_Base_Start_IT+0xc4>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d01d      	beq.n	80053ce <HAL_TIM_Base_Start_IT+0x76>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800539a:	d018      	beq.n	80053ce <HAL_TIM_Base_Start_IT+0x76>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a1f      	ldr	r2, [pc, #124]	; (8005420 <HAL_TIM_Base_Start_IT+0xc8>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d013      	beq.n	80053ce <HAL_TIM_Base_Start_IT+0x76>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a1e      	ldr	r2, [pc, #120]	; (8005424 <HAL_TIM_Base_Start_IT+0xcc>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d00e      	beq.n	80053ce <HAL_TIM_Base_Start_IT+0x76>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a1c      	ldr	r2, [pc, #112]	; (8005428 <HAL_TIM_Base_Start_IT+0xd0>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d009      	beq.n	80053ce <HAL_TIM_Base_Start_IT+0x76>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a1b      	ldr	r2, [pc, #108]	; (800542c <HAL_TIM_Base_Start_IT+0xd4>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d004      	beq.n	80053ce <HAL_TIM_Base_Start_IT+0x76>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a19      	ldr	r2, [pc, #100]	; (8005430 <HAL_TIM_Base_Start_IT+0xd8>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d115      	bne.n	80053fa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689a      	ldr	r2, [r3, #8]
 80053d4:	4b17      	ldr	r3, [pc, #92]	; (8005434 <HAL_TIM_Base_Start_IT+0xdc>)
 80053d6:	4013      	ands	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2b06      	cmp	r3, #6
 80053de:	d015      	beq.n	800540c <HAL_TIM_Base_Start_IT+0xb4>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053e6:	d011      	beq.n	800540c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f042 0201 	orr.w	r2, r2, #1
 80053f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f8:	e008      	b.n	800540c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f042 0201 	orr.w	r2, r2, #1
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	e000      	b.n	800540e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800540c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3714      	adds	r7, #20
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	40012c00 	.word	0x40012c00
 8005420:	40000400 	.word	0x40000400
 8005424:	40000800 	.word	0x40000800
 8005428:	40000c00 	.word	0x40000c00
 800542c:	40013400 	.word	0x40013400
 8005430:	40014000 	.word	0x40014000
 8005434:	00010007 	.word	0x00010007

08005438 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b02      	cmp	r3, #2
 800544c:	d122      	bne.n	8005494 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b02      	cmp	r3, #2
 800545a:	d11b      	bne.n	8005494 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f06f 0202 	mvn.w	r2, #2
 8005464:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	f003 0303 	and.w	r3, r3, #3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f905 	bl	800568a <HAL_TIM_IC_CaptureCallback>
 8005480:	e005      	b.n	800548e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f8f7 	bl	8005676 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f908 	bl	800569e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	f003 0304 	and.w	r3, r3, #4
 800549e:	2b04      	cmp	r3, #4
 80054a0:	d122      	bne.n	80054e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f003 0304 	and.w	r3, r3, #4
 80054ac:	2b04      	cmp	r3, #4
 80054ae:	d11b      	bne.n	80054e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f06f 0204 	mvn.w	r2, #4
 80054b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2202      	movs	r2, #2
 80054be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f8db 	bl	800568a <HAL_TIM_IC_CaptureCallback>
 80054d4:	e005      	b.n	80054e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f8cd 	bl	8005676 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 f8de 	bl	800569e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	f003 0308 	and.w	r3, r3, #8
 80054f2:	2b08      	cmp	r3, #8
 80054f4:	d122      	bne.n	800553c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f003 0308 	and.w	r3, r3, #8
 8005500:	2b08      	cmp	r3, #8
 8005502:	d11b      	bne.n	800553c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f06f 0208 	mvn.w	r2, #8
 800550c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2204      	movs	r2, #4
 8005512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	f003 0303 	and.w	r3, r3, #3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d003      	beq.n	800552a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f8b1 	bl	800568a <HAL_TIM_IC_CaptureCallback>
 8005528:	e005      	b.n	8005536 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f8a3 	bl	8005676 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f8b4 	bl	800569e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	f003 0310 	and.w	r3, r3, #16
 8005546:	2b10      	cmp	r3, #16
 8005548:	d122      	bne.n	8005590 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	f003 0310 	and.w	r3, r3, #16
 8005554:	2b10      	cmp	r3, #16
 8005556:	d11b      	bne.n	8005590 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f06f 0210 	mvn.w	r2, #16
 8005560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2208      	movs	r2, #8
 8005566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005572:	2b00      	cmp	r3, #0
 8005574:	d003      	beq.n	800557e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f887 	bl	800568a <HAL_TIM_IC_CaptureCallback>
 800557c:	e005      	b.n	800558a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f879 	bl	8005676 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f88a 	bl	800569e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b01      	cmp	r3, #1
 800559c:	d10e      	bne.n	80055bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d107      	bne.n	80055bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f06f 0201 	mvn.w	r2, #1
 80055b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7fb fe38 	bl	800122c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c6:	2b80      	cmp	r3, #128	; 0x80
 80055c8:	d10e      	bne.n	80055e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055d4:	2b80      	cmp	r3, #128	; 0x80
 80055d6:	d107      	bne.n	80055e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f914 	bl	8005810 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055f6:	d10e      	bne.n	8005616 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005602:	2b80      	cmp	r3, #128	; 0x80
 8005604:	d107      	bne.n	8005616 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800560e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 f907 	bl	8005824 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005620:	2b40      	cmp	r3, #64	; 0x40
 8005622:	d10e      	bne.n	8005642 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800562e:	2b40      	cmp	r3, #64	; 0x40
 8005630:	d107      	bne.n	8005642 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800563a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 f838 	bl	80056b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	f003 0320 	and.w	r3, r3, #32
 800564c:	2b20      	cmp	r3, #32
 800564e:	d10e      	bne.n	800566e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f003 0320 	and.w	r3, r3, #32
 800565a:	2b20      	cmp	r3, #32
 800565c:	d107      	bne.n	800566e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f06f 0220 	mvn.w	r2, #32
 8005666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f8c7 	bl	80057fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800566e:	bf00      	nop
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005676:	b480      	push	{r7}
 8005678:	b083      	sub	sp, #12
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800567e:	bf00      	nop
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800568a:	b480      	push	{r7}
 800568c:	b083      	sub	sp, #12
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005692:	bf00      	nop
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056a6:	bf00      	nop
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b083      	sub	sp, #12
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056ba:	bf00      	nop
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
	...

080056c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a40      	ldr	r2, [pc, #256]	; (80057dc <TIM_Base_SetConfig+0x114>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d013      	beq.n	8005708 <TIM_Base_SetConfig+0x40>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e6:	d00f      	beq.n	8005708 <TIM_Base_SetConfig+0x40>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a3d      	ldr	r2, [pc, #244]	; (80057e0 <TIM_Base_SetConfig+0x118>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d00b      	beq.n	8005708 <TIM_Base_SetConfig+0x40>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a3c      	ldr	r2, [pc, #240]	; (80057e4 <TIM_Base_SetConfig+0x11c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d007      	beq.n	8005708 <TIM_Base_SetConfig+0x40>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a3b      	ldr	r2, [pc, #236]	; (80057e8 <TIM_Base_SetConfig+0x120>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d003      	beq.n	8005708 <TIM_Base_SetConfig+0x40>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a3a      	ldr	r2, [pc, #232]	; (80057ec <TIM_Base_SetConfig+0x124>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d108      	bne.n	800571a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	4313      	orrs	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a2f      	ldr	r2, [pc, #188]	; (80057dc <TIM_Base_SetConfig+0x114>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d01f      	beq.n	8005762 <TIM_Base_SetConfig+0x9a>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005728:	d01b      	beq.n	8005762 <TIM_Base_SetConfig+0x9a>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a2c      	ldr	r2, [pc, #176]	; (80057e0 <TIM_Base_SetConfig+0x118>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d017      	beq.n	8005762 <TIM_Base_SetConfig+0x9a>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a2b      	ldr	r2, [pc, #172]	; (80057e4 <TIM_Base_SetConfig+0x11c>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d013      	beq.n	8005762 <TIM_Base_SetConfig+0x9a>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a2a      	ldr	r2, [pc, #168]	; (80057e8 <TIM_Base_SetConfig+0x120>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d00f      	beq.n	8005762 <TIM_Base_SetConfig+0x9a>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a29      	ldr	r2, [pc, #164]	; (80057ec <TIM_Base_SetConfig+0x124>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d00b      	beq.n	8005762 <TIM_Base_SetConfig+0x9a>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a28      	ldr	r2, [pc, #160]	; (80057f0 <TIM_Base_SetConfig+0x128>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d007      	beq.n	8005762 <TIM_Base_SetConfig+0x9a>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a27      	ldr	r2, [pc, #156]	; (80057f4 <TIM_Base_SetConfig+0x12c>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d003      	beq.n	8005762 <TIM_Base_SetConfig+0x9a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a26      	ldr	r2, [pc, #152]	; (80057f8 <TIM_Base_SetConfig+0x130>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d108      	bne.n	8005774 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005768:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	4313      	orrs	r3, r2
 8005772:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a10      	ldr	r2, [pc, #64]	; (80057dc <TIM_Base_SetConfig+0x114>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d00f      	beq.n	80057c0 <TIM_Base_SetConfig+0xf8>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a12      	ldr	r2, [pc, #72]	; (80057ec <TIM_Base_SetConfig+0x124>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d00b      	beq.n	80057c0 <TIM_Base_SetConfig+0xf8>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a11      	ldr	r2, [pc, #68]	; (80057f0 <TIM_Base_SetConfig+0x128>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d007      	beq.n	80057c0 <TIM_Base_SetConfig+0xf8>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a10      	ldr	r2, [pc, #64]	; (80057f4 <TIM_Base_SetConfig+0x12c>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d003      	beq.n	80057c0 <TIM_Base_SetConfig+0xf8>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a0f      	ldr	r2, [pc, #60]	; (80057f8 <TIM_Base_SetConfig+0x130>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d103      	bne.n	80057c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	691a      	ldr	r2, [r3, #16]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	615a      	str	r2, [r3, #20]
}
 80057ce:	bf00      	nop
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	40012c00 	.word	0x40012c00
 80057e0:	40000400 	.word	0x40000400
 80057e4:	40000800 	.word	0x40000800
 80057e8:	40000c00 	.word	0x40000c00
 80057ec:	40013400 	.word	0x40013400
 80057f0:	40014000 	.word	0x40014000
 80057f4:	40014400 	.word	0x40014400
 80057f8:	40014800 	.word	0x40014800

080057fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e042      	b.n	80058d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005850:	2b00      	cmp	r3, #0
 8005852:	d106      	bne.n	8005862 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7fb fda7 	bl	80013b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2224      	movs	r2, #36	; 0x24
 8005866:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 0201 	bic.w	r2, r2, #1
 8005878:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fbb2 	bl	8005fe4 <UART_SetConfig>
 8005880:	4603      	mov	r3, r0
 8005882:	2b01      	cmp	r3, #1
 8005884:	d101      	bne.n	800588a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e022      	b.n	80058d0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588e:	2b00      	cmp	r3, #0
 8005890:	d002      	beq.n	8005898 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 fe78 	bl	8006588 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f042 0201 	orr.w	r2, r2, #1
 80058c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 feff 	bl	80066cc <UART_CheckIdleState>
 80058ce:	4603      	mov	r3, r0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b08a      	sub	sp, #40	; 0x28
 80058dc:	af02      	add	r7, sp, #8
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	603b      	str	r3, [r7, #0]
 80058e4:	4613      	mov	r3, r2
 80058e6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058ee:	2b20      	cmp	r3, #32
 80058f0:	f040 8083 	bne.w	80059fa <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d002      	beq.n	8005900 <HAL_UART_Transmit+0x28>
 80058fa:	88fb      	ldrh	r3, [r7, #6]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e07b      	b.n	80059fc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800590a:	2b01      	cmp	r3, #1
 800590c:	d101      	bne.n	8005912 <HAL_UART_Transmit+0x3a>
 800590e:	2302      	movs	r3, #2
 8005910:	e074      	b.n	80059fc <HAL_UART_Transmit+0x124>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2221      	movs	r2, #33	; 0x21
 8005926:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800592a:	f7fb ff37 	bl	800179c <HAL_GetTick>
 800592e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	88fa      	ldrh	r2, [r7, #6]
 8005934:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	88fa      	ldrh	r2, [r7, #6]
 800593c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005948:	d108      	bne.n	800595c <HAL_UART_Transmit+0x84>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d104      	bne.n	800595c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005952:	2300      	movs	r3, #0
 8005954:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	61bb      	str	r3, [r7, #24]
 800595a:	e003      	b.n	8005964 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005960:	2300      	movs	r3, #0
 8005962:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800596c:	e02c      	b.n	80059c8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2200      	movs	r2, #0
 8005976:	2180      	movs	r1, #128	; 0x80
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 feef 	bl	800675c <UART_WaitOnFlagUntilTimeout>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d001      	beq.n	8005988 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e039      	b.n	80059fc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10b      	bne.n	80059a6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	881b      	ldrh	r3, [r3, #0]
 8005992:	461a      	mov	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800599c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	3302      	adds	r3, #2
 80059a2:	61bb      	str	r3, [r7, #24]
 80059a4:	e007      	b.n	80059b6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	781a      	ldrb	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	3301      	adds	r3, #1
 80059b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80059bc:	b29b      	uxth	r3, r3
 80059be:	3b01      	subs	r3, #1
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1cc      	bne.n	800596e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	9300      	str	r3, [sp, #0]
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	2200      	movs	r2, #0
 80059dc:	2140      	movs	r1, #64	; 0x40
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f000 febc 	bl	800675c <UART_WaitOnFlagUntilTimeout>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e006      	b.n	80059fc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2220      	movs	r2, #32
 80059f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	e000      	b.n	80059fc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80059fa:	2302      	movs	r3, #2
  }
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3720      	adds	r7, #32
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a18:	2b20      	cmp	r3, #32
 8005a1a:	d168      	bne.n	8005aee <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d002      	beq.n	8005a28 <HAL_UART_Transmit_IT+0x24>
 8005a22:	88fb      	ldrh	r3, [r7, #6]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d101      	bne.n	8005a2c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e061      	b.n	8005af0 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d101      	bne.n	8005a3a <HAL_UART_Transmit_IT+0x36>
 8005a36:	2302      	movs	r3, #2
 8005a38:	e05a      	b.n	8005af0 <HAL_UART_Transmit_IT+0xec>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	88fa      	ldrh	r2, [r7, #6]
 8005a4c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	88fa      	ldrh	r2, [r7, #6]
 8005a54:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2221      	movs	r2, #33	; 0x21
 8005a6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if defined(USART_CR1_FIFOEN)
    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a76:	d11c      	bne.n	8005ab2 <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a80:	d107      	bne.n	8005a92 <HAL_UART_Transmit_IT+0x8e>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d103      	bne.n	8005a92 <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	4a1b      	ldr	r2, [pc, #108]	; (8005afc <HAL_UART_Transmit_IT+0xf8>)
 8005a8e:	671a      	str	r2, [r3, #112]	; 0x70
 8005a90:	e002      	b.n	8005a98 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	4a1a      	ldr	r2, [pc, #104]	; (8005b00 <HAL_UART_Transmit_IT+0xfc>)
 8005a96:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689a      	ldr	r2, [r3, #8]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005aae:	609a      	str	r2, [r3, #8]
 8005ab0:	e01b      	b.n	8005aea <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aba:	d107      	bne.n	8005acc <HAL_UART_Transmit_IT+0xc8>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d103      	bne.n	8005acc <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	4a0f      	ldr	r2, [pc, #60]	; (8005b04 <HAL_UART_Transmit_IT+0x100>)
 8005ac8:	671a      	str	r2, [r3, #112]	; 0x70
 8005aca:	e002      	b.n	8005ad2 <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	4a0e      	ldr	r2, [pc, #56]	; (8005b08 <HAL_UART_Transmit_IT+0x104>)
 8005ad0:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ae8:	601a      	str	r2, [r3, #0]

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005aea:	2300      	movs	r3, #0
 8005aec:	e000      	b.n	8005af0 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 8005aee:	2302      	movs	r3, #2
  }
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	08006a5b 	.word	0x08006a5b
 8005b00:	080069c1 	.word	0x080069c1
 8005b04:	08006943 	.word	0x08006943
 8005b08:	080068cf 	.word	0x080068cf

08005b0c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	4613      	mov	r3, r2
 8005b18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b20:	2b20      	cmp	r3, #32
 8005b22:	f040 80bc 	bne.w	8005c9e <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d002      	beq.n	8005b32 <HAL_UART_Receive_IT+0x26>
 8005b2c:	88fb      	ldrh	r3, [r7, #6]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e0b4      	b.n	8005ca0 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d101      	bne.n	8005b44 <HAL_UART_Receive_IT+0x38>
 8005b40:	2302      	movs	r3, #2
 8005b42:	e0ad      	b.n	8005ca0 <HAL_UART_Receive_IT+0x194>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	88fa      	ldrh	r2, [r7, #6]
 8005b56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	88fa      	ldrh	r2, [r7, #6]
 8005b5e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b70:	d10e      	bne.n	8005b90 <HAL_UART_Receive_IT+0x84>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d105      	bne.n	8005b86 <HAL_UART_Receive_IT+0x7a>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005b80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005b84:	e02d      	b.n	8005be2 <HAL_UART_Receive_IT+0xd6>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	22ff      	movs	r2, #255	; 0xff
 8005b8a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005b8e:	e028      	b.n	8005be2 <HAL_UART_Receive_IT+0xd6>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10d      	bne.n	8005bb4 <HAL_UART_Receive_IT+0xa8>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d104      	bne.n	8005baa <HAL_UART_Receive_IT+0x9e>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	22ff      	movs	r2, #255	; 0xff
 8005ba4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005ba8:	e01b      	b.n	8005be2 <HAL_UART_Receive_IT+0xd6>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	227f      	movs	r2, #127	; 0x7f
 8005bae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005bb2:	e016      	b.n	8005be2 <HAL_UART_Receive_IT+0xd6>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bbc:	d10d      	bne.n	8005bda <HAL_UART_Receive_IT+0xce>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d104      	bne.n	8005bd0 <HAL_UART_Receive_IT+0xc4>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	227f      	movs	r2, #127	; 0x7f
 8005bca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005bce:	e008      	b.n	8005be2 <HAL_UART_Receive_IT+0xd6>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	223f      	movs	r2, #63	; 0x3f
 8005bd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005bd8:	e003      	b.n	8005be2 <HAL_UART_Receive_IT+0xd6>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2222      	movs	r2, #34	; 0x22
 8005bee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689a      	ldr	r2, [r3, #8]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f042 0201 	orr.w	r2, r2, #1
 8005c00:	609a      	str	r2, [r3, #8]

#if defined(USART_CR1_FIFOEN)
    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c0a:	d12a      	bne.n	8005c62 <HAL_UART_Receive_IT+0x156>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005c12:	88fa      	ldrh	r2, [r7, #6]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d324      	bcc.n	8005c62 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c20:	d107      	bne.n	8005c32 <HAL_UART_Receive_IT+0x126>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d103      	bne.n	8005c32 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	4a1f      	ldr	r2, [pc, #124]	; (8005cac <HAL_UART_Receive_IT+0x1a0>)
 8005c2e:	66da      	str	r2, [r3, #108]	; 0x6c
 8005c30:	e002      	b.n	8005c38 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	4a1e      	ldr	r2, [pc, #120]	; (8005cb0 <HAL_UART_Receive_IT+0x1a4>)
 8005c36:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c4e:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689a      	ldr	r2, [r3, #8]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005c5e:	609a      	str	r2, [r3, #8]
 8005c60:	e01b      	b.n	8005c9a <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c6a:	d107      	bne.n	8005c7c <HAL_UART_Receive_IT+0x170>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d103      	bne.n	8005c7c <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	4a0f      	ldr	r2, [pc, #60]	; (8005cb4 <HAL_UART_Receive_IT+0x1a8>)
 8005c78:	66da      	str	r2, [r3, #108]	; 0x6c
 8005c7a:	e002      	b.n	8005c82 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	4a0e      	ldr	r2, [pc, #56]	; (8005cb8 <HAL_UART_Receive_IT+0x1ac>)
 8005c80:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005c98:	601a      	str	r2, [r3, #0]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	e000      	b.n	8005ca0 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8005c9e:	2302      	movs	r3, #2
  }
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3714      	adds	r7, #20
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr
 8005cac:	08006d91 	.word	0x08006d91
 8005cb0:	08006c89 	.word	0x08006c89
 8005cb4:	08006bdd 	.word	0x08006bdd
 8005cb8:	08006b33 	.word	0x08006b33

08005cbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b088      	sub	sp, #32
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005cdc:	69fa      	ldr	r2, [r7, #28]
 8005cde:	f640 030f 	movw	r3, #2063	; 0x80f
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d118      	bne.n	8005d1e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	f003 0320 	and.w	r3, r3, #32
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d013      	beq.n	8005d1e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	f003 0320 	and.w	r3, r3, #32
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d104      	bne.n	8005d0a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d009      	beq.n	8005d1e <HAL_UART_IRQHandler+0x62>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 8145 	beq.w	8005f9e <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	4798      	blx	r3
      }
      return;
 8005d1c:	e13f      	b.n	8005f9e <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 80e8 	beq.w	8005ef6 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	4ba1      	ldr	r3, [pc, #644]	; (8005fb0 <HAL_UART_IRQHandler+0x2f4>)
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d105      	bne.n	8005d3c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	4ba0      	ldr	r3, [pc, #640]	; (8005fb4 <HAL_UART_IRQHandler+0x2f8>)
 8005d34:	4013      	ands	r3, r2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 80dd 	beq.w	8005ef6 <HAL_UART_IRQHandler+0x23a>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d010      	beq.n	8005d68 <HAL_UART_IRQHandler+0xac>
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00b      	beq.n	8005d68 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2201      	movs	r2, #1
 8005d56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5e:	f043 0201 	orr.w	r2, r3, #1
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d010      	beq.n	8005d94 <HAL_UART_IRQHandler+0xd8>
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00b      	beq.n	8005d94 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2202      	movs	r2, #2
 8005d82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d8a:	f043 0204 	orr.w	r2, r3, #4
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	f003 0304 	and.w	r3, r3, #4
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d010      	beq.n	8005dc0 <HAL_UART_IRQHandler+0x104>
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00b      	beq.n	8005dc0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2204      	movs	r2, #4
 8005dae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db6:	f043 0202 	orr.w	r2, r3, #2
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	f003 0308 	and.w	r3, r3, #8
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d015      	beq.n	8005df6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	f003 0320 	and.w	r3, r3, #32
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d104      	bne.n	8005dde <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	4b76      	ldr	r3, [pc, #472]	; (8005fb0 <HAL_UART_IRQHandler+0x2f4>)
 8005dd8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00b      	beq.n	8005df6 <HAL_UART_IRQHandler+0x13a>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2208      	movs	r2, #8
 8005de4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dec:	f043 0208 	orr.w	r2, r3, #8
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d011      	beq.n	8005e24 <HAL_UART_IRQHandler+0x168>
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00c      	beq.n	8005e24 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e1a:	f043 0220 	orr.w	r2, r3, #32
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f000 80b9 	beq.w	8005fa2 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d011      	beq.n	8005e5e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	f003 0320 	and.w	r3, r3, #32
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d104      	bne.n	8005e4e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d007      	beq.n	8005e5e <HAL_UART_IRQHandler+0x1a2>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d003      	beq.n	8005e5e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e64:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e70:	2b40      	cmp	r3, #64	; 0x40
 8005e72:	d004      	beq.n	8005e7e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d031      	beq.n	8005ee2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fcec 	bl	800685c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e8e:	2b40      	cmp	r3, #64	; 0x40
 8005e90:	d123      	bne.n	8005eda <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ea0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d013      	beq.n	8005ed2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005eae:	4a42      	ldr	r2, [pc, #264]	; (8005fb8 <HAL_UART_IRQHandler+0x2fc>)
 8005eb0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fc ff78 	bl	8002dac <HAL_DMA_Abort_IT>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d017      	beq.n	8005ef2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8005ecc:	4610      	mov	r0, r2
 8005ece:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ed0:	e00f      	b.n	8005ef2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f87c 	bl	8005fd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ed8:	e00b      	b.n	8005ef2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f878 	bl	8005fd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ee0:	e007      	b.n	8005ef2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f874 	bl	8005fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8005ef0:	e057      	b.n	8005fa2 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ef2:	bf00      	nop
    return;
 8005ef4:	e055      	b.n	8005fa2 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00d      	beq.n	8005f1c <HAL_UART_IRQHandler+0x260>
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d008      	beq.n	8005f1c <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005f12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 ffbf 	bl	8006e98 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f1a:	e045      	b.n	8005fa8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d012      	beq.n	8005f4c <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d104      	bne.n	8005f3a <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d008      	beq.n	8005f4c <HAL_UART_IRQHandler+0x290>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d031      	beq.n	8005fa6 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	4798      	blx	r3
    }
    return;
 8005f4a:	e02c      	b.n	8005fa6 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d008      	beq.n	8005f68 <HAL_UART_IRQHandler+0x2ac>
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 fdcc 	bl	8006afe <UART_EndTransmit_IT>
    return;
 8005f66:	e01f      	b.n	8005fa8 <HAL_UART_IRQHandler+0x2ec>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d008      	beq.n	8005f84 <HAL_UART_IRQHandler+0x2c8>
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d003      	beq.n	8005f84 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 ff9f 	bl	8006ec0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f82:	e011      	b.n	8005fa8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00c      	beq.n	8005fa8 <HAL_UART_IRQHandler+0x2ec>
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	da09      	bge.n	8005fa8 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 ff89 	bl	8006eac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f9a:	bf00      	nop
 8005f9c:	e004      	b.n	8005fa8 <HAL_UART_IRQHandler+0x2ec>
      return;
 8005f9e:	bf00      	nop
 8005fa0:	e002      	b.n	8005fa8 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005fa2:	bf00      	nop
 8005fa4:	e000      	b.n	8005fa8 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005fa6:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8005fa8:	3720      	adds	r7, #32
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	10000001 	.word	0x10000001
 8005fb4:	04000120 	.word	0x04000120
 8005fb8:	080068a3 	.word	0x080068a3

08005fbc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fe4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005fe8:	b088      	sub	sp, #32
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689a      	ldr	r2, [r3, #8]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	431a      	orrs	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	69db      	ldr	r3, [r3, #28]
 8006006:	4313      	orrs	r3, r2
 8006008:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800600e:	69fa      	ldr	r2, [r7, #28]
 8006010:	4313      	orrs	r3, r2
 8006012:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	4bb1      	ldr	r3, [pc, #708]	; (80062e0 <UART_SetConfig+0x2fc>)
 800601c:	4013      	ands	r3, r2
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	6812      	ldr	r2, [r2, #0]
 8006022:	69f9      	ldr	r1, [r7, #28]
 8006024:	430b      	orrs	r3, r1
 8006026:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68da      	ldr	r2, [r3, #12]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	430a      	orrs	r2, r1
 800603c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4aa6      	ldr	r2, [pc, #664]	; (80062e4 <UART_SetConfig+0x300>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d004      	beq.n	8006058 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	69fa      	ldr	r2, [r7, #28]
 8006054:	4313      	orrs	r3, r2
 8006056:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006062:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	6812      	ldr	r2, [r2, #0]
 800606a:	69f9      	ldr	r1, [r7, #28]
 800606c:	430b      	orrs	r3, r1
 800606e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006076:	f023 010f 	bic.w	r1, r3, #15
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	430a      	orrs	r2, r1
 8006084:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a97      	ldr	r2, [pc, #604]	; (80062e8 <UART_SetConfig+0x304>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d121      	bne.n	80060d4 <UART_SetConfig+0xf0>
 8006090:	4b96      	ldr	r3, [pc, #600]	; (80062ec <UART_SetConfig+0x308>)
 8006092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006096:	f003 0303 	and.w	r3, r3, #3
 800609a:	2b03      	cmp	r3, #3
 800609c:	d816      	bhi.n	80060cc <UART_SetConfig+0xe8>
 800609e:	a201      	add	r2, pc, #4	; (adr r2, 80060a4 <UART_SetConfig+0xc0>)
 80060a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a4:	080060b5 	.word	0x080060b5
 80060a8:	080060c1 	.word	0x080060c1
 80060ac:	080060bb 	.word	0x080060bb
 80060b0:	080060c7 	.word	0x080060c7
 80060b4:	2301      	movs	r3, #1
 80060b6:	76fb      	strb	r3, [r7, #27]
 80060b8:	e0e8      	b.n	800628c <UART_SetConfig+0x2a8>
 80060ba:	2302      	movs	r3, #2
 80060bc:	76fb      	strb	r3, [r7, #27]
 80060be:	e0e5      	b.n	800628c <UART_SetConfig+0x2a8>
 80060c0:	2304      	movs	r3, #4
 80060c2:	76fb      	strb	r3, [r7, #27]
 80060c4:	e0e2      	b.n	800628c <UART_SetConfig+0x2a8>
 80060c6:	2308      	movs	r3, #8
 80060c8:	76fb      	strb	r3, [r7, #27]
 80060ca:	e0df      	b.n	800628c <UART_SetConfig+0x2a8>
 80060cc:	2310      	movs	r3, #16
 80060ce:	76fb      	strb	r3, [r7, #27]
 80060d0:	bf00      	nop
 80060d2:	e0db      	b.n	800628c <UART_SetConfig+0x2a8>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a85      	ldr	r2, [pc, #532]	; (80062f0 <UART_SetConfig+0x30c>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d134      	bne.n	8006148 <UART_SetConfig+0x164>
 80060de:	4b83      	ldr	r3, [pc, #524]	; (80062ec <UART_SetConfig+0x308>)
 80060e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e4:	f003 030c 	and.w	r3, r3, #12
 80060e8:	2b0c      	cmp	r3, #12
 80060ea:	d829      	bhi.n	8006140 <UART_SetConfig+0x15c>
 80060ec:	a201      	add	r2, pc, #4	; (adr r2, 80060f4 <UART_SetConfig+0x110>)
 80060ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f2:	bf00      	nop
 80060f4:	08006129 	.word	0x08006129
 80060f8:	08006141 	.word	0x08006141
 80060fc:	08006141 	.word	0x08006141
 8006100:	08006141 	.word	0x08006141
 8006104:	08006135 	.word	0x08006135
 8006108:	08006141 	.word	0x08006141
 800610c:	08006141 	.word	0x08006141
 8006110:	08006141 	.word	0x08006141
 8006114:	0800612f 	.word	0x0800612f
 8006118:	08006141 	.word	0x08006141
 800611c:	08006141 	.word	0x08006141
 8006120:	08006141 	.word	0x08006141
 8006124:	0800613b 	.word	0x0800613b
 8006128:	2300      	movs	r3, #0
 800612a:	76fb      	strb	r3, [r7, #27]
 800612c:	e0ae      	b.n	800628c <UART_SetConfig+0x2a8>
 800612e:	2302      	movs	r3, #2
 8006130:	76fb      	strb	r3, [r7, #27]
 8006132:	e0ab      	b.n	800628c <UART_SetConfig+0x2a8>
 8006134:	2304      	movs	r3, #4
 8006136:	76fb      	strb	r3, [r7, #27]
 8006138:	e0a8      	b.n	800628c <UART_SetConfig+0x2a8>
 800613a:	2308      	movs	r3, #8
 800613c:	76fb      	strb	r3, [r7, #27]
 800613e:	e0a5      	b.n	800628c <UART_SetConfig+0x2a8>
 8006140:	2310      	movs	r3, #16
 8006142:	76fb      	strb	r3, [r7, #27]
 8006144:	bf00      	nop
 8006146:	e0a1      	b.n	800628c <UART_SetConfig+0x2a8>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a69      	ldr	r2, [pc, #420]	; (80062f4 <UART_SetConfig+0x310>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d120      	bne.n	8006194 <UART_SetConfig+0x1b0>
 8006152:	4b66      	ldr	r3, [pc, #408]	; (80062ec <UART_SetConfig+0x308>)
 8006154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006158:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800615c:	2b10      	cmp	r3, #16
 800615e:	d00f      	beq.n	8006180 <UART_SetConfig+0x19c>
 8006160:	2b10      	cmp	r3, #16
 8006162:	d802      	bhi.n	800616a <UART_SetConfig+0x186>
 8006164:	2b00      	cmp	r3, #0
 8006166:	d005      	beq.n	8006174 <UART_SetConfig+0x190>
 8006168:	e010      	b.n	800618c <UART_SetConfig+0x1a8>
 800616a:	2b20      	cmp	r3, #32
 800616c:	d005      	beq.n	800617a <UART_SetConfig+0x196>
 800616e:	2b30      	cmp	r3, #48	; 0x30
 8006170:	d009      	beq.n	8006186 <UART_SetConfig+0x1a2>
 8006172:	e00b      	b.n	800618c <UART_SetConfig+0x1a8>
 8006174:	2300      	movs	r3, #0
 8006176:	76fb      	strb	r3, [r7, #27]
 8006178:	e088      	b.n	800628c <UART_SetConfig+0x2a8>
 800617a:	2302      	movs	r3, #2
 800617c:	76fb      	strb	r3, [r7, #27]
 800617e:	e085      	b.n	800628c <UART_SetConfig+0x2a8>
 8006180:	2304      	movs	r3, #4
 8006182:	76fb      	strb	r3, [r7, #27]
 8006184:	e082      	b.n	800628c <UART_SetConfig+0x2a8>
 8006186:	2308      	movs	r3, #8
 8006188:	76fb      	strb	r3, [r7, #27]
 800618a:	e07f      	b.n	800628c <UART_SetConfig+0x2a8>
 800618c:	2310      	movs	r3, #16
 800618e:	76fb      	strb	r3, [r7, #27]
 8006190:	bf00      	nop
 8006192:	e07b      	b.n	800628c <UART_SetConfig+0x2a8>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a57      	ldr	r2, [pc, #348]	; (80062f8 <UART_SetConfig+0x314>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d120      	bne.n	80061e0 <UART_SetConfig+0x1fc>
 800619e:	4b53      	ldr	r3, [pc, #332]	; (80062ec <UART_SetConfig+0x308>)
 80061a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80061a8:	2b40      	cmp	r3, #64	; 0x40
 80061aa:	d00f      	beq.n	80061cc <UART_SetConfig+0x1e8>
 80061ac:	2b40      	cmp	r3, #64	; 0x40
 80061ae:	d802      	bhi.n	80061b6 <UART_SetConfig+0x1d2>
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d005      	beq.n	80061c0 <UART_SetConfig+0x1dc>
 80061b4:	e010      	b.n	80061d8 <UART_SetConfig+0x1f4>
 80061b6:	2b80      	cmp	r3, #128	; 0x80
 80061b8:	d005      	beq.n	80061c6 <UART_SetConfig+0x1e2>
 80061ba:	2bc0      	cmp	r3, #192	; 0xc0
 80061bc:	d009      	beq.n	80061d2 <UART_SetConfig+0x1ee>
 80061be:	e00b      	b.n	80061d8 <UART_SetConfig+0x1f4>
 80061c0:	2300      	movs	r3, #0
 80061c2:	76fb      	strb	r3, [r7, #27]
 80061c4:	e062      	b.n	800628c <UART_SetConfig+0x2a8>
 80061c6:	2302      	movs	r3, #2
 80061c8:	76fb      	strb	r3, [r7, #27]
 80061ca:	e05f      	b.n	800628c <UART_SetConfig+0x2a8>
 80061cc:	2304      	movs	r3, #4
 80061ce:	76fb      	strb	r3, [r7, #27]
 80061d0:	e05c      	b.n	800628c <UART_SetConfig+0x2a8>
 80061d2:	2308      	movs	r3, #8
 80061d4:	76fb      	strb	r3, [r7, #27]
 80061d6:	e059      	b.n	800628c <UART_SetConfig+0x2a8>
 80061d8:	2310      	movs	r3, #16
 80061da:	76fb      	strb	r3, [r7, #27]
 80061dc:	bf00      	nop
 80061de:	e055      	b.n	800628c <UART_SetConfig+0x2a8>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a45      	ldr	r2, [pc, #276]	; (80062fc <UART_SetConfig+0x318>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d124      	bne.n	8006234 <UART_SetConfig+0x250>
 80061ea:	4b40      	ldr	r3, [pc, #256]	; (80062ec <UART_SetConfig+0x308>)
 80061ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061f8:	d012      	beq.n	8006220 <UART_SetConfig+0x23c>
 80061fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061fe:	d802      	bhi.n	8006206 <UART_SetConfig+0x222>
 8006200:	2b00      	cmp	r3, #0
 8006202:	d007      	beq.n	8006214 <UART_SetConfig+0x230>
 8006204:	e012      	b.n	800622c <UART_SetConfig+0x248>
 8006206:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800620a:	d006      	beq.n	800621a <UART_SetConfig+0x236>
 800620c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006210:	d009      	beq.n	8006226 <UART_SetConfig+0x242>
 8006212:	e00b      	b.n	800622c <UART_SetConfig+0x248>
 8006214:	2300      	movs	r3, #0
 8006216:	76fb      	strb	r3, [r7, #27]
 8006218:	e038      	b.n	800628c <UART_SetConfig+0x2a8>
 800621a:	2302      	movs	r3, #2
 800621c:	76fb      	strb	r3, [r7, #27]
 800621e:	e035      	b.n	800628c <UART_SetConfig+0x2a8>
 8006220:	2304      	movs	r3, #4
 8006222:	76fb      	strb	r3, [r7, #27]
 8006224:	e032      	b.n	800628c <UART_SetConfig+0x2a8>
 8006226:	2308      	movs	r3, #8
 8006228:	76fb      	strb	r3, [r7, #27]
 800622a:	e02f      	b.n	800628c <UART_SetConfig+0x2a8>
 800622c:	2310      	movs	r3, #16
 800622e:	76fb      	strb	r3, [r7, #27]
 8006230:	bf00      	nop
 8006232:	e02b      	b.n	800628c <UART_SetConfig+0x2a8>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a2a      	ldr	r2, [pc, #168]	; (80062e4 <UART_SetConfig+0x300>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d124      	bne.n	8006288 <UART_SetConfig+0x2a4>
 800623e:	4b2b      	ldr	r3, [pc, #172]	; (80062ec <UART_SetConfig+0x308>)
 8006240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006244:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800624c:	d012      	beq.n	8006274 <UART_SetConfig+0x290>
 800624e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006252:	d802      	bhi.n	800625a <UART_SetConfig+0x276>
 8006254:	2b00      	cmp	r3, #0
 8006256:	d007      	beq.n	8006268 <UART_SetConfig+0x284>
 8006258:	e012      	b.n	8006280 <UART_SetConfig+0x29c>
 800625a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800625e:	d006      	beq.n	800626e <UART_SetConfig+0x28a>
 8006260:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006264:	d009      	beq.n	800627a <UART_SetConfig+0x296>
 8006266:	e00b      	b.n	8006280 <UART_SetConfig+0x29c>
 8006268:	2300      	movs	r3, #0
 800626a:	76fb      	strb	r3, [r7, #27]
 800626c:	e00e      	b.n	800628c <UART_SetConfig+0x2a8>
 800626e:	2302      	movs	r3, #2
 8006270:	76fb      	strb	r3, [r7, #27]
 8006272:	e00b      	b.n	800628c <UART_SetConfig+0x2a8>
 8006274:	2304      	movs	r3, #4
 8006276:	76fb      	strb	r3, [r7, #27]
 8006278:	e008      	b.n	800628c <UART_SetConfig+0x2a8>
 800627a:	2308      	movs	r3, #8
 800627c:	76fb      	strb	r3, [r7, #27]
 800627e:	e005      	b.n	800628c <UART_SetConfig+0x2a8>
 8006280:	2310      	movs	r3, #16
 8006282:	76fb      	strb	r3, [r7, #27]
 8006284:	bf00      	nop
 8006286:	e001      	b.n	800628c <UART_SetConfig+0x2a8>
 8006288:	2310      	movs	r3, #16
 800628a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a14      	ldr	r2, [pc, #80]	; (80062e4 <UART_SetConfig+0x300>)
 8006292:	4293      	cmp	r3, r2
 8006294:	f040 80a1 	bne.w	80063da <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006298:	7efb      	ldrb	r3, [r7, #27]
 800629a:	2b08      	cmp	r3, #8
 800629c:	d836      	bhi.n	800630c <UART_SetConfig+0x328>
 800629e:	a201      	add	r2, pc, #4	; (adr r2, 80062a4 <UART_SetConfig+0x2c0>)
 80062a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a4:	080062c9 	.word	0x080062c9
 80062a8:	0800630d 	.word	0x0800630d
 80062ac:	080062d1 	.word	0x080062d1
 80062b0:	0800630d 	.word	0x0800630d
 80062b4:	080062d7 	.word	0x080062d7
 80062b8:	0800630d 	.word	0x0800630d
 80062bc:	0800630d 	.word	0x0800630d
 80062c0:	0800630d 	.word	0x0800630d
 80062c4:	08006305 	.word	0x08006305
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062c8:	f7fe f970 	bl	80045ac <HAL_RCC_GetPCLK1Freq>
 80062cc:	6178      	str	r0, [r7, #20]
        break;
 80062ce:	e022      	b.n	8006316 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062d0:	4b0b      	ldr	r3, [pc, #44]	; (8006300 <UART_SetConfig+0x31c>)
 80062d2:	617b      	str	r3, [r7, #20]
        break;
 80062d4:	e01f      	b.n	8006316 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062d6:	f7fe f8d3 	bl	8004480 <HAL_RCC_GetSysClockFreq>
 80062da:	6178      	str	r0, [r7, #20]
        break;
 80062dc:	e01b      	b.n	8006316 <UART_SetConfig+0x332>
 80062de:	bf00      	nop
 80062e0:	cfff69f3 	.word	0xcfff69f3
 80062e4:	40008000 	.word	0x40008000
 80062e8:	40013800 	.word	0x40013800
 80062ec:	40021000 	.word	0x40021000
 80062f0:	40004400 	.word	0x40004400
 80062f4:	40004800 	.word	0x40004800
 80062f8:	40004c00 	.word	0x40004c00
 80062fc:	40005000 	.word	0x40005000
 8006300:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006304:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006308:	617b      	str	r3, [r7, #20]
        break;
 800630a:	e004      	b.n	8006316 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 800630c:	2300      	movs	r3, #0
 800630e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	76bb      	strb	r3, [r7, #26]
        break;
 8006314:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 811d 	beq.w	8006558 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006322:	4a97      	ldr	r2, [pc, #604]	; (8006580 <UART_SetConfig+0x59c>)
 8006324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006328:	461a      	mov	r2, r3
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006330:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	4613      	mov	r3, r2
 8006338:	005b      	lsls	r3, r3, #1
 800633a:	4413      	add	r3, r2
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	429a      	cmp	r2, r3
 8006340:	d305      	bcc.n	800634e <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	429a      	cmp	r2, r3
 800634c:	d902      	bls.n	8006354 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	76bb      	strb	r3, [r7, #26]
 8006352:	e101      	b.n	8006558 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	4618      	mov	r0, r3
 8006358:	f04f 0100 	mov.w	r1, #0
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	4a87      	ldr	r2, [pc, #540]	; (8006580 <UART_SetConfig+0x59c>)
 8006362:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006366:	b29b      	uxth	r3, r3
 8006368:	f04f 0400 	mov.w	r4, #0
 800636c:	461a      	mov	r2, r3
 800636e:	4623      	mov	r3, r4
 8006370:	f7f9 ff46 	bl	8000200 <__aeabi_uldivmod>
 8006374:	4603      	mov	r3, r0
 8006376:	460c      	mov	r4, r1
 8006378:	4619      	mov	r1, r3
 800637a:	4622      	mov	r2, r4
 800637c:	f04f 0300 	mov.w	r3, #0
 8006380:	f04f 0400 	mov.w	r4, #0
 8006384:	0214      	lsls	r4, r2, #8
 8006386:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800638a:	020b      	lsls	r3, r1, #8
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	6852      	ldr	r2, [r2, #4]
 8006390:	0852      	lsrs	r2, r2, #1
 8006392:	4611      	mov	r1, r2
 8006394:	f04f 0200 	mov.w	r2, #0
 8006398:	eb13 0b01 	adds.w	fp, r3, r1
 800639c:	eb44 0c02 	adc.w	ip, r4, r2
 80063a0:	4658      	mov	r0, fp
 80063a2:	4661      	mov	r1, ip
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f04f 0400 	mov.w	r4, #0
 80063ac:	461a      	mov	r2, r3
 80063ae:	4623      	mov	r3, r4
 80063b0:	f7f9 ff26 	bl	8000200 <__aeabi_uldivmod>
 80063b4:	4603      	mov	r3, r0
 80063b6:	460c      	mov	r4, r1
 80063b8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063c0:	d308      	bcc.n	80063d4 <UART_SetConfig+0x3f0>
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063c8:	d204      	bcs.n	80063d4 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	60da      	str	r2, [r3, #12]
 80063d2:	e0c1      	b.n	8006558 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	76bb      	strb	r3, [r7, #26]
 80063d8:	e0be      	b.n	8006558 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	69db      	ldr	r3, [r3, #28]
 80063de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063e2:	d164      	bne.n	80064ae <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 80063e4:	7efb      	ldrb	r3, [r7, #27]
 80063e6:	2b08      	cmp	r3, #8
 80063e8:	d827      	bhi.n	800643a <UART_SetConfig+0x456>
 80063ea:	a201      	add	r2, pc, #4	; (adr r2, 80063f0 <UART_SetConfig+0x40c>)
 80063ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f0:	08006415 	.word	0x08006415
 80063f4:	0800641d 	.word	0x0800641d
 80063f8:	08006425 	.word	0x08006425
 80063fc:	0800643b 	.word	0x0800643b
 8006400:	0800642b 	.word	0x0800642b
 8006404:	0800643b 	.word	0x0800643b
 8006408:	0800643b 	.word	0x0800643b
 800640c:	0800643b 	.word	0x0800643b
 8006410:	08006433 	.word	0x08006433
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006414:	f7fe f8ca 	bl	80045ac <HAL_RCC_GetPCLK1Freq>
 8006418:	6178      	str	r0, [r7, #20]
        break;
 800641a:	e013      	b.n	8006444 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800641c:	f7fe f8dc 	bl	80045d8 <HAL_RCC_GetPCLK2Freq>
 8006420:	6178      	str	r0, [r7, #20]
        break;
 8006422:	e00f      	b.n	8006444 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006424:	4b57      	ldr	r3, [pc, #348]	; (8006584 <UART_SetConfig+0x5a0>)
 8006426:	617b      	str	r3, [r7, #20]
        break;
 8006428:	e00c      	b.n	8006444 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800642a:	f7fe f829 	bl	8004480 <HAL_RCC_GetSysClockFreq>
 800642e:	6178      	str	r0, [r7, #20]
        break;
 8006430:	e008      	b.n	8006444 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006436:	617b      	str	r3, [r7, #20]
        break;
 8006438:	e004      	b.n	8006444 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 800643a:	2300      	movs	r3, #0
 800643c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	76bb      	strb	r3, [r7, #26]
        break;
 8006442:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	2b00      	cmp	r3, #0
 8006448:	f000 8086 	beq.w	8006558 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	4a4b      	ldr	r2, [pc, #300]	; (8006580 <UART_SetConfig+0x59c>)
 8006452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006456:	461a      	mov	r2, r3
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	fbb3 f3f2 	udiv	r3, r3, r2
 800645e:	005a      	lsls	r2, r3, #1
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	085b      	lsrs	r3, r3, #1
 8006466:	441a      	add	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006470:	b29b      	uxth	r3, r3
 8006472:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	2b0f      	cmp	r3, #15
 8006478:	d916      	bls.n	80064a8 <UART_SetConfig+0x4c4>
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006480:	d212      	bcs.n	80064a8 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	b29b      	uxth	r3, r3
 8006486:	f023 030f 	bic.w	r3, r3, #15
 800648a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	085b      	lsrs	r3, r3, #1
 8006490:	b29b      	uxth	r3, r3
 8006492:	f003 0307 	and.w	r3, r3, #7
 8006496:	b29a      	uxth	r2, r3
 8006498:	89fb      	ldrh	r3, [r7, #14]
 800649a:	4313      	orrs	r3, r2
 800649c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	89fa      	ldrh	r2, [r7, #14]
 80064a4:	60da      	str	r2, [r3, #12]
 80064a6:	e057      	b.n	8006558 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	76bb      	strb	r3, [r7, #26]
 80064ac:	e054      	b.n	8006558 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064ae:	7efb      	ldrb	r3, [r7, #27]
 80064b0:	2b08      	cmp	r3, #8
 80064b2:	d828      	bhi.n	8006506 <UART_SetConfig+0x522>
 80064b4:	a201      	add	r2, pc, #4	; (adr r2, 80064bc <UART_SetConfig+0x4d8>)
 80064b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ba:	bf00      	nop
 80064bc:	080064e1 	.word	0x080064e1
 80064c0:	080064e9 	.word	0x080064e9
 80064c4:	080064f1 	.word	0x080064f1
 80064c8:	08006507 	.word	0x08006507
 80064cc:	080064f7 	.word	0x080064f7
 80064d0:	08006507 	.word	0x08006507
 80064d4:	08006507 	.word	0x08006507
 80064d8:	08006507 	.word	0x08006507
 80064dc:	080064ff 	.word	0x080064ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064e0:	f7fe f864 	bl	80045ac <HAL_RCC_GetPCLK1Freq>
 80064e4:	6178      	str	r0, [r7, #20]
        break;
 80064e6:	e013      	b.n	8006510 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064e8:	f7fe f876 	bl	80045d8 <HAL_RCC_GetPCLK2Freq>
 80064ec:	6178      	str	r0, [r7, #20]
        break;
 80064ee:	e00f      	b.n	8006510 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064f0:	4b24      	ldr	r3, [pc, #144]	; (8006584 <UART_SetConfig+0x5a0>)
 80064f2:	617b      	str	r3, [r7, #20]
        break;
 80064f4:	e00c      	b.n	8006510 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064f6:	f7fd ffc3 	bl	8004480 <HAL_RCC_GetSysClockFreq>
 80064fa:	6178      	str	r0, [r7, #20]
        break;
 80064fc:	e008      	b.n	8006510 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006502:	617b      	str	r3, [r7, #20]
        break;
 8006504:	e004      	b.n	8006510 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8006506:	2300      	movs	r3, #0
 8006508:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	76bb      	strb	r3, [r7, #26]
        break;
 800650e:	bf00      	nop
    }

    if (pclk != 0U)
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d020      	beq.n	8006558 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651a:	4a19      	ldr	r2, [pc, #100]	; (8006580 <UART_SetConfig+0x59c>)
 800651c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006520:	461a      	mov	r2, r3
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	fbb3 f2f2 	udiv	r2, r3, r2
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	085b      	lsrs	r3, r3, #1
 800652e:	441a      	add	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	fbb2 f3f3 	udiv	r3, r2, r3
 8006538:	b29b      	uxth	r3, r3
 800653a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	2b0f      	cmp	r3, #15
 8006540:	d908      	bls.n	8006554 <UART_SetConfig+0x570>
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006548:	d204      	bcs.n	8006554 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	60da      	str	r2, [r3, #12]
 8006552:	e001      	b.n	8006558 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006574:	7ebb      	ldrb	r3, [r7, #26]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3720      	adds	r7, #32
 800657a:	46bd      	mov	sp, r7
 800657c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006580:	0800a218 	.word	0x0800a218
 8006584:	00f42400 	.word	0x00f42400

08006588 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006594:	f003 0301 	and.w	r3, r3, #1
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00a      	beq.n	80065b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00a      	beq.n	80065d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d8:	f003 0304 	and.w	r3, r3, #4
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00a      	beq.n	80065f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	430a      	orrs	r2, r1
 80065f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fa:	f003 0308 	and.w	r3, r3, #8
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00a      	beq.n	8006618 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	430a      	orrs	r2, r1
 8006616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661c:	f003 0310 	and.w	r3, r3, #16
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00a      	beq.n	800663a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663e:	f003 0320 	and.w	r3, r3, #32
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00a      	beq.n	800665c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	430a      	orrs	r2, r1
 800665a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006664:	2b00      	cmp	r3, #0
 8006666:	d01a      	beq.n	800669e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	430a      	orrs	r2, r1
 800667c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006686:	d10a      	bne.n	800669e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00a      	beq.n	80066c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	430a      	orrs	r2, r1
 80066be:	605a      	str	r2, [r3, #4]
  }
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b086      	sub	sp, #24
 80066d0:	af02      	add	r7, sp, #8
 80066d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80066dc:	f7fb f85e 	bl	800179c <HAL_GetTick>
 80066e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0308 	and.w	r3, r3, #8
 80066ec:	2b08      	cmp	r3, #8
 80066ee:	d10e      	bne.n	800670e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f82c 	bl	800675c <UART_WaitOnFlagUntilTimeout>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d001      	beq.n	800670e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e022      	b.n	8006754 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0304 	and.w	r3, r3, #4
 8006718:	2b04      	cmp	r3, #4
 800671a:	d10e      	bne.n	800673a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800671c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f816 	bl	800675c <UART_WaitOnFlagUntilTimeout>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d001      	beq.n	800673a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e00c      	b.n	8006754 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2220      	movs	r2, #32
 800673e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2220      	movs	r2, #32
 8006746:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	603b      	str	r3, [r7, #0]
 8006768:	4613      	mov	r3, r2
 800676a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800676c:	e062      	b.n	8006834 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006774:	d05e      	beq.n	8006834 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006776:	f7fb f811 	bl	800179c <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	69ba      	ldr	r2, [r7, #24]
 8006782:	429a      	cmp	r2, r3
 8006784:	d302      	bcc.n	800678c <UART_WaitOnFlagUntilTimeout+0x30>
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d11d      	bne.n	80067c8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800679a:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	689a      	ldr	r2, [r3, #8]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f022 0201 	bic.w	r2, r2, #1
 80067aa:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2220      	movs	r2, #32
 80067b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2220      	movs	r2, #32
 80067b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e045      	b.n	8006854 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0304 	and.w	r3, r3, #4
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d02e      	beq.n	8006834 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067e4:	d126      	bne.n	8006834 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067ee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80067fe:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689a      	ldr	r2, [r3, #8]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 0201 	bic.w	r2, r2, #1
 800680e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2220      	movs	r2, #32
 8006814:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2220      	movs	r2, #32
 800681c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2220      	movs	r2, #32
 8006824:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e00f      	b.n	8006854 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	69da      	ldr	r2, [r3, #28]
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	4013      	ands	r3, r2
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	429a      	cmp	r2, r3
 8006842:	bf0c      	ite	eq
 8006844:	2301      	moveq	r3, #1
 8006846:	2300      	movne	r3, #0
 8006848:	b2db      	uxtb	r3, r3
 800684a:	461a      	mov	r2, r3
 800684c:	79fb      	ldrb	r3, [r7, #7]
 800684e:	429a      	cmp	r2, r3
 8006850:	d08d      	beq.n	800676e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006872:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	6812      	ldr	r2, [r2, #0]
 800687e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006882:	f023 0301 	bic.w	r3, r3, #1
 8006886:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2220      	movs	r2, #32
 800688c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8006896:	bf00      	nop
 8006898:	370c      	adds	r7, #12
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b084      	sub	sp, #16
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f7ff fb85 	bl	8005fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068c6:	bf00      	nop
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b083      	sub	sp, #12
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068dc:	2b21      	cmp	r3, #33	; 0x21
 80068de:	d12a      	bne.n	8006936 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d110      	bne.n	800690e <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068fa:	601a      	str	r2, [r3, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800690a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800690c:	e013      	b.n	8006936 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006912:	781a      	ldrb	r2, [r3, #0]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800691e:	1c5a      	adds	r2, r3, #1
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800692a:	b29b      	uxth	r3, r3
 800692c:	3b01      	subs	r3, #1
 800692e:	b29a      	uxth	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8006936:	bf00      	nop
 8006938:	370c      	adds	r7, #12
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr

08006942 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006942:	b480      	push	{r7}
 8006944:	b085      	sub	sp, #20
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006950:	2b21      	cmp	r3, #33	; 0x21
 8006952:	d12f      	bne.n	80069b4 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800695a:	b29b      	uxth	r3, r3
 800695c:	2b00      	cmp	r3, #0
 800695e:	d110      	bne.n	8006982 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800696e:	601a      	str	r2, [r3, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800697e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006980:	e018      	b.n	80069b4 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006986:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	461a      	mov	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006996:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800699c:	1c9a      	adds	r2, r3, #2
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	3b01      	subs	r3, #1
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80069b4:	bf00      	nop
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069ce:	2b21      	cmp	r3, #33	; 0x21
 80069d0:	d13d      	bne.n	8006a4e <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80069d8:	81fb      	strh	r3, [r7, #14]
 80069da:	e035      	b.n	8006a48 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d111      	bne.n	8006a0c <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689a      	ldr	r2, [r3, #8]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80069f6:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a06:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8006a08:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8006a0a:	e020      	b.n	8006a4e <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	69db      	ldr	r3, [r3, #28]
 8006a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d013      	beq.n	8006a42 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a1e:	781a      	ldrb	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a2a:	1c5a      	adds	r2, r3, #1
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006a42:	89fb      	ldrh	r3, [r7, #14]
 8006a44:	3b01      	subs	r3, #1
 8006a46:	81fb      	strh	r3, [r7, #14]
 8006a48:	89fb      	ldrh	r3, [r7, #14]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1c6      	bne.n	80069dc <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 8006a4e:	bf00      	nop
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b085      	sub	sp, #20
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a68:	2b21      	cmp	r3, #33	; 0x21
 8006a6a:	d142      	bne.n	8006af2 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006a72:	81fb      	strh	r3, [r7, #14]
 8006a74:	e03a      	b.n	8006aec <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d111      	bne.n	8006aa6 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	689a      	ldr	r2, [r3, #8]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006a90:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006aa0:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8006aa2:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8006aa4:	e025      	b.n	8006af2 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	69db      	ldr	r3, [r3, #28]
 8006aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d018      	beq.n	8006ae6 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ab8:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	881b      	ldrh	r3, [r3, #0]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ac8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ace:	1c9a      	adds	r2, r3, #2
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	3b01      	subs	r3, #1
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006ae6:	89fb      	ldrh	r3, [r7, #14]
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	81fb      	strh	r3, [r7, #14]
 8006aec:	89fb      	ldrh	r3, [r7, #14]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1c1      	bne.n	8006a76 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 8006af2:	bf00      	nop
 8006af4:	3714      	adds	r7, #20
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr

08006afe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b082      	sub	sp, #8
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b14:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2220      	movs	r2, #32
 8006b1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f7ff fa49 	bl	8005fbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b2a:	bf00      	nop
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b084      	sub	sp, #16
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006b40:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b48:	2b22      	cmp	r3, #34	; 0x22
 8006b4a:	d13b      	bne.n	8006bc4 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b52:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006b54:	89bb      	ldrh	r3, [r7, #12]
 8006b56:	b2d9      	uxtb	r1, r3
 8006b58:	89fb      	ldrh	r3, [r7, #14]
 8006b5a:	b2da      	uxtb	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b60:	400a      	ands	r2, r1
 8006b62:	b2d2      	uxtb	r2, r2
 8006b64:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b6a:	1c5a      	adds	r2, r3, #1
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d122      	bne.n	8006bd4 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b9c:	601a      	str	r2, [r3, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	689a      	ldr	r2, [r3, #8]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f022 0201 	bic.w	r2, r2, #1
 8006bac:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f7fa f901 	bl	8000dc4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006bc2:	e007      	b.n	8006bd4 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	699a      	ldr	r2, [r3, #24]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f042 0208 	orr.w	r2, r2, #8
 8006bd2:	619a      	str	r2, [r3, #24]
}
 8006bd4:	bf00      	nop
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006bea:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bf2:	2b22      	cmp	r3, #34	; 0x22
 8006bf4:	d13b      	bne.n	8006c6e <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfc:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c02:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006c04:	89ba      	ldrh	r2, [r7, #12]
 8006c06:	89fb      	ldrh	r3, [r7, #14]
 8006c08:	4013      	ands	r3, r2
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c14:	1c9a      	adds	r2, r3, #2
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	3b01      	subs	r3, #1
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d122      	bne.n	8006c7e <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006c46:	601a      	str	r2, [r3, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	689a      	ldr	r2, [r3, #8]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 0201 	bic.w	r2, r2, #1
 8006c56:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2220      	movs	r2, #32
 8006c5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f7fa f8ac 	bl	8000dc4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c6c:	e007      	b.n	8006c7e <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	699a      	ldr	r2, [r3, #24]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f042 0208 	orr.w	r2, r2, #8
 8006c7c:	619a      	str	r2, [r3, #24]
}
 8006c7e:	bf00      	nop
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
	...

08006c88 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006c96:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c9e:	2b22      	cmp	r3, #34	; 0x22
 8006ca0:	d168      	bne.n	8006d74 <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006ca8:	81fb      	strh	r3, [r7, #14]
 8006caa:	e03f      	b.n	8006d2c <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb2:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006cb4:	893b      	ldrh	r3, [r7, #8]
 8006cb6:	b2d9      	uxtb	r1, r3
 8006cb8:	89bb      	ldrh	r3, [r7, #12]
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc0:	400a      	ands	r2, r1
 8006cc2:	b2d2      	uxtb	r2, r2
 8006cc4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cca:	1c5a      	adds	r2, r3, #1
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d11b      	bne.n	8006d26 <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cfc:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	6812      	ldr	r2, [r2, #0]
 8006d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d0c:	f023 0301 	bic.w	r3, r3, #1
 8006d10:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2220      	movs	r2, #32
 8006d16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f7fa f84f 	bl	8000dc4 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006d26:	89fb      	ldrh	r3, [r7, #14]
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	81fb      	strh	r3, [r7, #14]
 8006d2c:	89fb      	ldrh	r3, [r7, #14]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1bc      	bne.n	8006cac <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d38:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006d3a:	897b      	ldrh	r3, [r7, #10]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d021      	beq.n	8006d84 <UART_RxISR_8BIT_FIFOEN+0xfc>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006d46:	897a      	ldrh	r2, [r7, #10]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d21b      	bcs.n	8006d84 <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	689a      	ldr	r2, [r3, #8]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006d5a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a0b      	ldr	r2, [pc, #44]	; (8006d8c <UART_RxISR_8BIT_FIFOEN+0x104>)
 8006d60:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f042 0220 	orr.w	r2, r2, #32
 8006d70:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d72:	e007      	b.n	8006d84 <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	699a      	ldr	r2, [r3, #24]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f042 0208 	orr.w	r2, r2, #8
 8006d82:	619a      	str	r2, [r3, #24]
}
 8006d84:	bf00      	nop
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	08006b33 	.word	0x08006b33

08006d90 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006d9e:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006da6:	2b22      	cmp	r3, #34	; 0x22
 8006da8:	d168      	bne.n	8006e7c <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006db0:	82fb      	strh	r3, [r7, #22]
 8006db2:	e03f      	b.n	8006e34 <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dba:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dc0:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8006dc2:	8a3a      	ldrh	r2, [r7, #16]
 8006dc4:	8abb      	ldrh	r3, [r7, #20]
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dd2:	1c9a      	adds	r2, r3, #2
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	3b01      	subs	r3, #1
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d11b      	bne.n	8006e2e <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e04:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	6812      	ldr	r2, [r2, #0]
 8006e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e14:	f023 0301 	bic.w	r3, r3, #1
 8006e18:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f7f9 ffcb 	bl	8000dc4 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006e2e:	8afb      	ldrh	r3, [r7, #22]
 8006e30:	3b01      	subs	r3, #1
 8006e32:	82fb      	strh	r3, [r7, #22]
 8006e34:	8afb      	ldrh	r3, [r7, #22]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1bc      	bne.n	8006db4 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e40:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006e42:	8a7b      	ldrh	r3, [r7, #18]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d021      	beq.n	8006e8c <UART_RxISR_16BIT_FIFOEN+0xfc>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006e4e:	8a7a      	ldrh	r2, [r7, #18]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d21b      	bcs.n	8006e8c <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	689a      	ldr	r2, [r3, #8]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006e62:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a0b      	ldr	r2, [pc, #44]	; (8006e94 <UART_RxISR_16BIT_FIFOEN+0x104>)
 8006e68:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f042 0220 	orr.w	r2, r2, #32
 8006e78:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e7a:	e007      	b.n	8006e8c <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	699a      	ldr	r2, [r3, #24]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f042 0208 	orr.w	r2, r2, #8
 8006e8a:	619a      	str	r2, [r3, #24]
}
 8006e8c:	bf00      	nop
 8006e8e:	3718      	adds	r7, #24
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	08006bdd 	.word	0x08006bdd

08006e98 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d101      	bne.n	8006eea <HAL_UARTEx_DisableFifoMode+0x16>
 8006ee6:	2302      	movs	r3, #2
 8006ee8:	e027      	b.n	8006f3a <HAL_UARTEx_DisableFifoMode+0x66>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2224      	movs	r2, #36	; 0x24
 8006ef6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f022 0201 	bic.w	r2, r2, #1
 8006f10:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3714      	adds	r7, #20
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b084      	sub	sp, #16
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
 8006f4e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d101      	bne.n	8006f5e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	e02d      	b.n	8006fba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2224      	movs	r2, #36	; 0x24
 8006f6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f022 0201 	bic.w	r2, r2, #1
 8006f84:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	683a      	ldr	r2, [r7, #0]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f850 	bl	8007040 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2220      	movs	r2, #32
 8006fac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b084      	sub	sp, #16
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
 8006fca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d101      	bne.n	8006fda <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006fd6:	2302      	movs	r3, #2
 8006fd8:	e02d      	b.n	8007036 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2224      	movs	r2, #36	; 0x24
 8006fe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f022 0201 	bic.w	r2, r2, #1
 8007000:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	683a      	ldr	r2, [r7, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 f812 	bl	8007040 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2220      	movs	r2, #32
 8007028:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
	...

08007040 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007040:	b480      	push	{r7}
 8007042:	b089      	sub	sp, #36	; 0x24
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007048:	4a2f      	ldr	r2, [pc, #188]	; (8007108 <UARTEx_SetNbDataToProcess+0xc8>)
 800704a:	f107 0314 	add.w	r3, r7, #20
 800704e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007052:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007056:	4a2d      	ldr	r2, [pc, #180]	; (800710c <UARTEx_SetNbDataToProcess+0xcc>)
 8007058:	f107 030c 	add.w	r3, r7, #12
 800705c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007060:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007068:	2b00      	cmp	r3, #0
 800706a:	d108      	bne.n	800707e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800707c:	e03d      	b.n	80070fa <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800707e:	2308      	movs	r3, #8
 8007080:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007082:	2308      	movs	r3, #8
 8007084:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	0e5b      	lsrs	r3, r3, #25
 800708e:	b2db      	uxtb	r3, r3
 8007090:	f003 0307 	and.w	r3, r3, #7
 8007094:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	0f5b      	lsrs	r3, r3, #29
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	f003 0307 	and.w	r3, r3, #7
 80070a4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80070a6:	7fbb      	ldrb	r3, [r7, #30]
 80070a8:	7f3a      	ldrb	r2, [r7, #28]
 80070aa:	f107 0120 	add.w	r1, r7, #32
 80070ae:	440a      	add	r2, r1
 80070b0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80070b4:	fb02 f303 	mul.w	r3, r2, r3
 80070b8:	7f3a      	ldrb	r2, [r7, #28]
 80070ba:	f107 0120 	add.w	r1, r7, #32
 80070be:	440a      	add	r2, r1
 80070c0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80070c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80070d0:	7ffb      	ldrb	r3, [r7, #31]
 80070d2:	7f7a      	ldrb	r2, [r7, #29]
 80070d4:	f107 0120 	add.w	r1, r7, #32
 80070d8:	440a      	add	r2, r1
 80070da:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80070de:	fb02 f303 	mul.w	r3, r2, r3
 80070e2:	7f7a      	ldrb	r2, [r7, #29]
 80070e4:	f107 0120 	add.w	r1, r7, #32
 80070e8:	440a      	add	r2, r1
 80070ea:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80070ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80070fa:	bf00      	nop
 80070fc:	3724      	adds	r7, #36	; 0x24
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	0800a160 	.word	0x0800a160
 800710c:	0800a168 	.word	0x0800a168

08007110 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007110:	b084      	sub	sp, #16
 8007112:	b580      	push	{r7, lr}
 8007114:	b084      	sub	sp, #16
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
 800711a:	f107 001c 	add.w	r0, r7, #28
 800711e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007124:	2b01      	cmp	r3, #1
 8007126:	d122      	bne.n	800716e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800713c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007152:	2b01      	cmp	r3, #1
 8007154:	d105      	bne.n	8007162 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fa30 	bl	80075c8 <USB_CoreReset>
 8007168:	4603      	mov	r3, r0
 800716a:	73fb      	strb	r3, [r7, #15]
 800716c:	e01a      	b.n	80071a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fa24 	bl	80075c8 <USB_CoreReset>
 8007180:	4603      	mov	r3, r0
 8007182:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007186:	2b00      	cmp	r3, #0
 8007188:	d106      	bne.n	8007198 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	639a      	str	r2, [r3, #56]	; 0x38
 8007196:	e005      	b.n	80071a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 80071a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071b0:	b004      	add	sp, #16
 80071b2:	4770      	bx	lr

080071b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	f023 0201 	bic.w	r2, r3, #1
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	370c      	adds	r7, #12
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b082      	sub	sp, #8
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	460b      	mov	r3, r1
 80071e0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80071ee:	78fb      	ldrb	r3, [r7, #3]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d106      	bne.n	8007202 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	60da      	str	r2, [r3, #12]
 8007200:	e00b      	b.n	800721a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007202:	78fb      	ldrb	r3, [r7, #3]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d106      	bne.n	8007216 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	60da      	str	r2, [r3, #12]
 8007214:	e001      	b.n	800721a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e003      	b.n	8007222 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800721a:	2032      	movs	r0, #50	; 0x32
 800721c:	f7fa faca 	bl	80017b4 <HAL_Delay>

  return HAL_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3708      	adds	r7, #8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
	...

0800722c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800722c:	b084      	sub	sp, #16
 800722e:	b580      	push	{r7, lr}
 8007230:	b086      	sub	sp, #24
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
 8007236:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800723a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800723e:	2300      	movs	r3, #0
 8007240:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007246:	2300      	movs	r3, #0
 8007248:	613b      	str	r3, [r7, #16]
 800724a:	e009      	b.n	8007260 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	3340      	adds	r3, #64	; 0x40
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	4413      	add	r3, r2
 8007256:	2200      	movs	r2, #0
 8007258:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	3301      	adds	r3, #1
 800725e:	613b      	str	r3, [r7, #16]
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	2b0e      	cmp	r3, #14
 8007264:	d9f2      	bls.n	800724c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007268:	2b00      	cmp	r3, #0
 800726a:	d11c      	bne.n	80072a6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800727a:	f043 0302 	orr.w	r3, r3, #2
 800727e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007284:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	e005      	b.n	80072b2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072b8:	461a      	mov	r2, r3
 80072ba:	2300      	movs	r3, #0
 80072bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c4:	4619      	mov	r1, r3
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072cc:	461a      	mov	r2, r3
 80072ce:	680b      	ldr	r3, [r1, #0]
 80072d0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80072d2:	2103      	movs	r1, #3
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 f93d 	bl	8007554 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80072da:	2110      	movs	r1, #16
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f8f1 	bl	80074c4 <USB_FlushTxFifo>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d001      	beq.n	80072ec <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 f90f 	bl	8007510 <USB_FlushRxFifo>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d001      	beq.n	80072fc <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007302:	461a      	mov	r2, r3
 8007304:	2300      	movs	r3, #0
 8007306:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800730e:	461a      	mov	r2, r3
 8007310:	2300      	movs	r3, #0
 8007312:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800731a:	461a      	mov	r2, r3
 800731c:	2300      	movs	r3, #0
 800731e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007320:	2300      	movs	r3, #0
 8007322:	613b      	str	r3, [r7, #16]
 8007324:	e043      	b.n	80073ae <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	015a      	lsls	r2, r3, #5
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	4413      	add	r3, r2
 800732e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007338:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800733c:	d118      	bne.n	8007370 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10a      	bne.n	800735a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	015a      	lsls	r2, r3, #5
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4413      	add	r3, r2
 800734c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007350:	461a      	mov	r2, r3
 8007352:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007356:	6013      	str	r3, [r2, #0]
 8007358:	e013      	b.n	8007382 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	015a      	lsls	r2, r3, #5
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	4413      	add	r3, r2
 8007362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007366:	461a      	mov	r2, r3
 8007368:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800736c:	6013      	str	r3, [r2, #0]
 800736e:	e008      	b.n	8007382 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	015a      	lsls	r2, r3, #5
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	4413      	add	r3, r2
 8007378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800737c:	461a      	mov	r2, r3
 800737e:	2300      	movs	r3, #0
 8007380:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	015a      	lsls	r2, r3, #5
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	4413      	add	r3, r2
 800738a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800738e:	461a      	mov	r2, r3
 8007390:	2300      	movs	r3, #0
 8007392:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	015a      	lsls	r2, r3, #5
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	4413      	add	r3, r2
 800739c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a0:	461a      	mov	r2, r3
 80073a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80073a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	3301      	adds	r3, #1
 80073ac:	613b      	str	r3, [r7, #16]
 80073ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d3b7      	bcc.n	8007326 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073b6:	2300      	movs	r3, #0
 80073b8:	613b      	str	r3, [r7, #16]
 80073ba:	e043      	b.n	8007444 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	015a      	lsls	r2, r3, #5
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	4413      	add	r3, r2
 80073c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073d2:	d118      	bne.n	8007406 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10a      	bne.n	80073f0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	015a      	lsls	r2, r3, #5
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	4413      	add	r3, r2
 80073e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e6:	461a      	mov	r2, r3
 80073e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80073ec:	6013      	str	r3, [r2, #0]
 80073ee:	e013      	b.n	8007418 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073fc:	461a      	mov	r2, r3
 80073fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007402:	6013      	str	r3, [r2, #0]
 8007404:	e008      	b.n	8007418 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	015a      	lsls	r2, r3, #5
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	4413      	add	r3, r2
 800740e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007412:	461a      	mov	r2, r3
 8007414:	2300      	movs	r3, #0
 8007416:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	015a      	lsls	r2, r3, #5
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	4413      	add	r3, r2
 8007420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007424:	461a      	mov	r2, r3
 8007426:	2300      	movs	r3, #0
 8007428:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	015a      	lsls	r2, r3, #5
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	4413      	add	r3, r2
 8007432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007436:	461a      	mov	r2, r3
 8007438:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800743c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	3301      	adds	r3, #1
 8007442:	613b      	str	r3, [r7, #16]
 8007444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007446:	693a      	ldr	r2, [r7, #16]
 8007448:	429a      	cmp	r2, r3
 800744a:	d3b7      	bcc.n	80073bc <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800745a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800745e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800746c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	f043 0210 	orr.w	r2, r3, #16
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	699a      	ldr	r2, [r3, #24]
 800747e:	4b10      	ldr	r3, [pc, #64]	; (80074c0 <USB_DevInit+0x294>)
 8007480:	4313      	orrs	r3, r2
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007488:	2b00      	cmp	r3, #0
 800748a:	d005      	beq.n	8007498 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	f043 0208 	orr.w	r2, r3, #8
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800749a:	2b01      	cmp	r3, #1
 800749c:	d107      	bne.n	80074ae <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	699b      	ldr	r3, [r3, #24]
 80074a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074a6:	f043 0304 	orr.w	r3, r3, #4
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80074ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3718      	adds	r7, #24
 80074b4:	46bd      	mov	sp, r7
 80074b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074ba:	b004      	add	sp, #16
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	803c3800 	.word	0x803c3800

080074c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80074ce:	2300      	movs	r3, #0
 80074d0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	019b      	lsls	r3, r3, #6
 80074d6:	f043 0220 	orr.w	r2, r3, #32
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	3301      	adds	r3, #1
 80074e2:	60fb      	str	r3, [r7, #12]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	4a09      	ldr	r2, [pc, #36]	; (800750c <USB_FlushTxFifo+0x48>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d901      	bls.n	80074f0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80074ec:	2303      	movs	r3, #3
 80074ee:	e006      	b.n	80074fe <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	f003 0320 	and.w	r3, r3, #32
 80074f8:	2b20      	cmp	r3, #32
 80074fa:	d0f0      	beq.n	80074de <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3714      	adds	r7, #20
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	00030d40 	.word	0x00030d40

08007510 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007510:	b480      	push	{r7}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007518:	2300      	movs	r3, #0
 800751a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2210      	movs	r2, #16
 8007520:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	3301      	adds	r3, #1
 8007526:	60fb      	str	r3, [r7, #12]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	4a09      	ldr	r2, [pc, #36]	; (8007550 <USB_FlushRxFifo+0x40>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d901      	bls.n	8007534 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	e006      	b.n	8007542 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	f003 0310 	and.w	r3, r3, #16
 800753c:	2b10      	cmp	r3, #16
 800753e:	d0f0      	beq.n	8007522 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3714      	adds	r7, #20
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	00030d40 	.word	0x00030d40

08007554 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	460b      	mov	r3, r1
 800755e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	78fb      	ldrb	r3, [r7, #3]
 800756e:	68f9      	ldr	r1, [r7, #12]
 8007570:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007574:	4313      	orrs	r3, r2
 8007576:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3714      	adds	r7, #20
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007586:	b480      	push	{r7}
 8007588:	b085      	sub	sp, #20
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80075a0:	f023 0303 	bic.w	r3, r3, #3
 80075a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075b4:	f043 0302 	orr.w	r3, r3, #2
 80075b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3714      	adds	r7, #20
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80075d0:	2300      	movs	r3, #0
 80075d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	3301      	adds	r3, #1
 80075d8:	60fb      	str	r3, [r7, #12]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	4a13      	ldr	r2, [pc, #76]	; (800762c <USB_CoreReset+0x64>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d901      	bls.n	80075e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e01b      	b.n	800761e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	daf2      	bge.n	80075d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80075ee:	2300      	movs	r3, #0
 80075f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	f043 0201 	orr.w	r2, r3, #1
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	3301      	adds	r3, #1
 8007602:	60fb      	str	r3, [r7, #12]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	4a09      	ldr	r2, [pc, #36]	; (800762c <USB_CoreReset+0x64>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d901      	bls.n	8007610 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800760c:	2303      	movs	r3, #3
 800760e:	e006      	b.n	800761e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	f003 0301 	and.w	r3, r3, #1
 8007618:	2b01      	cmp	r3, #1
 800761a:	d0f0      	beq.n	80075fe <USB_CoreReset+0x36>

  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3714      	adds	r7, #20
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	00030d40 	.word	0x00030d40

08007630 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007630:	b480      	push	{r7}
 8007632:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007634:	bf00      	nop
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
	...

08007640 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007646:	f3ef 8305 	mrs	r3, IPSR
 800764a:	60bb      	str	r3, [r7, #8]
  return(result);
 800764c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800764e:	2b00      	cmp	r3, #0
 8007650:	d10f      	bne.n	8007672 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007652:	f3ef 8310 	mrs	r3, PRIMASK
 8007656:	607b      	str	r3, [r7, #4]
  return(result);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d105      	bne.n	800766a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800765e:	f3ef 8311 	mrs	r3, BASEPRI
 8007662:	603b      	str	r3, [r7, #0]
  return(result);
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d007      	beq.n	800767a <osKernelInitialize+0x3a>
 800766a:	4b0e      	ldr	r3, [pc, #56]	; (80076a4 <osKernelInitialize+0x64>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2b02      	cmp	r3, #2
 8007670:	d103      	bne.n	800767a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007672:	f06f 0305 	mvn.w	r3, #5
 8007676:	60fb      	str	r3, [r7, #12]
 8007678:	e00c      	b.n	8007694 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800767a:	4b0a      	ldr	r3, [pc, #40]	; (80076a4 <osKernelInitialize+0x64>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d105      	bne.n	800768e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007682:	4b08      	ldr	r3, [pc, #32]	; (80076a4 <osKernelInitialize+0x64>)
 8007684:	2201      	movs	r2, #1
 8007686:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007688:	2300      	movs	r3, #0
 800768a:	60fb      	str	r3, [r7, #12]
 800768c:	e002      	b.n	8007694 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800768e:	f04f 33ff 	mov.w	r3, #4294967295
 8007692:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007694:	68fb      	ldr	r3, [r7, #12]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	20000030 	.word	0x20000030

080076a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076ae:	f3ef 8305 	mrs	r3, IPSR
 80076b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80076b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10f      	bne.n	80076da <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076ba:	f3ef 8310 	mrs	r3, PRIMASK
 80076be:	607b      	str	r3, [r7, #4]
  return(result);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d105      	bne.n	80076d2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80076c6:	f3ef 8311 	mrs	r3, BASEPRI
 80076ca:	603b      	str	r3, [r7, #0]
  return(result);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d007      	beq.n	80076e2 <osKernelStart+0x3a>
 80076d2:	4b0f      	ldr	r3, [pc, #60]	; (8007710 <osKernelStart+0x68>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d103      	bne.n	80076e2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80076da:	f06f 0305 	mvn.w	r3, #5
 80076de:	60fb      	str	r3, [r7, #12]
 80076e0:	e010      	b.n	8007704 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80076e2:	4b0b      	ldr	r3, [pc, #44]	; (8007710 <osKernelStart+0x68>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d109      	bne.n	80076fe <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80076ea:	f7ff ffa1 	bl	8007630 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80076ee:	4b08      	ldr	r3, [pc, #32]	; (8007710 <osKernelStart+0x68>)
 80076f0:	2202      	movs	r2, #2
 80076f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80076f4:	f001 f870 	bl	80087d8 <vTaskStartScheduler>
      stat = osOK;
 80076f8:	2300      	movs	r3, #0
 80076fa:	60fb      	str	r3, [r7, #12]
 80076fc:	e002      	b.n	8007704 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80076fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007702:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007704:	68fb      	ldr	r3, [r7, #12]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	20000030 	.word	0x20000030

08007714 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007714:	b580      	push	{r7, lr}
 8007716:	b090      	sub	sp, #64	; 0x40
 8007718:	af04      	add	r7, sp, #16
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007720:	2300      	movs	r3, #0
 8007722:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007724:	f3ef 8305 	mrs	r3, IPSR
 8007728:	61fb      	str	r3, [r7, #28]
  return(result);
 800772a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800772c:	2b00      	cmp	r3, #0
 800772e:	f040 808f 	bne.w	8007850 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007732:	f3ef 8310 	mrs	r3, PRIMASK
 8007736:	61bb      	str	r3, [r7, #24]
  return(result);
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d105      	bne.n	800774a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800773e:	f3ef 8311 	mrs	r3, BASEPRI
 8007742:	617b      	str	r3, [r7, #20]
  return(result);
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <osThreadNew+0x3e>
 800774a:	4b44      	ldr	r3, [pc, #272]	; (800785c <osThreadNew+0x148>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b02      	cmp	r3, #2
 8007750:	d07e      	beq.n	8007850 <osThreadNew+0x13c>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d07b      	beq.n	8007850 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007758:	2380      	movs	r3, #128	; 0x80
 800775a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800775c:	2318      	movs	r3, #24
 800775e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007760:	2300      	movs	r3, #0
 8007762:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007764:	f04f 33ff 	mov.w	r3, #4294967295
 8007768:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d045      	beq.n	80077fc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d002      	beq.n	800777e <osThreadNew+0x6a>
        name = attr->name;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d002      	beq.n	800778c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	2b00      	cmp	r3, #0
 8007790:	d008      	beq.n	80077a4 <osThreadNew+0x90>
 8007792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007794:	2b38      	cmp	r3, #56	; 0x38
 8007796:	d805      	bhi.n	80077a4 <osThreadNew+0x90>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	f003 0301 	and.w	r3, r3, #1
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d001      	beq.n	80077a8 <osThreadNew+0x94>
        return (NULL);
 80077a4:	2300      	movs	r3, #0
 80077a6:	e054      	b.n	8007852 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	695b      	ldr	r3, [r3, #20]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d003      	beq.n	80077b8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	695b      	ldr	r3, [r3, #20]
 80077b4:	089b      	lsrs	r3, r3, #2
 80077b6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00e      	beq.n	80077de <osThreadNew+0xca>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	2b5b      	cmp	r3, #91	; 0x5b
 80077c6:	d90a      	bls.n	80077de <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d006      	beq.n	80077de <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	695b      	ldr	r3, [r3, #20]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d002      	beq.n	80077de <osThreadNew+0xca>
        mem = 1;
 80077d8:	2301      	movs	r3, #1
 80077da:	623b      	str	r3, [r7, #32]
 80077dc:	e010      	b.n	8007800 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d10c      	bne.n	8007800 <osThreadNew+0xec>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d108      	bne.n	8007800 <osThreadNew+0xec>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d104      	bne.n	8007800 <osThreadNew+0xec>
          mem = 0;
 80077f6:	2300      	movs	r3, #0
 80077f8:	623b      	str	r3, [r7, #32]
 80077fa:	e001      	b.n	8007800 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80077fc:	2300      	movs	r3, #0
 80077fe:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007800:	6a3b      	ldr	r3, [r7, #32]
 8007802:	2b01      	cmp	r3, #1
 8007804:	d110      	bne.n	8007828 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800780e:	9202      	str	r2, [sp, #8]
 8007810:	9301      	str	r3, [sp, #4]
 8007812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007814:	9300      	str	r3, [sp, #0]
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800781a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f000 fe09 	bl	8008434 <xTaskCreateStatic>
 8007822:	4603      	mov	r3, r0
 8007824:	613b      	str	r3, [r7, #16]
 8007826:	e013      	b.n	8007850 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007828:	6a3b      	ldr	r3, [r7, #32]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d110      	bne.n	8007850 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800782e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007830:	b29a      	uxth	r2, r3
 8007832:	f107 0310 	add.w	r3, r7, #16
 8007836:	9301      	str	r3, [sp, #4]
 8007838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	f000 fe51 	bl	80084e8 <xTaskCreate>
 8007846:	4603      	mov	r3, r0
 8007848:	2b01      	cmp	r3, #1
 800784a:	d001      	beq.n	8007850 <osThreadNew+0x13c>
          hTask = NULL;
 800784c:	2300      	movs	r3, #0
 800784e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007850:	693b      	ldr	r3, [r7, #16]
}
 8007852:	4618      	mov	r0, r3
 8007854:	3730      	adds	r7, #48	; 0x30
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	20000030 	.word	0x20000030

08007860 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007868:	f3ef 8305 	mrs	r3, IPSR
 800786c:	613b      	str	r3, [r7, #16]
  return(result);
 800786e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007870:	2b00      	cmp	r3, #0
 8007872:	d10f      	bne.n	8007894 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007874:	f3ef 8310 	mrs	r3, PRIMASK
 8007878:	60fb      	str	r3, [r7, #12]
  return(result);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d105      	bne.n	800788c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007880:	f3ef 8311 	mrs	r3, BASEPRI
 8007884:	60bb      	str	r3, [r7, #8]
  return(result);
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d007      	beq.n	800789c <osDelay+0x3c>
 800788c:	4b0a      	ldr	r3, [pc, #40]	; (80078b8 <osDelay+0x58>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2b02      	cmp	r3, #2
 8007892:	d103      	bne.n	800789c <osDelay+0x3c>
    stat = osErrorISR;
 8007894:	f06f 0305 	mvn.w	r3, #5
 8007898:	617b      	str	r3, [r7, #20]
 800789a:	e007      	b.n	80078ac <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800789c:	2300      	movs	r3, #0
 800789e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d002      	beq.n	80078ac <osDelay+0x4c>
      vTaskDelay(ticks);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 ff62 	bl	8008770 <vTaskDelay>
    }
  }

  return (stat);
 80078ac:	697b      	ldr	r3, [r7, #20]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3718      	adds	r7, #24
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	20000030 	.word	0x20000030

080078bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	4a07      	ldr	r2, [pc, #28]	; (80078e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80078cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	4a06      	ldr	r2, [pc, #24]	; (80078ec <vApplicationGetIdleTaskMemory+0x30>)
 80078d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2280      	movs	r2, #128	; 0x80
 80078d8:	601a      	str	r2, [r3, #0]
}
 80078da:	bf00      	nop
 80078dc:	3714      	adds	r7, #20
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	20000034 	.word	0x20000034
 80078ec:	20000090 	.word	0x20000090

080078f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80078f0:	b480      	push	{r7}
 80078f2:	b085      	sub	sp, #20
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	4a07      	ldr	r2, [pc, #28]	; (800791c <vApplicationGetTimerTaskMemory+0x2c>)
 8007900:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	4a06      	ldr	r2, [pc, #24]	; (8007920 <vApplicationGetTimerTaskMemory+0x30>)
 8007906:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800790e:	601a      	str	r2, [r3, #0]
}
 8007910:	bf00      	nop
 8007912:	3714      	adds	r7, #20
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr
 800791c:	20000290 	.word	0x20000290
 8007920:	200002ec 	.word	0x200002ec

08007924 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f103 0208 	add.w	r2, r3, #8
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f04f 32ff 	mov.w	r2, #4294967295
 800793c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f103 0208 	add.w	r2, r3, #8
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f103 0208 	add.w	r2, r3, #8
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007972:	bf00      	nop
 8007974:	370c      	adds	r7, #12
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800797e:	b480      	push	{r7}
 8007980:	b085      	sub	sp, #20
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
 8007986:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	689a      	ldr	r2, [r3, #8]
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	683a      	ldr	r2, [r7, #0]
 80079a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	683a      	ldr	r2, [r7, #0]
 80079a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	1c5a      	adds	r2, r3, #1
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	601a      	str	r2, [r3, #0]
}
 80079ba:	bf00      	nop
 80079bc:	3714      	adds	r7, #20
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079c6:	b480      	push	{r7}
 80079c8:	b085      	sub	sp, #20
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
 80079ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079dc:	d103      	bne.n	80079e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	60fb      	str	r3, [r7, #12]
 80079e4:	e00c      	b.n	8007a00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	3308      	adds	r3, #8
 80079ea:	60fb      	str	r3, [r7, #12]
 80079ec:	e002      	b.n	80079f4 <vListInsert+0x2e>
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	60fb      	str	r3, [r7, #12]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d2f6      	bcs.n	80079ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	685a      	ldr	r2, [r3, #4]
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	683a      	ldr	r2, [r7, #0]
 8007a0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	683a      	ldr	r2, [r7, #0]
 8007a1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	1c5a      	adds	r2, r3, #1
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	601a      	str	r2, [r3, #0]
}
 8007a2c:	bf00      	nop
 8007a2e:	3714      	adds	r7, #20
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	6892      	ldr	r2, [r2, #8]
 8007a4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	6852      	ldr	r2, [r2, #4]
 8007a58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d103      	bne.n	8007a6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	689a      	ldr	r2, [r3, #8]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	1e5a      	subs	r2, r3, #1
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3714      	adds	r7, #20
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d109      	bne.n	8007ab4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	60bb      	str	r3, [r7, #8]
 8007ab2:	e7fe      	b.n	8007ab2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007ab4:	f002 f812 	bl	8009adc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac0:	68f9      	ldr	r1, [r7, #12]
 8007ac2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ac4:	fb01 f303 	mul.w	r3, r1, r3
 8007ac8:	441a      	add	r2, r3
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	68f9      	ldr	r1, [r7, #12]
 8007ae8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007aea:	fb01 f303 	mul.w	r3, r1, r3
 8007aee:	441a      	add	r2, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	22ff      	movs	r2, #255	; 0xff
 8007af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	22ff      	movs	r2, #255	; 0xff
 8007b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d114      	bne.n	8007b34 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d01a      	beq.n	8007b48 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	3310      	adds	r3, #16
 8007b16:	4618      	mov	r0, r3
 8007b18:	f001 f8de 	bl	8008cd8 <xTaskRemoveFromEventList>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d012      	beq.n	8007b48 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007b22:	4b0d      	ldr	r3, [pc, #52]	; (8007b58 <xQueueGenericReset+0xcc>)
 8007b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b28:	601a      	str	r2, [r3, #0]
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	e009      	b.n	8007b48 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	3310      	adds	r3, #16
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7ff fef3 	bl	8007924 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	3324      	adds	r3, #36	; 0x24
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7ff feee 	bl	8007924 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007b48:	f001 fff6 	bl	8009b38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007b4c:	2301      	movs	r3, #1
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	e000ed04 	.word	0xe000ed04

08007b5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b08e      	sub	sp, #56	; 0x38
 8007b60:	af02      	add	r7, sp, #8
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
 8007b68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d109      	bne.n	8007b84 <xQueueGenericCreateStatic+0x28>
 8007b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b82:	e7fe      	b.n	8007b82 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d109      	bne.n	8007b9e <xQueueGenericCreateStatic+0x42>
 8007b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8e:	f383 8811 	msr	BASEPRI, r3
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8007b9c:	e7fe      	b.n	8007b9c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d002      	beq.n	8007baa <xQueueGenericCreateStatic+0x4e>
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d001      	beq.n	8007bae <xQueueGenericCreateStatic+0x52>
 8007baa:	2301      	movs	r3, #1
 8007bac:	e000      	b.n	8007bb0 <xQueueGenericCreateStatic+0x54>
 8007bae:	2300      	movs	r3, #0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d109      	bne.n	8007bc8 <xQueueGenericCreateStatic+0x6c>
 8007bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb8:	f383 8811 	msr	BASEPRI, r3
 8007bbc:	f3bf 8f6f 	isb	sy
 8007bc0:	f3bf 8f4f 	dsb	sy
 8007bc4:	623b      	str	r3, [r7, #32]
 8007bc6:	e7fe      	b.n	8007bc6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d102      	bne.n	8007bd4 <xQueueGenericCreateStatic+0x78>
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d101      	bne.n	8007bd8 <xQueueGenericCreateStatic+0x7c>
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e000      	b.n	8007bda <xQueueGenericCreateStatic+0x7e>
 8007bd8:	2300      	movs	r3, #0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d109      	bne.n	8007bf2 <xQueueGenericCreateStatic+0x96>
 8007bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be2:	f383 8811 	msr	BASEPRI, r3
 8007be6:	f3bf 8f6f 	isb	sy
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	61fb      	str	r3, [r7, #28]
 8007bf0:	e7fe      	b.n	8007bf0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007bf2:	2350      	movs	r3, #80	; 0x50
 8007bf4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2b50      	cmp	r3, #80	; 0x50
 8007bfa:	d009      	beq.n	8007c10 <xQueueGenericCreateStatic+0xb4>
 8007bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c00:	f383 8811 	msr	BASEPRI, r3
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	61bb      	str	r3, [r7, #24]
 8007c0e:	e7fe      	b.n	8007c0e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007c10:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00d      	beq.n	8007c38 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c24:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	68b9      	ldr	r1, [r7, #8]
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	f000 f805 	bl	8007c42 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3730      	adds	r7, #48	; 0x30
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b084      	sub	sp, #16
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	60f8      	str	r0, [r7, #12]
 8007c4a:	60b9      	str	r1, [r7, #8]
 8007c4c:	607a      	str	r2, [r7, #4]
 8007c4e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d103      	bne.n	8007c5e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	69ba      	ldr	r2, [r7, #24]
 8007c5a:	601a      	str	r2, [r3, #0]
 8007c5c:	e002      	b.n	8007c64 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	68ba      	ldr	r2, [r7, #8]
 8007c6e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c70:	2101      	movs	r1, #1
 8007c72:	69b8      	ldr	r0, [r7, #24]
 8007c74:	f7ff ff0a 	bl	8007a8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	78fa      	ldrb	r2, [r7, #3]
 8007c7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c80:	bf00      	nop
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b08e      	sub	sp, #56	; 0x38
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	607a      	str	r2, [r7, #4]
 8007c94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c96:	2300      	movs	r3, #0
 8007c98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d109      	bne.n	8007cb8 <xQueueGenericSend+0x30>
 8007ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca8:	f383 8811 	msr	BASEPRI, r3
 8007cac:	f3bf 8f6f 	isb	sy
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cb6:	e7fe      	b.n	8007cb6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d103      	bne.n	8007cc6 <xQueueGenericSend+0x3e>
 8007cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d101      	bne.n	8007cca <xQueueGenericSend+0x42>
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e000      	b.n	8007ccc <xQueueGenericSend+0x44>
 8007cca:	2300      	movs	r3, #0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d109      	bne.n	8007ce4 <xQueueGenericSend+0x5c>
 8007cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd4:	f383 8811 	msr	BASEPRI, r3
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ce2:	e7fe      	b.n	8007ce2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d103      	bne.n	8007cf2 <xQueueGenericSend+0x6a>
 8007cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d101      	bne.n	8007cf6 <xQueueGenericSend+0x6e>
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e000      	b.n	8007cf8 <xQueueGenericSend+0x70>
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d109      	bne.n	8007d10 <xQueueGenericSend+0x88>
 8007cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	623b      	str	r3, [r7, #32]
 8007d0e:	e7fe      	b.n	8007d0e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d10:	f001 f998 	bl	8009044 <xTaskGetSchedulerState>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d102      	bne.n	8007d20 <xQueueGenericSend+0x98>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d101      	bne.n	8007d24 <xQueueGenericSend+0x9c>
 8007d20:	2301      	movs	r3, #1
 8007d22:	e000      	b.n	8007d26 <xQueueGenericSend+0x9e>
 8007d24:	2300      	movs	r3, #0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d109      	bne.n	8007d3e <xQueueGenericSend+0xb6>
 8007d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2e:	f383 8811 	msr	BASEPRI, r3
 8007d32:	f3bf 8f6f 	isb	sy
 8007d36:	f3bf 8f4f 	dsb	sy
 8007d3a:	61fb      	str	r3, [r7, #28]
 8007d3c:	e7fe      	b.n	8007d3c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d3e:	f001 fecd 	bl	8009adc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d302      	bcc.n	8007d54 <xQueueGenericSend+0xcc>
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d129      	bne.n	8007da8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d54:	683a      	ldr	r2, [r7, #0]
 8007d56:	68b9      	ldr	r1, [r7, #8]
 8007d58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d5a:	f000 f9ff 	bl	800815c <prvCopyDataToQueue>
 8007d5e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d010      	beq.n	8007d8a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6a:	3324      	adds	r3, #36	; 0x24
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f000 ffb3 	bl	8008cd8 <xTaskRemoveFromEventList>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d013      	beq.n	8007da0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d78:	4b3f      	ldr	r3, [pc, #252]	; (8007e78 <xQueueGenericSend+0x1f0>)
 8007d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d7e:	601a      	str	r2, [r3, #0]
 8007d80:	f3bf 8f4f 	dsb	sy
 8007d84:	f3bf 8f6f 	isb	sy
 8007d88:	e00a      	b.n	8007da0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d007      	beq.n	8007da0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007d90:	4b39      	ldr	r3, [pc, #228]	; (8007e78 <xQueueGenericSend+0x1f0>)
 8007d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d96:	601a      	str	r2, [r3, #0]
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007da0:	f001 feca 	bl	8009b38 <vPortExitCritical>
				return pdPASS;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e063      	b.n	8007e70 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d103      	bne.n	8007db6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007dae:	f001 fec3 	bl	8009b38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007db2:	2300      	movs	r3, #0
 8007db4:	e05c      	b.n	8007e70 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d106      	bne.n	8007dca <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007dbc:	f107 0314 	add.w	r3, r7, #20
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f000 ffeb 	bl	8008d9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007dca:	f001 feb5 	bl	8009b38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007dce:	f000 fd67 	bl	80088a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007dd2:	f001 fe83 	bl	8009adc <vPortEnterCritical>
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ddc:	b25b      	sxtb	r3, r3
 8007dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de2:	d103      	bne.n	8007dec <xQueueGenericSend+0x164>
 8007de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007df2:	b25b      	sxtb	r3, r3
 8007df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df8:	d103      	bne.n	8007e02 <xQueueGenericSend+0x17a>
 8007dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e02:	f001 fe99 	bl	8009b38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e06:	1d3a      	adds	r2, r7, #4
 8007e08:	f107 0314 	add.w	r3, r7, #20
 8007e0c:	4611      	mov	r1, r2
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f000 ffda 	bl	8008dc8 <xTaskCheckForTimeOut>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d124      	bne.n	8007e64 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e1c:	f000 fa96 	bl	800834c <prvIsQueueFull>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d018      	beq.n	8007e58 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e28:	3310      	adds	r3, #16
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	4611      	mov	r1, r2
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 ff04 	bl	8008c3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007e34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e36:	f000 fa21 	bl	800827c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007e3a:	f000 fd3f 	bl	80088bc <xTaskResumeAll>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	f47f af7c 	bne.w	8007d3e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007e46:	4b0c      	ldr	r3, [pc, #48]	; (8007e78 <xQueueGenericSend+0x1f0>)
 8007e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e4c:	601a      	str	r2, [r3, #0]
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	e772      	b.n	8007d3e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e5a:	f000 fa0f 	bl	800827c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e5e:	f000 fd2d 	bl	80088bc <xTaskResumeAll>
 8007e62:	e76c      	b.n	8007d3e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007e64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e66:	f000 fa09 	bl	800827c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e6a:	f000 fd27 	bl	80088bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3738      	adds	r7, #56	; 0x38
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	e000ed04 	.word	0xe000ed04

08007e7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b08e      	sub	sp, #56	; 0x38
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
 8007e88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d109      	bne.n	8007ea8 <xQueueGenericSendFromISR+0x2c>
 8007e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e98:	f383 8811 	msr	BASEPRI, r3
 8007e9c:	f3bf 8f6f 	isb	sy
 8007ea0:	f3bf 8f4f 	dsb	sy
 8007ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ea6:	e7fe      	b.n	8007ea6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d103      	bne.n	8007eb6 <xQueueGenericSendFromISR+0x3a>
 8007eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d101      	bne.n	8007eba <xQueueGenericSendFromISR+0x3e>
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e000      	b.n	8007ebc <xQueueGenericSendFromISR+0x40>
 8007eba:	2300      	movs	r3, #0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d109      	bne.n	8007ed4 <xQueueGenericSendFromISR+0x58>
 8007ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec4:	f383 8811 	msr	BASEPRI, r3
 8007ec8:	f3bf 8f6f 	isb	sy
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	623b      	str	r3, [r7, #32]
 8007ed2:	e7fe      	b.n	8007ed2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d103      	bne.n	8007ee2 <xQueueGenericSendFromISR+0x66>
 8007eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d101      	bne.n	8007ee6 <xQueueGenericSendFromISR+0x6a>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e000      	b.n	8007ee8 <xQueueGenericSendFromISR+0x6c>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d109      	bne.n	8007f00 <xQueueGenericSendFromISR+0x84>
 8007eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef0:	f383 8811 	msr	BASEPRI, r3
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	61fb      	str	r3, [r7, #28]
 8007efe:	e7fe      	b.n	8007efe <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f00:	f001 fec8 	bl	8009c94 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f04:	f3ef 8211 	mrs	r2, BASEPRI
 8007f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0c:	f383 8811 	msr	BASEPRI, r3
 8007f10:	f3bf 8f6f 	isb	sy
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	61ba      	str	r2, [r7, #24]
 8007f1a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007f1c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d302      	bcc.n	8007f32 <xQueueGenericSendFromISR+0xb6>
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	d12c      	bne.n	8007f8c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f3c:	683a      	ldr	r2, [r7, #0]
 8007f3e:	68b9      	ldr	r1, [r7, #8]
 8007f40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f42:	f000 f90b 	bl	800815c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f46:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f4e:	d112      	bne.n	8007f76 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d016      	beq.n	8007f86 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5a:	3324      	adds	r3, #36	; 0x24
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f000 febb 	bl	8008cd8 <xTaskRemoveFromEventList>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00e      	beq.n	8007f86 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00b      	beq.n	8007f86 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2201      	movs	r2, #1
 8007f72:	601a      	str	r2, [r3, #0]
 8007f74:	e007      	b.n	8007f86 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	b25a      	sxtb	r2, r3
 8007f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007f86:	2301      	movs	r3, #1
 8007f88:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007f8a:	e001      	b.n	8007f90 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	637b      	str	r3, [r7, #52]	; 0x34
 8007f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f92:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3738      	adds	r7, #56	; 0x38
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b08c      	sub	sp, #48	; 0x30
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d109      	bne.n	8007fd2 <xQueueReceive+0x2e>
	__asm volatile
 8007fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	623b      	str	r3, [r7, #32]
 8007fd0:	e7fe      	b.n	8007fd0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d103      	bne.n	8007fe0 <xQueueReceive+0x3c>
 8007fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d101      	bne.n	8007fe4 <xQueueReceive+0x40>
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e000      	b.n	8007fe6 <xQueueReceive+0x42>
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d109      	bne.n	8007ffe <xQueueReceive+0x5a>
 8007fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fee:	f383 8811 	msr	BASEPRI, r3
 8007ff2:	f3bf 8f6f 	isb	sy
 8007ff6:	f3bf 8f4f 	dsb	sy
 8007ffa:	61fb      	str	r3, [r7, #28]
 8007ffc:	e7fe      	b.n	8007ffc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ffe:	f001 f821 	bl	8009044 <xTaskGetSchedulerState>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d102      	bne.n	800800e <xQueueReceive+0x6a>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d101      	bne.n	8008012 <xQueueReceive+0x6e>
 800800e:	2301      	movs	r3, #1
 8008010:	e000      	b.n	8008014 <xQueueReceive+0x70>
 8008012:	2300      	movs	r3, #0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d109      	bne.n	800802c <xQueueReceive+0x88>
 8008018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801c:	f383 8811 	msr	BASEPRI, r3
 8008020:	f3bf 8f6f 	isb	sy
 8008024:	f3bf 8f4f 	dsb	sy
 8008028:	61bb      	str	r3, [r7, #24]
 800802a:	e7fe      	b.n	800802a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800802c:	f001 fd56 	bl	8009adc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008034:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008038:	2b00      	cmp	r3, #0
 800803a:	d01f      	beq.n	800807c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800803c:	68b9      	ldr	r1, [r7, #8]
 800803e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008040:	f000 f8f6 	bl	8008230 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008046:	1e5a      	subs	r2, r3, #1
 8008048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800804c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00f      	beq.n	8008074 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008056:	3310      	adds	r3, #16
 8008058:	4618      	mov	r0, r3
 800805a:	f000 fe3d 	bl	8008cd8 <xTaskRemoveFromEventList>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d007      	beq.n	8008074 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008064:	4b3c      	ldr	r3, [pc, #240]	; (8008158 <xQueueReceive+0x1b4>)
 8008066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800806a:	601a      	str	r2, [r3, #0]
 800806c:	f3bf 8f4f 	dsb	sy
 8008070:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008074:	f001 fd60 	bl	8009b38 <vPortExitCritical>
				return pdPASS;
 8008078:	2301      	movs	r3, #1
 800807a:	e069      	b.n	8008150 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d103      	bne.n	800808a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008082:	f001 fd59 	bl	8009b38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008086:	2300      	movs	r3, #0
 8008088:	e062      	b.n	8008150 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800808a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800808c:	2b00      	cmp	r3, #0
 800808e:	d106      	bne.n	800809e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008090:	f107 0310 	add.w	r3, r7, #16
 8008094:	4618      	mov	r0, r3
 8008096:	f000 fe81 	bl	8008d9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800809a:	2301      	movs	r3, #1
 800809c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800809e:	f001 fd4b 	bl	8009b38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080a2:	f000 fbfd 	bl	80088a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080a6:	f001 fd19 	bl	8009adc <vPortEnterCritical>
 80080aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080b0:	b25b      	sxtb	r3, r3
 80080b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b6:	d103      	bne.n	80080c0 <xQueueReceive+0x11c>
 80080b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ba:	2200      	movs	r2, #0
 80080bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080c6:	b25b      	sxtb	r3, r3
 80080c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080cc:	d103      	bne.n	80080d6 <xQueueReceive+0x132>
 80080ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080d6:	f001 fd2f 	bl	8009b38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080da:	1d3a      	adds	r2, r7, #4
 80080dc:	f107 0310 	add.w	r3, r7, #16
 80080e0:	4611      	mov	r1, r2
 80080e2:	4618      	mov	r0, r3
 80080e4:	f000 fe70 	bl	8008dc8 <xTaskCheckForTimeOut>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d123      	bne.n	8008136 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080f0:	f000 f916 	bl	8008320 <prvIsQueueEmpty>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d017      	beq.n	800812a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80080fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fc:	3324      	adds	r3, #36	; 0x24
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	4611      	mov	r1, r2
 8008102:	4618      	mov	r0, r3
 8008104:	f000 fd9a 	bl	8008c3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008108:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800810a:	f000 f8b7 	bl	800827c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800810e:	f000 fbd5 	bl	80088bc <xTaskResumeAll>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d189      	bne.n	800802c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8008118:	4b0f      	ldr	r3, [pc, #60]	; (8008158 <xQueueReceive+0x1b4>)
 800811a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800811e:	601a      	str	r2, [r3, #0]
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	e780      	b.n	800802c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800812a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800812c:	f000 f8a6 	bl	800827c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008130:	f000 fbc4 	bl	80088bc <xTaskResumeAll>
 8008134:	e77a      	b.n	800802c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008138:	f000 f8a0 	bl	800827c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800813c:	f000 fbbe 	bl	80088bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008142:	f000 f8ed 	bl	8008320 <prvIsQueueEmpty>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	f43f af6f 	beq.w	800802c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800814e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008150:	4618      	mov	r0, r3
 8008152:	3730      	adds	r7, #48	; 0x30
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	e000ed04 	.word	0xe000ed04

0800815c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008168:	2300      	movs	r3, #0
 800816a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008170:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10d      	bne.n	8008196 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d14d      	bne.n	800821e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	4618      	mov	r0, r3
 8008188:	f000 ff7a 	bl	8009080 <xTaskPriorityDisinherit>
 800818c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2200      	movs	r2, #0
 8008192:	609a      	str	r2, [r3, #8]
 8008194:	e043      	b.n	800821e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d119      	bne.n	80081d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6858      	ldr	r0, [r3, #4]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a4:	461a      	mov	r2, r3
 80081a6:	68b9      	ldr	r1, [r7, #8]
 80081a8:	f001 ffac 	bl	800a104 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	685a      	ldr	r2, [r3, #4]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b4:	441a      	add	r2, r3
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	685a      	ldr	r2, [r3, #4]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d32b      	bcc.n	800821e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	605a      	str	r2, [r3, #4]
 80081ce:	e026      	b.n	800821e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	68d8      	ldr	r0, [r3, #12]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d8:	461a      	mov	r2, r3
 80081da:	68b9      	ldr	r1, [r7, #8]
 80081dc:	f001 ff92 	bl	800a104 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	68da      	ldr	r2, [r3, #12]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e8:	425b      	negs	r3, r3
 80081ea:	441a      	add	r2, r3
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	68da      	ldr	r2, [r3, #12]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d207      	bcs.n	800820c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	689a      	ldr	r2, [r3, #8]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008204:	425b      	negs	r3, r3
 8008206:	441a      	add	r2, r3
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2b02      	cmp	r3, #2
 8008210:	d105      	bne.n	800821e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d002      	beq.n	800821e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	3b01      	subs	r3, #1
 800821c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	1c5a      	adds	r2, r3, #1
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008226:	697b      	ldr	r3, [r7, #20]
}
 8008228:	4618      	mov	r0, r3
 800822a:	3718      	adds	r7, #24
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823e:	2b00      	cmp	r3, #0
 8008240:	d018      	beq.n	8008274 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	68da      	ldr	r2, [r3, #12]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824a:	441a      	add	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	68da      	ldr	r2, [r3, #12]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	429a      	cmp	r2, r3
 800825a:	d303      	bcc.n	8008264 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	68d9      	ldr	r1, [r3, #12]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826c:	461a      	mov	r2, r3
 800826e:	6838      	ldr	r0, [r7, #0]
 8008270:	f001 ff48 	bl	800a104 <memcpy>
	}
}
 8008274:	bf00      	nop
 8008276:	3708      	adds	r7, #8
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008284:	f001 fc2a 	bl	8009adc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800828e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008290:	e011      	b.n	80082b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008296:	2b00      	cmp	r3, #0
 8008298:	d012      	beq.n	80082c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	3324      	adds	r3, #36	; 0x24
 800829e:	4618      	mov	r0, r3
 80082a0:	f000 fd1a 	bl	8008cd8 <xTaskRemoveFromEventList>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80082aa:	f000 fded 	bl	8008e88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80082ae:	7bfb      	ldrb	r3, [r7, #15]
 80082b0:	3b01      	subs	r3, #1
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	dce9      	bgt.n	8008292 <prvUnlockQueue+0x16>
 80082be:	e000      	b.n	80082c2 <prvUnlockQueue+0x46>
					break;
 80082c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	22ff      	movs	r2, #255	; 0xff
 80082c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80082ca:	f001 fc35 	bl	8009b38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80082ce:	f001 fc05 	bl	8009adc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082da:	e011      	b.n	8008300 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d012      	beq.n	800830a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	3310      	adds	r3, #16
 80082e8:	4618      	mov	r0, r3
 80082ea:	f000 fcf5 	bl	8008cd8 <xTaskRemoveFromEventList>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d001      	beq.n	80082f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80082f4:	f000 fdc8 	bl	8008e88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80082f8:	7bbb      	ldrb	r3, [r7, #14]
 80082fa:	3b01      	subs	r3, #1
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008300:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008304:	2b00      	cmp	r3, #0
 8008306:	dce9      	bgt.n	80082dc <prvUnlockQueue+0x60>
 8008308:	e000      	b.n	800830c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800830a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	22ff      	movs	r2, #255	; 0xff
 8008310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008314:	f001 fc10 	bl	8009b38 <vPortExitCritical>
}
 8008318:	bf00      	nop
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008328:	f001 fbd8 	bl	8009adc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008330:	2b00      	cmp	r3, #0
 8008332:	d102      	bne.n	800833a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008334:	2301      	movs	r3, #1
 8008336:	60fb      	str	r3, [r7, #12]
 8008338:	e001      	b.n	800833e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800833a:	2300      	movs	r3, #0
 800833c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800833e:	f001 fbfb 	bl	8009b38 <vPortExitCritical>

	return xReturn;
 8008342:	68fb      	ldr	r3, [r7, #12]
}
 8008344:	4618      	mov	r0, r3
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008354:	f001 fbc2 	bl	8009adc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008360:	429a      	cmp	r2, r3
 8008362:	d102      	bne.n	800836a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008364:	2301      	movs	r3, #1
 8008366:	60fb      	str	r3, [r7, #12]
 8008368:	e001      	b.n	800836e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800836a:	2300      	movs	r3, #0
 800836c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800836e:	f001 fbe3 	bl	8009b38 <vPortExitCritical>

	return xReturn;
 8008372:	68fb      	ldr	r3, [r7, #12]
}
 8008374:	4618      	mov	r0, r3
 8008376:	3710      	adds	r7, #16
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008386:	2300      	movs	r3, #0
 8008388:	60fb      	str	r3, [r7, #12]
 800838a:	e014      	b.n	80083b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800838c:	4a0e      	ldr	r2, [pc, #56]	; (80083c8 <vQueueAddToRegistry+0x4c>)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10b      	bne.n	80083b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008398:	490b      	ldr	r1, [pc, #44]	; (80083c8 <vQueueAddToRegistry+0x4c>)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	683a      	ldr	r2, [r7, #0]
 800839e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80083a2:	4a09      	ldr	r2, [pc, #36]	; (80083c8 <vQueueAddToRegistry+0x4c>)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	00db      	lsls	r3, r3, #3
 80083a8:	4413      	add	r3, r2
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80083ae:	e005      	b.n	80083bc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	3301      	adds	r3, #1
 80083b4:	60fb      	str	r3, [r7, #12]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2b07      	cmp	r3, #7
 80083ba:	d9e7      	bls.n	800838c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80083bc:	bf00      	nop
 80083be:	3714      	adds	r7, #20
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr
 80083c8:	20001e9c 	.word	0x20001e9c

080083cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b086      	sub	sp, #24
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80083dc:	f001 fb7e 	bl	8009adc <vPortEnterCritical>
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083e6:	b25b      	sxtb	r3, r3
 80083e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ec:	d103      	bne.n	80083f6 <vQueueWaitForMessageRestricted+0x2a>
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083fc:	b25b      	sxtb	r3, r3
 80083fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008402:	d103      	bne.n	800840c <vQueueWaitForMessageRestricted+0x40>
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	2200      	movs	r2, #0
 8008408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800840c:	f001 fb94 	bl	8009b38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008414:	2b00      	cmp	r3, #0
 8008416:	d106      	bne.n	8008426 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	3324      	adds	r3, #36	; 0x24
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	68b9      	ldr	r1, [r7, #8]
 8008420:	4618      	mov	r0, r3
 8008422:	f000 fc2f 	bl	8008c84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008426:	6978      	ldr	r0, [r7, #20]
 8008428:	f7ff ff28 	bl	800827c <prvUnlockQueue>
	}
 800842c:	bf00      	nop
 800842e:	3718      	adds	r7, #24
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008434:	b580      	push	{r7, lr}
 8008436:	b08e      	sub	sp, #56	; 0x38
 8008438:	af04      	add	r7, sp, #16
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	607a      	str	r2, [r7, #4]
 8008440:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008444:	2b00      	cmp	r3, #0
 8008446:	d109      	bne.n	800845c <xTaskCreateStatic+0x28>
 8008448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844c:	f383 8811 	msr	BASEPRI, r3
 8008450:	f3bf 8f6f 	isb	sy
 8008454:	f3bf 8f4f 	dsb	sy
 8008458:	623b      	str	r3, [r7, #32]
 800845a:	e7fe      	b.n	800845a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800845c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845e:	2b00      	cmp	r3, #0
 8008460:	d109      	bne.n	8008476 <xTaskCreateStatic+0x42>
 8008462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008466:	f383 8811 	msr	BASEPRI, r3
 800846a:	f3bf 8f6f 	isb	sy
 800846e:	f3bf 8f4f 	dsb	sy
 8008472:	61fb      	str	r3, [r7, #28]
 8008474:	e7fe      	b.n	8008474 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008476:	235c      	movs	r3, #92	; 0x5c
 8008478:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	2b5c      	cmp	r3, #92	; 0x5c
 800847e:	d009      	beq.n	8008494 <xTaskCreateStatic+0x60>
 8008480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008484:	f383 8811 	msr	BASEPRI, r3
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	61bb      	str	r3, [r7, #24]
 8008492:	e7fe      	b.n	8008492 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008494:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008498:	2b00      	cmp	r3, #0
 800849a:	d01e      	beq.n	80084da <xTaskCreateStatic+0xa6>
 800849c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d01b      	beq.n	80084da <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80084a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084aa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ae:	2202      	movs	r2, #2
 80084b0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084b4:	2300      	movs	r3, #0
 80084b6:	9303      	str	r3, [sp, #12]
 80084b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ba:	9302      	str	r3, [sp, #8]
 80084bc:	f107 0314 	add.w	r3, r7, #20
 80084c0:	9301      	str	r3, [sp, #4]
 80084c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	68b9      	ldr	r1, [r7, #8]
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f000 f850 	bl	8008572 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084d4:	f000 f8dc 	bl	8008690 <prvAddNewTaskToReadyList>
 80084d8:	e001      	b.n	80084de <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80084da:	2300      	movs	r3, #0
 80084dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80084de:	697b      	ldr	r3, [r7, #20]
	}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3728      	adds	r7, #40	; 0x28
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b08c      	sub	sp, #48	; 0x30
 80084ec:	af04      	add	r7, sp, #16
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	603b      	str	r3, [r7, #0]
 80084f4:	4613      	mov	r3, r2
 80084f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80084f8:	88fb      	ldrh	r3, [r7, #6]
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4618      	mov	r0, r3
 80084fe:	f001 fc07 	bl	8009d10 <pvPortMalloc>
 8008502:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00e      	beq.n	8008528 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800850a:	205c      	movs	r0, #92	; 0x5c
 800850c:	f001 fc00 	bl	8009d10 <pvPortMalloc>
 8008510:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d003      	beq.n	8008520 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	631a      	str	r2, [r3, #48]	; 0x30
 800851e:	e005      	b.n	800852c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008520:	6978      	ldr	r0, [r7, #20]
 8008522:	f001 fcb7 	bl	8009e94 <vPortFree>
 8008526:	e001      	b.n	800852c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008528:	2300      	movs	r3, #0
 800852a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d017      	beq.n	8008562 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	2200      	movs	r2, #0
 8008536:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800853a:	88fa      	ldrh	r2, [r7, #6]
 800853c:	2300      	movs	r3, #0
 800853e:	9303      	str	r3, [sp, #12]
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	9302      	str	r3, [sp, #8]
 8008544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008546:	9301      	str	r3, [sp, #4]
 8008548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800854a:	9300      	str	r3, [sp, #0]
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	68b9      	ldr	r1, [r7, #8]
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	f000 f80e 	bl	8008572 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008556:	69f8      	ldr	r0, [r7, #28]
 8008558:	f000 f89a 	bl	8008690 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800855c:	2301      	movs	r3, #1
 800855e:	61bb      	str	r3, [r7, #24]
 8008560:	e002      	b.n	8008568 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008562:	f04f 33ff 	mov.w	r3, #4294967295
 8008566:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008568:	69bb      	ldr	r3, [r7, #24]
	}
 800856a:	4618      	mov	r0, r3
 800856c:	3720      	adds	r7, #32
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b088      	sub	sp, #32
 8008576:	af00      	add	r7, sp, #0
 8008578:	60f8      	str	r0, [r7, #12]
 800857a:	60b9      	str	r1, [r7, #8]
 800857c:	607a      	str	r2, [r7, #4]
 800857e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008582:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	461a      	mov	r2, r3
 800858a:	21a5      	movs	r1, #165	; 0xa5
 800858c:	f001 fdc5 	bl	800a11a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800859a:	3b01      	subs	r3, #1
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	4413      	add	r3, r2
 80085a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	f023 0307 	bic.w	r3, r3, #7
 80085a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	f003 0307 	and.w	r3, r3, #7
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d009      	beq.n	80085c8 <prvInitialiseNewTask+0x56>
 80085b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b8:	f383 8811 	msr	BASEPRI, r3
 80085bc:	f3bf 8f6f 	isb	sy
 80085c0:	f3bf 8f4f 	dsb	sy
 80085c4:	617b      	str	r3, [r7, #20]
 80085c6:	e7fe      	b.n	80085c6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d01f      	beq.n	800860e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085ce:	2300      	movs	r3, #0
 80085d0:	61fb      	str	r3, [r7, #28]
 80085d2:	e012      	b.n	80085fa <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80085d4:	68ba      	ldr	r2, [r7, #8]
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	4413      	add	r3, r2
 80085da:	7819      	ldrb	r1, [r3, #0]
 80085dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	4413      	add	r3, r2
 80085e2:	3334      	adds	r3, #52	; 0x34
 80085e4:	460a      	mov	r2, r1
 80085e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80085e8:	68ba      	ldr	r2, [r7, #8]
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	4413      	add	r3, r2
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d006      	beq.n	8008602 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	3301      	adds	r3, #1
 80085f8:	61fb      	str	r3, [r7, #28]
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	2b0f      	cmp	r3, #15
 80085fe:	d9e9      	bls.n	80085d4 <prvInitialiseNewTask+0x62>
 8008600:	e000      	b.n	8008604 <prvInitialiseNewTask+0x92>
			{
				break;
 8008602:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008606:	2200      	movs	r2, #0
 8008608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800860c:	e003      	b.n	8008616 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800860e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008610:	2200      	movs	r2, #0
 8008612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008618:	2b37      	cmp	r3, #55	; 0x37
 800861a:	d901      	bls.n	8008620 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800861c:	2337      	movs	r3, #55	; 0x37
 800861e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008624:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008628:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800862a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800862c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862e:	2200      	movs	r2, #0
 8008630:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008634:	3304      	adds	r3, #4
 8008636:	4618      	mov	r0, r3
 8008638:	f7ff f994 	bl	8007964 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800863c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863e:	3318      	adds	r3, #24
 8008640:	4618      	mov	r0, r3
 8008642:	f7ff f98f 	bl	8007964 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800864a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800864c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008654:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800865a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800865c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865e:	2200      	movs	r2, #0
 8008660:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008664:	2200      	movs	r2, #0
 8008666:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800866a:	683a      	ldr	r2, [r7, #0]
 800866c:	68f9      	ldr	r1, [r7, #12]
 800866e:	69b8      	ldr	r0, [r7, #24]
 8008670:	f001 f90c 	bl	800988c <pxPortInitialiseStack>
 8008674:	4602      	mov	r2, r0
 8008676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008678:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800867a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867c:	2b00      	cmp	r3, #0
 800867e:	d002      	beq.n	8008686 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008682:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008684:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008686:	bf00      	nop
 8008688:	3720      	adds	r7, #32
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
	...

08008690 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008698:	f001 fa20 	bl	8009adc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800869c:	4b2d      	ldr	r3, [pc, #180]	; (8008754 <prvAddNewTaskToReadyList+0xc4>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	3301      	adds	r3, #1
 80086a2:	4a2c      	ldr	r2, [pc, #176]	; (8008754 <prvAddNewTaskToReadyList+0xc4>)
 80086a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80086a6:	4b2c      	ldr	r3, [pc, #176]	; (8008758 <prvAddNewTaskToReadyList+0xc8>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d109      	bne.n	80086c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80086ae:	4a2a      	ldr	r2, [pc, #168]	; (8008758 <prvAddNewTaskToReadyList+0xc8>)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80086b4:	4b27      	ldr	r3, [pc, #156]	; (8008754 <prvAddNewTaskToReadyList+0xc4>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d110      	bne.n	80086de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80086bc:	f000 fc08 	bl	8008ed0 <prvInitialiseTaskLists>
 80086c0:	e00d      	b.n	80086de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80086c2:	4b26      	ldr	r3, [pc, #152]	; (800875c <prvAddNewTaskToReadyList+0xcc>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d109      	bne.n	80086de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80086ca:	4b23      	ldr	r3, [pc, #140]	; (8008758 <prvAddNewTaskToReadyList+0xc8>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d802      	bhi.n	80086de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80086d8:	4a1f      	ldr	r2, [pc, #124]	; (8008758 <prvAddNewTaskToReadyList+0xc8>)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80086de:	4b20      	ldr	r3, [pc, #128]	; (8008760 <prvAddNewTaskToReadyList+0xd0>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	3301      	adds	r3, #1
 80086e4:	4a1e      	ldr	r2, [pc, #120]	; (8008760 <prvAddNewTaskToReadyList+0xd0>)
 80086e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80086e8:	4b1d      	ldr	r3, [pc, #116]	; (8008760 <prvAddNewTaskToReadyList+0xd0>)
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086f4:	4b1b      	ldr	r3, [pc, #108]	; (8008764 <prvAddNewTaskToReadyList+0xd4>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d903      	bls.n	8008704 <prvAddNewTaskToReadyList+0x74>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008700:	4a18      	ldr	r2, [pc, #96]	; (8008764 <prvAddNewTaskToReadyList+0xd4>)
 8008702:	6013      	str	r3, [r2, #0]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008708:	4613      	mov	r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	4413      	add	r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	4a15      	ldr	r2, [pc, #84]	; (8008768 <prvAddNewTaskToReadyList+0xd8>)
 8008712:	441a      	add	r2, r3
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	3304      	adds	r3, #4
 8008718:	4619      	mov	r1, r3
 800871a:	4610      	mov	r0, r2
 800871c:	f7ff f92f 	bl	800797e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008720:	f001 fa0a 	bl	8009b38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008724:	4b0d      	ldr	r3, [pc, #52]	; (800875c <prvAddNewTaskToReadyList+0xcc>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00e      	beq.n	800874a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800872c:	4b0a      	ldr	r3, [pc, #40]	; (8008758 <prvAddNewTaskToReadyList+0xc8>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008736:	429a      	cmp	r2, r3
 8008738:	d207      	bcs.n	800874a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800873a:	4b0c      	ldr	r3, [pc, #48]	; (800876c <prvAddNewTaskToReadyList+0xdc>)
 800873c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008740:	601a      	str	r2, [r3, #0]
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800874a:	bf00      	nop
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	20000bc0 	.word	0x20000bc0
 8008758:	200006ec 	.word	0x200006ec
 800875c:	20000bcc 	.word	0x20000bcc
 8008760:	20000bdc 	.word	0x20000bdc
 8008764:	20000bc8 	.word	0x20000bc8
 8008768:	200006f0 	.word	0x200006f0
 800876c:	e000ed04 	.word	0xe000ed04

08008770 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008778:	2300      	movs	r3, #0
 800877a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d016      	beq.n	80087b0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008782:	4b13      	ldr	r3, [pc, #76]	; (80087d0 <vTaskDelay+0x60>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d009      	beq.n	800879e <vTaskDelay+0x2e>
 800878a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878e:	f383 8811 	msr	BASEPRI, r3
 8008792:	f3bf 8f6f 	isb	sy
 8008796:	f3bf 8f4f 	dsb	sy
 800879a:	60bb      	str	r3, [r7, #8]
 800879c:	e7fe      	b.n	800879c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800879e:	f000 f87f 	bl	80088a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80087a2:	2100      	movs	r1, #0
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 fcd7 	bl	8009158 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80087aa:	f000 f887 	bl	80088bc <xTaskResumeAll>
 80087ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d107      	bne.n	80087c6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80087b6:	4b07      	ldr	r3, [pc, #28]	; (80087d4 <vTaskDelay+0x64>)
 80087b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087bc:	601a      	str	r2, [r3, #0]
 80087be:	f3bf 8f4f 	dsb	sy
 80087c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087c6:	bf00      	nop
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	20000be8 	.word	0x20000be8
 80087d4:	e000ed04 	.word	0xe000ed04

080087d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b08a      	sub	sp, #40	; 0x28
 80087dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80087de:	2300      	movs	r3, #0
 80087e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80087e2:	2300      	movs	r3, #0
 80087e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80087e6:	463a      	mov	r2, r7
 80087e8:	1d39      	adds	r1, r7, #4
 80087ea:	f107 0308 	add.w	r3, r7, #8
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7ff f864 	bl	80078bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80087f4:	6839      	ldr	r1, [r7, #0]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	9202      	str	r2, [sp, #8]
 80087fc:	9301      	str	r3, [sp, #4]
 80087fe:	2300      	movs	r3, #0
 8008800:	9300      	str	r3, [sp, #0]
 8008802:	2300      	movs	r3, #0
 8008804:	460a      	mov	r2, r1
 8008806:	4920      	ldr	r1, [pc, #128]	; (8008888 <vTaskStartScheduler+0xb0>)
 8008808:	4820      	ldr	r0, [pc, #128]	; (800888c <vTaskStartScheduler+0xb4>)
 800880a:	f7ff fe13 	bl	8008434 <xTaskCreateStatic>
 800880e:	4602      	mov	r2, r0
 8008810:	4b1f      	ldr	r3, [pc, #124]	; (8008890 <vTaskStartScheduler+0xb8>)
 8008812:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008814:	4b1e      	ldr	r3, [pc, #120]	; (8008890 <vTaskStartScheduler+0xb8>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d002      	beq.n	8008822 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800881c:	2301      	movs	r3, #1
 800881e:	617b      	str	r3, [r7, #20]
 8008820:	e001      	b.n	8008826 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008822:	2300      	movs	r3, #0
 8008824:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	2b01      	cmp	r3, #1
 800882a:	d102      	bne.n	8008832 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800882c:	f000 fce8 	bl	8009200 <xTimerCreateTimerTask>
 8008830:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	2b01      	cmp	r3, #1
 8008836:	d115      	bne.n	8008864 <vTaskStartScheduler+0x8c>
 8008838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800883c:	f383 8811 	msr	BASEPRI, r3
 8008840:	f3bf 8f6f 	isb	sy
 8008844:	f3bf 8f4f 	dsb	sy
 8008848:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800884a:	4b12      	ldr	r3, [pc, #72]	; (8008894 <vTaskStartScheduler+0xbc>)
 800884c:	f04f 32ff 	mov.w	r2, #4294967295
 8008850:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008852:	4b11      	ldr	r3, [pc, #68]	; (8008898 <vTaskStartScheduler+0xc0>)
 8008854:	2201      	movs	r2, #1
 8008856:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008858:	4b10      	ldr	r3, [pc, #64]	; (800889c <vTaskStartScheduler+0xc4>)
 800885a:	2200      	movs	r2, #0
 800885c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800885e:	f001 f89f 	bl	80099a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008862:	e00d      	b.n	8008880 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800886a:	d109      	bne.n	8008880 <vTaskStartScheduler+0xa8>
 800886c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008870:	f383 8811 	msr	BASEPRI, r3
 8008874:	f3bf 8f6f 	isb	sy
 8008878:	f3bf 8f4f 	dsb	sy
 800887c:	60fb      	str	r3, [r7, #12]
 800887e:	e7fe      	b.n	800887e <vTaskStartScheduler+0xa6>
}
 8008880:	bf00      	nop
 8008882:	3718      	adds	r7, #24
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	0800a170 	.word	0x0800a170
 800888c:	08008ea1 	.word	0x08008ea1
 8008890:	20000be4 	.word	0x20000be4
 8008894:	20000be0 	.word	0x20000be0
 8008898:	20000bcc 	.word	0x20000bcc
 800889c:	20000bc4 	.word	0x20000bc4

080088a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80088a0:	b480      	push	{r7}
 80088a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80088a4:	4b04      	ldr	r3, [pc, #16]	; (80088b8 <vTaskSuspendAll+0x18>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	3301      	adds	r3, #1
 80088aa:	4a03      	ldr	r2, [pc, #12]	; (80088b8 <vTaskSuspendAll+0x18>)
 80088ac:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80088ae:	bf00      	nop
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr
 80088b8:	20000be8 	.word	0x20000be8

080088bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80088c2:	2300      	movs	r3, #0
 80088c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80088c6:	2300      	movs	r3, #0
 80088c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80088ca:	4b41      	ldr	r3, [pc, #260]	; (80089d0 <xTaskResumeAll+0x114>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d109      	bne.n	80088e6 <xTaskResumeAll+0x2a>
 80088d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d6:	f383 8811 	msr	BASEPRI, r3
 80088da:	f3bf 8f6f 	isb	sy
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	603b      	str	r3, [r7, #0]
 80088e4:	e7fe      	b.n	80088e4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80088e6:	f001 f8f9 	bl	8009adc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80088ea:	4b39      	ldr	r3, [pc, #228]	; (80089d0 <xTaskResumeAll+0x114>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	3b01      	subs	r3, #1
 80088f0:	4a37      	ldr	r2, [pc, #220]	; (80089d0 <xTaskResumeAll+0x114>)
 80088f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088f4:	4b36      	ldr	r3, [pc, #216]	; (80089d0 <xTaskResumeAll+0x114>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d162      	bne.n	80089c2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80088fc:	4b35      	ldr	r3, [pc, #212]	; (80089d4 <xTaskResumeAll+0x118>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d05e      	beq.n	80089c2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008904:	e02f      	b.n	8008966 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008906:	4b34      	ldr	r3, [pc, #208]	; (80089d8 <xTaskResumeAll+0x11c>)
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	3318      	adds	r3, #24
 8008912:	4618      	mov	r0, r3
 8008914:	f7ff f890 	bl	8007a38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	3304      	adds	r3, #4
 800891c:	4618      	mov	r0, r3
 800891e:	f7ff f88b 	bl	8007a38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008926:	4b2d      	ldr	r3, [pc, #180]	; (80089dc <xTaskResumeAll+0x120>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	429a      	cmp	r2, r3
 800892c:	d903      	bls.n	8008936 <xTaskResumeAll+0x7a>
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008932:	4a2a      	ldr	r2, [pc, #168]	; (80089dc <xTaskResumeAll+0x120>)
 8008934:	6013      	str	r3, [r2, #0]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800893a:	4613      	mov	r3, r2
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	4413      	add	r3, r2
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	4a27      	ldr	r2, [pc, #156]	; (80089e0 <xTaskResumeAll+0x124>)
 8008944:	441a      	add	r2, r3
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	3304      	adds	r3, #4
 800894a:	4619      	mov	r1, r3
 800894c:	4610      	mov	r0, r2
 800894e:	f7ff f816 	bl	800797e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008956:	4b23      	ldr	r3, [pc, #140]	; (80089e4 <xTaskResumeAll+0x128>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895c:	429a      	cmp	r2, r3
 800895e:	d302      	bcc.n	8008966 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008960:	4b21      	ldr	r3, [pc, #132]	; (80089e8 <xTaskResumeAll+0x12c>)
 8008962:	2201      	movs	r2, #1
 8008964:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008966:	4b1c      	ldr	r3, [pc, #112]	; (80089d8 <xTaskResumeAll+0x11c>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1cb      	bne.n	8008906 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d001      	beq.n	8008978 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008974:	f000 fb46 	bl	8009004 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008978:	4b1c      	ldr	r3, [pc, #112]	; (80089ec <xTaskResumeAll+0x130>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d010      	beq.n	80089a6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008984:	f000 f846 	bl	8008a14 <xTaskIncrementTick>
 8008988:	4603      	mov	r3, r0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d002      	beq.n	8008994 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800898e:	4b16      	ldr	r3, [pc, #88]	; (80089e8 <xTaskResumeAll+0x12c>)
 8008990:	2201      	movs	r2, #1
 8008992:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	3b01      	subs	r3, #1
 8008998:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d1f1      	bne.n	8008984 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80089a0:	4b12      	ldr	r3, [pc, #72]	; (80089ec <xTaskResumeAll+0x130>)
 80089a2:	2200      	movs	r2, #0
 80089a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80089a6:	4b10      	ldr	r3, [pc, #64]	; (80089e8 <xTaskResumeAll+0x12c>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d009      	beq.n	80089c2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80089ae:	2301      	movs	r3, #1
 80089b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80089b2:	4b0f      	ldr	r3, [pc, #60]	; (80089f0 <xTaskResumeAll+0x134>)
 80089b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089b8:	601a      	str	r2, [r3, #0]
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089c2:	f001 f8b9 	bl	8009b38 <vPortExitCritical>

	return xAlreadyYielded;
 80089c6:	68bb      	ldr	r3, [r7, #8]
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	20000be8 	.word	0x20000be8
 80089d4:	20000bc0 	.word	0x20000bc0
 80089d8:	20000b80 	.word	0x20000b80
 80089dc:	20000bc8 	.word	0x20000bc8
 80089e0:	200006f0 	.word	0x200006f0
 80089e4:	200006ec 	.word	0x200006ec
 80089e8:	20000bd4 	.word	0x20000bd4
 80089ec:	20000bd0 	.word	0x20000bd0
 80089f0:	e000ed04 	.word	0xe000ed04

080089f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80089fa:	4b05      	ldr	r3, [pc, #20]	; (8008a10 <xTaskGetTickCount+0x1c>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008a00:	687b      	ldr	r3, [r7, #4]
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	370c      	adds	r7, #12
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop
 8008a10:	20000bc4 	.word	0x20000bc4

08008a14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b086      	sub	sp, #24
 8008a18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a1e:	4b4e      	ldr	r3, [pc, #312]	; (8008b58 <xTaskIncrementTick+0x144>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f040 8088 	bne.w	8008b38 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a28:	4b4c      	ldr	r3, [pc, #304]	; (8008b5c <xTaskIncrementTick+0x148>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a30:	4a4a      	ldr	r2, [pc, #296]	; (8008b5c <xTaskIncrementTick+0x148>)
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d11f      	bne.n	8008a7c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a3c:	4b48      	ldr	r3, [pc, #288]	; (8008b60 <xTaskIncrementTick+0x14c>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d009      	beq.n	8008a5a <xTaskIncrementTick+0x46>
 8008a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4a:	f383 8811 	msr	BASEPRI, r3
 8008a4e:	f3bf 8f6f 	isb	sy
 8008a52:	f3bf 8f4f 	dsb	sy
 8008a56:	603b      	str	r3, [r7, #0]
 8008a58:	e7fe      	b.n	8008a58 <xTaskIncrementTick+0x44>
 8008a5a:	4b41      	ldr	r3, [pc, #260]	; (8008b60 <xTaskIncrementTick+0x14c>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	60fb      	str	r3, [r7, #12]
 8008a60:	4b40      	ldr	r3, [pc, #256]	; (8008b64 <xTaskIncrementTick+0x150>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a3e      	ldr	r2, [pc, #248]	; (8008b60 <xTaskIncrementTick+0x14c>)
 8008a66:	6013      	str	r3, [r2, #0]
 8008a68:	4a3e      	ldr	r2, [pc, #248]	; (8008b64 <xTaskIncrementTick+0x150>)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6013      	str	r3, [r2, #0]
 8008a6e:	4b3e      	ldr	r3, [pc, #248]	; (8008b68 <xTaskIncrementTick+0x154>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	3301      	adds	r3, #1
 8008a74:	4a3c      	ldr	r2, [pc, #240]	; (8008b68 <xTaskIncrementTick+0x154>)
 8008a76:	6013      	str	r3, [r2, #0]
 8008a78:	f000 fac4 	bl	8009004 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a7c:	4b3b      	ldr	r3, [pc, #236]	; (8008b6c <xTaskIncrementTick+0x158>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	693a      	ldr	r2, [r7, #16]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d349      	bcc.n	8008b1a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a86:	4b36      	ldr	r3, [pc, #216]	; (8008b60 <xTaskIncrementTick+0x14c>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d104      	bne.n	8008a9a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a90:	4b36      	ldr	r3, [pc, #216]	; (8008b6c <xTaskIncrementTick+0x158>)
 8008a92:	f04f 32ff 	mov.w	r2, #4294967295
 8008a96:	601a      	str	r2, [r3, #0]
					break;
 8008a98:	e03f      	b.n	8008b1a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a9a:	4b31      	ldr	r3, [pc, #196]	; (8008b60 <xTaskIncrementTick+0x14c>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	68db      	ldr	r3, [r3, #12]
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008aaa:	693a      	ldr	r2, [r7, #16]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d203      	bcs.n	8008aba <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008ab2:	4a2e      	ldr	r2, [pc, #184]	; (8008b6c <xTaskIncrementTick+0x158>)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008ab8:	e02f      	b.n	8008b1a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	3304      	adds	r3, #4
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7fe ffba 	bl	8007a38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d004      	beq.n	8008ad6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	3318      	adds	r3, #24
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7fe ffb1 	bl	8007a38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ada:	4b25      	ldr	r3, [pc, #148]	; (8008b70 <xTaskIncrementTick+0x15c>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d903      	bls.n	8008aea <xTaskIncrementTick+0xd6>
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae6:	4a22      	ldr	r2, [pc, #136]	; (8008b70 <xTaskIncrementTick+0x15c>)
 8008ae8:	6013      	str	r3, [r2, #0]
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aee:	4613      	mov	r3, r2
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	4413      	add	r3, r2
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	4a1f      	ldr	r2, [pc, #124]	; (8008b74 <xTaskIncrementTick+0x160>)
 8008af8:	441a      	add	r2, r3
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	3304      	adds	r3, #4
 8008afe:	4619      	mov	r1, r3
 8008b00:	4610      	mov	r0, r2
 8008b02:	f7fe ff3c 	bl	800797e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b0a:	4b1b      	ldr	r3, [pc, #108]	; (8008b78 <xTaskIncrementTick+0x164>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d3b8      	bcc.n	8008a86 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008b14:	2301      	movs	r3, #1
 8008b16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b18:	e7b5      	b.n	8008a86 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b1a:	4b17      	ldr	r3, [pc, #92]	; (8008b78 <xTaskIncrementTick+0x164>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b20:	4914      	ldr	r1, [pc, #80]	; (8008b74 <xTaskIncrementTick+0x160>)
 8008b22:	4613      	mov	r3, r2
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	4413      	add	r3, r2
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	440b      	add	r3, r1
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d907      	bls.n	8008b42 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8008b32:	2301      	movs	r3, #1
 8008b34:	617b      	str	r3, [r7, #20]
 8008b36:	e004      	b.n	8008b42 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008b38:	4b10      	ldr	r3, [pc, #64]	; (8008b7c <xTaskIncrementTick+0x168>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	4a0f      	ldr	r2, [pc, #60]	; (8008b7c <xTaskIncrementTick+0x168>)
 8008b40:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008b42:	4b0f      	ldr	r3, [pc, #60]	; (8008b80 <xTaskIncrementTick+0x16c>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d001      	beq.n	8008b4e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008b4e:	697b      	ldr	r3, [r7, #20]
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3718      	adds	r7, #24
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	20000be8 	.word	0x20000be8
 8008b5c:	20000bc4 	.word	0x20000bc4
 8008b60:	20000b78 	.word	0x20000b78
 8008b64:	20000b7c 	.word	0x20000b7c
 8008b68:	20000bd8 	.word	0x20000bd8
 8008b6c:	20000be0 	.word	0x20000be0
 8008b70:	20000bc8 	.word	0x20000bc8
 8008b74:	200006f0 	.word	0x200006f0
 8008b78:	200006ec 	.word	0x200006ec
 8008b7c:	20000bd0 	.word	0x20000bd0
 8008b80:	20000bd4 	.word	0x20000bd4

08008b84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b84:	b480      	push	{r7}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b8a:	4b27      	ldr	r3, [pc, #156]	; (8008c28 <vTaskSwitchContext+0xa4>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d003      	beq.n	8008b9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008b92:	4b26      	ldr	r3, [pc, #152]	; (8008c2c <vTaskSwitchContext+0xa8>)
 8008b94:	2201      	movs	r2, #1
 8008b96:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008b98:	e040      	b.n	8008c1c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8008b9a:	4b24      	ldr	r3, [pc, #144]	; (8008c2c <vTaskSwitchContext+0xa8>)
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ba0:	4b23      	ldr	r3, [pc, #140]	; (8008c30 <vTaskSwitchContext+0xac>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	60fb      	str	r3, [r7, #12]
 8008ba6:	e00f      	b.n	8008bc8 <vTaskSwitchContext+0x44>
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d109      	bne.n	8008bc2 <vTaskSwitchContext+0x3e>
 8008bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb2:	f383 8811 	msr	BASEPRI, r3
 8008bb6:	f3bf 8f6f 	isb	sy
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	607b      	str	r3, [r7, #4]
 8008bc0:	e7fe      	b.n	8008bc0 <vTaskSwitchContext+0x3c>
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	3b01      	subs	r3, #1
 8008bc6:	60fb      	str	r3, [r7, #12]
 8008bc8:	491a      	ldr	r1, [pc, #104]	; (8008c34 <vTaskSwitchContext+0xb0>)
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	4613      	mov	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4413      	add	r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	440b      	add	r3, r1
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d0e5      	beq.n	8008ba8 <vTaskSwitchContext+0x24>
 8008bdc:	68fa      	ldr	r2, [r7, #12]
 8008bde:	4613      	mov	r3, r2
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	4413      	add	r3, r2
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	4a13      	ldr	r2, [pc, #76]	; (8008c34 <vTaskSwitchContext+0xb0>)
 8008be8:	4413      	add	r3, r2
 8008bea:	60bb      	str	r3, [r7, #8]
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	685a      	ldr	r2, [r3, #4]
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	605a      	str	r2, [r3, #4]
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	685a      	ldr	r2, [r3, #4]
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	3308      	adds	r3, #8
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d104      	bne.n	8008c0c <vTaskSwitchContext+0x88>
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	685a      	ldr	r2, [r3, #4]
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	605a      	str	r2, [r3, #4]
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	4a09      	ldr	r2, [pc, #36]	; (8008c38 <vTaskSwitchContext+0xb4>)
 8008c14:	6013      	str	r3, [r2, #0]
 8008c16:	4a06      	ldr	r2, [pc, #24]	; (8008c30 <vTaskSwitchContext+0xac>)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6013      	str	r3, [r2, #0]
}
 8008c1c:	bf00      	nop
 8008c1e:	3714      	adds	r7, #20
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr
 8008c28:	20000be8 	.word	0x20000be8
 8008c2c:	20000bd4 	.word	0x20000bd4
 8008c30:	20000bc8 	.word	0x20000bc8
 8008c34:	200006f0 	.word	0x200006f0
 8008c38:	200006ec 	.word	0x200006ec

08008c3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d109      	bne.n	8008c60 <vTaskPlaceOnEventList+0x24>
 8008c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c50:	f383 8811 	msr	BASEPRI, r3
 8008c54:	f3bf 8f6f 	isb	sy
 8008c58:	f3bf 8f4f 	dsb	sy
 8008c5c:	60fb      	str	r3, [r7, #12]
 8008c5e:	e7fe      	b.n	8008c5e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c60:	4b07      	ldr	r3, [pc, #28]	; (8008c80 <vTaskPlaceOnEventList+0x44>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	3318      	adds	r3, #24
 8008c66:	4619      	mov	r1, r3
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7fe feac 	bl	80079c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c6e:	2101      	movs	r1, #1
 8008c70:	6838      	ldr	r0, [r7, #0]
 8008c72:	f000 fa71 	bl	8009158 <prvAddCurrentTaskToDelayedList>
}
 8008c76:	bf00      	nop
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	200006ec 	.word	0x200006ec

08008c84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b086      	sub	sp, #24
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	60b9      	str	r1, [r7, #8]
 8008c8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d109      	bne.n	8008caa <vTaskPlaceOnEventListRestricted+0x26>
 8008c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9a:	f383 8811 	msr	BASEPRI, r3
 8008c9e:	f3bf 8f6f 	isb	sy
 8008ca2:	f3bf 8f4f 	dsb	sy
 8008ca6:	617b      	str	r3, [r7, #20]
 8008ca8:	e7fe      	b.n	8008ca8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008caa:	4b0a      	ldr	r3, [pc, #40]	; (8008cd4 <vTaskPlaceOnEventListRestricted+0x50>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	3318      	adds	r3, #24
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	f7fe fe63 	bl	800797e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d002      	beq.n	8008cc4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8008cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8008cc2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008cc4:	6879      	ldr	r1, [r7, #4]
 8008cc6:	68b8      	ldr	r0, [r7, #8]
 8008cc8:	f000 fa46 	bl	8009158 <prvAddCurrentTaskToDelayedList>
	}
 8008ccc:	bf00      	nop
 8008cce:	3718      	adds	r7, #24
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	200006ec 	.word	0x200006ec

08008cd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b086      	sub	sp, #24
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	68db      	ldr	r3, [r3, #12]
 8008ce6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d109      	bne.n	8008d02 <xTaskRemoveFromEventList+0x2a>
 8008cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf2:	f383 8811 	msr	BASEPRI, r3
 8008cf6:	f3bf 8f6f 	isb	sy
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	60fb      	str	r3, [r7, #12]
 8008d00:	e7fe      	b.n	8008d00 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	3318      	adds	r3, #24
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7fe fe96 	bl	8007a38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d0c:	4b1d      	ldr	r3, [pc, #116]	; (8008d84 <xTaskRemoveFromEventList+0xac>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d11d      	bne.n	8008d50 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	3304      	adds	r3, #4
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7fe fe8d 	bl	8007a38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d22:	4b19      	ldr	r3, [pc, #100]	; (8008d88 <xTaskRemoveFromEventList+0xb0>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d903      	bls.n	8008d32 <xTaskRemoveFromEventList+0x5a>
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2e:	4a16      	ldr	r2, [pc, #88]	; (8008d88 <xTaskRemoveFromEventList+0xb0>)
 8008d30:	6013      	str	r3, [r2, #0]
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d36:	4613      	mov	r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	4413      	add	r3, r2
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	4a13      	ldr	r2, [pc, #76]	; (8008d8c <xTaskRemoveFromEventList+0xb4>)
 8008d40:	441a      	add	r2, r3
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	3304      	adds	r3, #4
 8008d46:	4619      	mov	r1, r3
 8008d48:	4610      	mov	r0, r2
 8008d4a:	f7fe fe18 	bl	800797e <vListInsertEnd>
 8008d4e:	e005      	b.n	8008d5c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	3318      	adds	r3, #24
 8008d54:	4619      	mov	r1, r3
 8008d56:	480e      	ldr	r0, [pc, #56]	; (8008d90 <xTaskRemoveFromEventList+0xb8>)
 8008d58:	f7fe fe11 	bl	800797e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d60:	4b0c      	ldr	r3, [pc, #48]	; (8008d94 <xTaskRemoveFromEventList+0xbc>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d905      	bls.n	8008d76 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008d6e:	4b0a      	ldr	r3, [pc, #40]	; (8008d98 <xTaskRemoveFromEventList+0xc0>)
 8008d70:	2201      	movs	r2, #1
 8008d72:	601a      	str	r2, [r3, #0]
 8008d74:	e001      	b.n	8008d7a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008d76:	2300      	movs	r3, #0
 8008d78:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008d7a:	697b      	ldr	r3, [r7, #20]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3718      	adds	r7, #24
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	20000be8 	.word	0x20000be8
 8008d88:	20000bc8 	.word	0x20000bc8
 8008d8c:	200006f0 	.word	0x200006f0
 8008d90:	20000b80 	.word	0x20000b80
 8008d94:	200006ec 	.word	0x200006ec
 8008d98:	20000bd4 	.word	0x20000bd4

08008d9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008da4:	4b06      	ldr	r3, [pc, #24]	; (8008dc0 <vTaskInternalSetTimeOutState+0x24>)
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008dac:	4b05      	ldr	r3, [pc, #20]	; (8008dc4 <vTaskInternalSetTimeOutState+0x28>)
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	605a      	str	r2, [r3, #4]
}
 8008db4:	bf00      	nop
 8008db6:	370c      	adds	r7, #12
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr
 8008dc0:	20000bd8 	.word	0x20000bd8
 8008dc4:	20000bc4 	.word	0x20000bc4

08008dc8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b088      	sub	sp, #32
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d109      	bne.n	8008dec <xTaskCheckForTimeOut+0x24>
 8008dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ddc:	f383 8811 	msr	BASEPRI, r3
 8008de0:	f3bf 8f6f 	isb	sy
 8008de4:	f3bf 8f4f 	dsb	sy
 8008de8:	613b      	str	r3, [r7, #16]
 8008dea:	e7fe      	b.n	8008dea <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d109      	bne.n	8008e06 <xTaskCheckForTimeOut+0x3e>
 8008df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df6:	f383 8811 	msr	BASEPRI, r3
 8008dfa:	f3bf 8f6f 	isb	sy
 8008dfe:	f3bf 8f4f 	dsb	sy
 8008e02:	60fb      	str	r3, [r7, #12]
 8008e04:	e7fe      	b.n	8008e04 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008e06:	f000 fe69 	bl	8009adc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e0a:	4b1d      	ldr	r3, [pc, #116]	; (8008e80 <xTaskCheckForTimeOut+0xb8>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	69ba      	ldr	r2, [r7, #24]
 8008e16:	1ad3      	subs	r3, r2, r3
 8008e18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e22:	d102      	bne.n	8008e2a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e24:	2300      	movs	r3, #0
 8008e26:	61fb      	str	r3, [r7, #28]
 8008e28:	e023      	b.n	8008e72 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	4b15      	ldr	r3, [pc, #84]	; (8008e84 <xTaskCheckForTimeOut+0xbc>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d007      	beq.n	8008e46 <xTaskCheckForTimeOut+0x7e>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	69ba      	ldr	r2, [r7, #24]
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d302      	bcc.n	8008e46 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e40:	2301      	movs	r3, #1
 8008e42:	61fb      	str	r3, [r7, #28]
 8008e44:	e015      	b.n	8008e72 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	697a      	ldr	r2, [r7, #20]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d20b      	bcs.n	8008e68 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	1ad2      	subs	r2, r2, r3
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f7ff ff9d 	bl	8008d9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008e62:	2300      	movs	r3, #0
 8008e64:	61fb      	str	r3, [r7, #28]
 8008e66:	e004      	b.n	8008e72 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008e72:	f000 fe61 	bl	8009b38 <vPortExitCritical>

	return xReturn;
 8008e76:	69fb      	ldr	r3, [r7, #28]
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3720      	adds	r7, #32
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	20000bc4 	.word	0x20000bc4
 8008e84:	20000bd8 	.word	0x20000bd8

08008e88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008e88:	b480      	push	{r7}
 8008e8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008e8c:	4b03      	ldr	r3, [pc, #12]	; (8008e9c <vTaskMissedYield+0x14>)
 8008e8e:	2201      	movs	r2, #1
 8008e90:	601a      	str	r2, [r3, #0]
}
 8008e92:	bf00      	nop
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr
 8008e9c:	20000bd4 	.word	0x20000bd4

08008ea0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008ea8:	f000 f852 	bl	8008f50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008eac:	4b06      	ldr	r3, [pc, #24]	; (8008ec8 <prvIdleTask+0x28>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d9f9      	bls.n	8008ea8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008eb4:	4b05      	ldr	r3, [pc, #20]	; (8008ecc <prvIdleTask+0x2c>)
 8008eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eba:	601a      	str	r2, [r3, #0]
 8008ebc:	f3bf 8f4f 	dsb	sy
 8008ec0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008ec4:	e7f0      	b.n	8008ea8 <prvIdleTask+0x8>
 8008ec6:	bf00      	nop
 8008ec8:	200006f0 	.word	0x200006f0
 8008ecc:	e000ed04 	.word	0xe000ed04

08008ed0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	607b      	str	r3, [r7, #4]
 8008eda:	e00c      	b.n	8008ef6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	4613      	mov	r3, r2
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	4413      	add	r3, r2
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	4a12      	ldr	r2, [pc, #72]	; (8008f30 <prvInitialiseTaskLists+0x60>)
 8008ee8:	4413      	add	r3, r2
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7fe fd1a 	bl	8007924 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	607b      	str	r3, [r7, #4]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2b37      	cmp	r3, #55	; 0x37
 8008efa:	d9ef      	bls.n	8008edc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008efc:	480d      	ldr	r0, [pc, #52]	; (8008f34 <prvInitialiseTaskLists+0x64>)
 8008efe:	f7fe fd11 	bl	8007924 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f02:	480d      	ldr	r0, [pc, #52]	; (8008f38 <prvInitialiseTaskLists+0x68>)
 8008f04:	f7fe fd0e 	bl	8007924 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f08:	480c      	ldr	r0, [pc, #48]	; (8008f3c <prvInitialiseTaskLists+0x6c>)
 8008f0a:	f7fe fd0b 	bl	8007924 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008f0e:	480c      	ldr	r0, [pc, #48]	; (8008f40 <prvInitialiseTaskLists+0x70>)
 8008f10:	f7fe fd08 	bl	8007924 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f14:	480b      	ldr	r0, [pc, #44]	; (8008f44 <prvInitialiseTaskLists+0x74>)
 8008f16:	f7fe fd05 	bl	8007924 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f1a:	4b0b      	ldr	r3, [pc, #44]	; (8008f48 <prvInitialiseTaskLists+0x78>)
 8008f1c:	4a05      	ldr	r2, [pc, #20]	; (8008f34 <prvInitialiseTaskLists+0x64>)
 8008f1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f20:	4b0a      	ldr	r3, [pc, #40]	; (8008f4c <prvInitialiseTaskLists+0x7c>)
 8008f22:	4a05      	ldr	r2, [pc, #20]	; (8008f38 <prvInitialiseTaskLists+0x68>)
 8008f24:	601a      	str	r2, [r3, #0]
}
 8008f26:	bf00      	nop
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	200006f0 	.word	0x200006f0
 8008f34:	20000b50 	.word	0x20000b50
 8008f38:	20000b64 	.word	0x20000b64
 8008f3c:	20000b80 	.word	0x20000b80
 8008f40:	20000b94 	.word	0x20000b94
 8008f44:	20000bac 	.word	0x20000bac
 8008f48:	20000b78 	.word	0x20000b78
 8008f4c:	20000b7c 	.word	0x20000b7c

08008f50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f56:	e019      	b.n	8008f8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f58:	f000 fdc0 	bl	8009adc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f5c:	4b0f      	ldr	r3, [pc, #60]	; (8008f9c <prvCheckTasksWaitingTermination+0x4c>)
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	3304      	adds	r3, #4
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7fe fd65 	bl	8007a38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f6e:	4b0c      	ldr	r3, [pc, #48]	; (8008fa0 <prvCheckTasksWaitingTermination+0x50>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	3b01      	subs	r3, #1
 8008f74:	4a0a      	ldr	r2, [pc, #40]	; (8008fa0 <prvCheckTasksWaitingTermination+0x50>)
 8008f76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f78:	4b0a      	ldr	r3, [pc, #40]	; (8008fa4 <prvCheckTasksWaitingTermination+0x54>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	4a09      	ldr	r2, [pc, #36]	; (8008fa4 <prvCheckTasksWaitingTermination+0x54>)
 8008f80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f82:	f000 fdd9 	bl	8009b38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 f80e 	bl	8008fa8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f8c:	4b05      	ldr	r3, [pc, #20]	; (8008fa4 <prvCheckTasksWaitingTermination+0x54>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d1e1      	bne.n	8008f58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f94:	bf00      	nop
 8008f96:	3708      	adds	r7, #8
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	20000b94 	.word	0x20000b94
 8008fa0:	20000bc0 	.word	0x20000bc0
 8008fa4:	20000ba8 	.word	0x20000ba8

08008fa8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d108      	bne.n	8008fcc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f000 ff68 	bl	8009e94 <vPortFree>
				vPortFree( pxTCB );
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 ff65 	bl	8009e94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008fca:	e017      	b.n	8008ffc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d103      	bne.n	8008fde <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 ff5c 	bl	8009e94 <vPortFree>
	}
 8008fdc:	e00e      	b.n	8008ffc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d009      	beq.n	8008ffc <prvDeleteTCB+0x54>
 8008fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fec:	f383 8811 	msr	BASEPRI, r3
 8008ff0:	f3bf 8f6f 	isb	sy
 8008ff4:	f3bf 8f4f 	dsb	sy
 8008ff8:	60fb      	str	r3, [r7, #12]
 8008ffa:	e7fe      	b.n	8008ffa <prvDeleteTCB+0x52>
	}
 8008ffc:	bf00      	nop
 8008ffe:	3710      	adds	r7, #16
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800900a:	4b0c      	ldr	r3, [pc, #48]	; (800903c <prvResetNextTaskUnblockTime+0x38>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d104      	bne.n	800901e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009014:	4b0a      	ldr	r3, [pc, #40]	; (8009040 <prvResetNextTaskUnblockTime+0x3c>)
 8009016:	f04f 32ff 	mov.w	r2, #4294967295
 800901a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800901c:	e008      	b.n	8009030 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800901e:	4b07      	ldr	r3, [pc, #28]	; (800903c <prvResetNextTaskUnblockTime+0x38>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	4a04      	ldr	r2, [pc, #16]	; (8009040 <prvResetNextTaskUnblockTime+0x3c>)
 800902e:	6013      	str	r3, [r2, #0]
}
 8009030:	bf00      	nop
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr
 800903c:	20000b78 	.word	0x20000b78
 8009040:	20000be0 	.word	0x20000be0

08009044 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800904a:	4b0b      	ldr	r3, [pc, #44]	; (8009078 <xTaskGetSchedulerState+0x34>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d102      	bne.n	8009058 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009052:	2301      	movs	r3, #1
 8009054:	607b      	str	r3, [r7, #4]
 8009056:	e008      	b.n	800906a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009058:	4b08      	ldr	r3, [pc, #32]	; (800907c <xTaskGetSchedulerState+0x38>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d102      	bne.n	8009066 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009060:	2302      	movs	r3, #2
 8009062:	607b      	str	r3, [r7, #4]
 8009064:	e001      	b.n	800906a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009066:	2300      	movs	r3, #0
 8009068:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800906a:	687b      	ldr	r3, [r7, #4]
	}
 800906c:	4618      	mov	r0, r3
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr
 8009078:	20000bcc 	.word	0x20000bcc
 800907c:	20000be8 	.word	0x20000be8

08009080 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009080:	b580      	push	{r7, lr}
 8009082:	b086      	sub	sp, #24
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800908c:	2300      	movs	r3, #0
 800908e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d054      	beq.n	8009140 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009096:	4b2d      	ldr	r3, [pc, #180]	; (800914c <xTaskPriorityDisinherit+0xcc>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	693a      	ldr	r2, [r7, #16]
 800909c:	429a      	cmp	r2, r3
 800909e:	d009      	beq.n	80090b4 <xTaskPriorityDisinherit+0x34>
 80090a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a4:	f383 8811 	msr	BASEPRI, r3
 80090a8:	f3bf 8f6f 	isb	sy
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	60fb      	str	r3, [r7, #12]
 80090b2:	e7fe      	b.n	80090b2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d109      	bne.n	80090d0 <xTaskPriorityDisinherit+0x50>
 80090bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c0:	f383 8811 	msr	BASEPRI, r3
 80090c4:	f3bf 8f6f 	isb	sy
 80090c8:	f3bf 8f4f 	dsb	sy
 80090cc:	60bb      	str	r3, [r7, #8]
 80090ce:	e7fe      	b.n	80090ce <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090d4:	1e5a      	subs	r2, r3, #1
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d02c      	beq.n	8009140 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d128      	bne.n	8009140 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	3304      	adds	r3, #4
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7fe fca0 	bl	8007a38 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009104:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009110:	4b0f      	ldr	r3, [pc, #60]	; (8009150 <xTaskPriorityDisinherit+0xd0>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	429a      	cmp	r2, r3
 8009116:	d903      	bls.n	8009120 <xTaskPriorityDisinherit+0xa0>
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800911c:	4a0c      	ldr	r2, [pc, #48]	; (8009150 <xTaskPriorityDisinherit+0xd0>)
 800911e:	6013      	str	r3, [r2, #0]
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009124:	4613      	mov	r3, r2
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	4413      	add	r3, r2
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	4a09      	ldr	r2, [pc, #36]	; (8009154 <xTaskPriorityDisinherit+0xd4>)
 800912e:	441a      	add	r2, r3
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	3304      	adds	r3, #4
 8009134:	4619      	mov	r1, r3
 8009136:	4610      	mov	r0, r2
 8009138:	f7fe fc21 	bl	800797e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800913c:	2301      	movs	r3, #1
 800913e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009140:	697b      	ldr	r3, [r7, #20]
	}
 8009142:	4618      	mov	r0, r3
 8009144:	3718      	adds	r7, #24
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	200006ec 	.word	0x200006ec
 8009150:	20000bc8 	.word	0x20000bc8
 8009154:	200006f0 	.word	0x200006f0

08009158 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009162:	4b21      	ldr	r3, [pc, #132]	; (80091e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009168:	4b20      	ldr	r3, [pc, #128]	; (80091ec <prvAddCurrentTaskToDelayedList+0x94>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	3304      	adds	r3, #4
 800916e:	4618      	mov	r0, r3
 8009170:	f7fe fc62 	bl	8007a38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800917a:	d10a      	bne.n	8009192 <prvAddCurrentTaskToDelayedList+0x3a>
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d007      	beq.n	8009192 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009182:	4b1a      	ldr	r3, [pc, #104]	; (80091ec <prvAddCurrentTaskToDelayedList+0x94>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	3304      	adds	r3, #4
 8009188:	4619      	mov	r1, r3
 800918a:	4819      	ldr	r0, [pc, #100]	; (80091f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800918c:	f7fe fbf7 	bl	800797e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009190:	e026      	b.n	80091e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009192:	68fa      	ldr	r2, [r7, #12]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	4413      	add	r3, r2
 8009198:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800919a:	4b14      	ldr	r3, [pc, #80]	; (80091ec <prvAddCurrentTaskToDelayedList+0x94>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	68ba      	ldr	r2, [r7, #8]
 80091a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80091a2:	68ba      	ldr	r2, [r7, #8]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d209      	bcs.n	80091be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091aa:	4b12      	ldr	r3, [pc, #72]	; (80091f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	4b0f      	ldr	r3, [pc, #60]	; (80091ec <prvAddCurrentTaskToDelayedList+0x94>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	3304      	adds	r3, #4
 80091b4:	4619      	mov	r1, r3
 80091b6:	4610      	mov	r0, r2
 80091b8:	f7fe fc05 	bl	80079c6 <vListInsert>
}
 80091bc:	e010      	b.n	80091e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091be:	4b0e      	ldr	r3, [pc, #56]	; (80091f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	4b0a      	ldr	r3, [pc, #40]	; (80091ec <prvAddCurrentTaskToDelayedList+0x94>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	3304      	adds	r3, #4
 80091c8:	4619      	mov	r1, r3
 80091ca:	4610      	mov	r0, r2
 80091cc:	f7fe fbfb 	bl	80079c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80091d0:	4b0a      	ldr	r3, [pc, #40]	; (80091fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68ba      	ldr	r2, [r7, #8]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d202      	bcs.n	80091e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80091da:	4a08      	ldr	r2, [pc, #32]	; (80091fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	6013      	str	r3, [r2, #0]
}
 80091e0:	bf00      	nop
 80091e2:	3710      	adds	r7, #16
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}
 80091e8:	20000bc4 	.word	0x20000bc4
 80091ec:	200006ec 	.word	0x200006ec
 80091f0:	20000bac 	.word	0x20000bac
 80091f4:	20000b7c 	.word	0x20000b7c
 80091f8:	20000b78 	.word	0x20000b78
 80091fc:	20000be0 	.word	0x20000be0

08009200 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b08a      	sub	sp, #40	; 0x28
 8009204:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009206:	2300      	movs	r3, #0
 8009208:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800920a:	f000 faff 	bl	800980c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800920e:	4b1c      	ldr	r3, [pc, #112]	; (8009280 <xTimerCreateTimerTask+0x80>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d021      	beq.n	800925a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009216:	2300      	movs	r3, #0
 8009218:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800921a:	2300      	movs	r3, #0
 800921c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800921e:	1d3a      	adds	r2, r7, #4
 8009220:	f107 0108 	add.w	r1, r7, #8
 8009224:	f107 030c 	add.w	r3, r7, #12
 8009228:	4618      	mov	r0, r3
 800922a:	f7fe fb61 	bl	80078f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800922e:	6879      	ldr	r1, [r7, #4]
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	68fa      	ldr	r2, [r7, #12]
 8009234:	9202      	str	r2, [sp, #8]
 8009236:	9301      	str	r3, [sp, #4]
 8009238:	2302      	movs	r3, #2
 800923a:	9300      	str	r3, [sp, #0]
 800923c:	2300      	movs	r3, #0
 800923e:	460a      	mov	r2, r1
 8009240:	4910      	ldr	r1, [pc, #64]	; (8009284 <xTimerCreateTimerTask+0x84>)
 8009242:	4811      	ldr	r0, [pc, #68]	; (8009288 <xTimerCreateTimerTask+0x88>)
 8009244:	f7ff f8f6 	bl	8008434 <xTaskCreateStatic>
 8009248:	4602      	mov	r2, r0
 800924a:	4b10      	ldr	r3, [pc, #64]	; (800928c <xTimerCreateTimerTask+0x8c>)
 800924c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800924e:	4b0f      	ldr	r3, [pc, #60]	; (800928c <xTimerCreateTimerTask+0x8c>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d001      	beq.n	800925a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009256:	2301      	movs	r3, #1
 8009258:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d109      	bne.n	8009274 <xTimerCreateTimerTask+0x74>
 8009260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	613b      	str	r3, [r7, #16]
 8009272:	e7fe      	b.n	8009272 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8009274:	697b      	ldr	r3, [r7, #20]
}
 8009276:	4618      	mov	r0, r3
 8009278:	3718      	adds	r7, #24
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	20000c1c 	.word	0x20000c1c
 8009284:	0800a178 	.word	0x0800a178
 8009288:	080093c1 	.word	0x080093c1
 800928c:	20000c20 	.word	0x20000c20

08009290 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b08a      	sub	sp, #40	; 0x28
 8009294:	af00      	add	r7, sp, #0
 8009296:	60f8      	str	r0, [r7, #12]
 8009298:	60b9      	str	r1, [r7, #8]
 800929a:	607a      	str	r2, [r7, #4]
 800929c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800929e:	2300      	movs	r3, #0
 80092a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d109      	bne.n	80092bc <xTimerGenericCommand+0x2c>
 80092a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ac:	f383 8811 	msr	BASEPRI, r3
 80092b0:	f3bf 8f6f 	isb	sy
 80092b4:	f3bf 8f4f 	dsb	sy
 80092b8:	623b      	str	r3, [r7, #32]
 80092ba:	e7fe      	b.n	80092ba <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80092bc:	4b19      	ldr	r3, [pc, #100]	; (8009324 <xTimerGenericCommand+0x94>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d02a      	beq.n	800931a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	2b05      	cmp	r3, #5
 80092d4:	dc18      	bgt.n	8009308 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80092d6:	f7ff feb5 	bl	8009044 <xTaskGetSchedulerState>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b02      	cmp	r3, #2
 80092de:	d109      	bne.n	80092f4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80092e0:	4b10      	ldr	r3, [pc, #64]	; (8009324 <xTimerGenericCommand+0x94>)
 80092e2:	6818      	ldr	r0, [r3, #0]
 80092e4:	f107 0110 	add.w	r1, r7, #16
 80092e8:	2300      	movs	r3, #0
 80092ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092ec:	f7fe fccc 	bl	8007c88 <xQueueGenericSend>
 80092f0:	6278      	str	r0, [r7, #36]	; 0x24
 80092f2:	e012      	b.n	800931a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80092f4:	4b0b      	ldr	r3, [pc, #44]	; (8009324 <xTimerGenericCommand+0x94>)
 80092f6:	6818      	ldr	r0, [r3, #0]
 80092f8:	f107 0110 	add.w	r1, r7, #16
 80092fc:	2300      	movs	r3, #0
 80092fe:	2200      	movs	r2, #0
 8009300:	f7fe fcc2 	bl	8007c88 <xQueueGenericSend>
 8009304:	6278      	str	r0, [r7, #36]	; 0x24
 8009306:	e008      	b.n	800931a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009308:	4b06      	ldr	r3, [pc, #24]	; (8009324 <xTimerGenericCommand+0x94>)
 800930a:	6818      	ldr	r0, [r3, #0]
 800930c:	f107 0110 	add.w	r1, r7, #16
 8009310:	2300      	movs	r3, #0
 8009312:	683a      	ldr	r2, [r7, #0]
 8009314:	f7fe fdb2 	bl	8007e7c <xQueueGenericSendFromISR>
 8009318:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800931a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800931c:	4618      	mov	r0, r3
 800931e:	3728      	adds	r7, #40	; 0x28
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	20000c1c 	.word	0x20000c1c

08009328 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b088      	sub	sp, #32
 800932c:	af02      	add	r7, sp, #8
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009332:	4b22      	ldr	r3, [pc, #136]	; (80093bc <prvProcessExpiredTimer+0x94>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	3304      	adds	r3, #4
 8009340:	4618      	mov	r0, r3
 8009342:	f7fe fb79 	bl	8007a38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800934c:	f003 0304 	and.w	r3, r3, #4
 8009350:	2b00      	cmp	r3, #0
 8009352:	d021      	beq.n	8009398 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	699a      	ldr	r2, [r3, #24]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	18d1      	adds	r1, r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	6978      	ldr	r0, [r7, #20]
 8009362:	f000 f8d1 	bl	8009508 <prvInsertTimerInActiveList>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d01e      	beq.n	80093aa <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800936c:	2300      	movs	r3, #0
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	2300      	movs	r3, #0
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	2100      	movs	r1, #0
 8009376:	6978      	ldr	r0, [r7, #20]
 8009378:	f7ff ff8a 	bl	8009290 <xTimerGenericCommand>
 800937c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d112      	bne.n	80093aa <prvProcessExpiredTimer+0x82>
 8009384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009388:	f383 8811 	msr	BASEPRI, r3
 800938c:	f3bf 8f6f 	isb	sy
 8009390:	f3bf 8f4f 	dsb	sy
 8009394:	60fb      	str	r3, [r7, #12]
 8009396:	e7fe      	b.n	8009396 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800939e:	f023 0301 	bic.w	r3, r3, #1
 80093a2:	b2da      	uxtb	r2, r3
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	6a1b      	ldr	r3, [r3, #32]
 80093ae:	6978      	ldr	r0, [r7, #20]
 80093b0:	4798      	blx	r3
}
 80093b2:	bf00      	nop
 80093b4:	3718      	adds	r7, #24
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	20000c14 	.word	0x20000c14

080093c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093c8:	f107 0308 	add.w	r3, r7, #8
 80093cc:	4618      	mov	r0, r3
 80093ce:	f000 f857 	bl	8009480 <prvGetNextExpireTime>
 80093d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	4619      	mov	r1, r3
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	f000 f803 	bl	80093e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80093de:	f000 f8d5 	bl	800958c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093e2:	e7f1      	b.n	80093c8 <prvTimerTask+0x8>

080093e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80093ee:	f7ff fa57 	bl	80088a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80093f2:	f107 0308 	add.w	r3, r7, #8
 80093f6:	4618      	mov	r0, r3
 80093f8:	f000 f866 	bl	80094c8 <prvSampleTimeNow>
 80093fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d130      	bne.n	8009466 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d10a      	bne.n	8009420 <prvProcessTimerOrBlockTask+0x3c>
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	429a      	cmp	r2, r3
 8009410:	d806      	bhi.n	8009420 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009412:	f7ff fa53 	bl	80088bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009416:	68f9      	ldr	r1, [r7, #12]
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f7ff ff85 	bl	8009328 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800941e:	e024      	b.n	800946a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d008      	beq.n	8009438 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009426:	4b13      	ldr	r3, [pc, #76]	; (8009474 <prvProcessTimerOrBlockTask+0x90>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d101      	bne.n	8009434 <prvProcessTimerOrBlockTask+0x50>
 8009430:	2301      	movs	r3, #1
 8009432:	e000      	b.n	8009436 <prvProcessTimerOrBlockTask+0x52>
 8009434:	2300      	movs	r3, #0
 8009436:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009438:	4b0f      	ldr	r3, [pc, #60]	; (8009478 <prvProcessTimerOrBlockTask+0x94>)
 800943a:	6818      	ldr	r0, [r3, #0]
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	683a      	ldr	r2, [r7, #0]
 8009444:	4619      	mov	r1, r3
 8009446:	f7fe ffc1 	bl	80083cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800944a:	f7ff fa37 	bl	80088bc <xTaskResumeAll>
 800944e:	4603      	mov	r3, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d10a      	bne.n	800946a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009454:	4b09      	ldr	r3, [pc, #36]	; (800947c <prvProcessTimerOrBlockTask+0x98>)
 8009456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800945a:	601a      	str	r2, [r3, #0]
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	f3bf 8f6f 	isb	sy
}
 8009464:	e001      	b.n	800946a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009466:	f7ff fa29 	bl	80088bc <xTaskResumeAll>
}
 800946a:	bf00      	nop
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	20000c18 	.word	0x20000c18
 8009478:	20000c1c 	.word	0x20000c1c
 800947c:	e000ed04 	.word	0xe000ed04

08009480 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009480:	b480      	push	{r7}
 8009482:	b085      	sub	sp, #20
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009488:	4b0e      	ldr	r3, [pc, #56]	; (80094c4 <prvGetNextExpireTime+0x44>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d101      	bne.n	8009496 <prvGetNextExpireTime+0x16>
 8009492:	2201      	movs	r2, #1
 8009494:	e000      	b.n	8009498 <prvGetNextExpireTime+0x18>
 8009496:	2200      	movs	r2, #0
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d105      	bne.n	80094b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094a4:	4b07      	ldr	r3, [pc, #28]	; (80094c4 <prvGetNextExpireTime+0x44>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	60fb      	str	r3, [r7, #12]
 80094ae:	e001      	b.n	80094b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80094b0:	2300      	movs	r3, #0
 80094b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80094b4:	68fb      	ldr	r3, [r7, #12]
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3714      	adds	r7, #20
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	20000c14 	.word	0x20000c14

080094c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80094d0:	f7ff fa90 	bl	80089f4 <xTaskGetTickCount>
 80094d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80094d6:	4b0b      	ldr	r3, [pc, #44]	; (8009504 <prvSampleTimeNow+0x3c>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	68fa      	ldr	r2, [r7, #12]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d205      	bcs.n	80094ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80094e0:	f000 f930 	bl	8009744 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2201      	movs	r2, #1
 80094e8:	601a      	str	r2, [r3, #0]
 80094ea:	e002      	b.n	80094f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80094f2:	4a04      	ldr	r2, [pc, #16]	; (8009504 <prvSampleTimeNow+0x3c>)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80094f8:	68fb      	ldr	r3, [r7, #12]
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	20000c24 	.word	0x20000c24

08009508 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b086      	sub	sp, #24
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	607a      	str	r2, [r7, #4]
 8009514:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009516:	2300      	movs	r3, #0
 8009518:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	68ba      	ldr	r2, [r7, #8]
 800951e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	68fa      	ldr	r2, [r7, #12]
 8009524:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009526:	68ba      	ldr	r2, [r7, #8]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	429a      	cmp	r2, r3
 800952c:	d812      	bhi.n	8009554 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	1ad2      	subs	r2, r2, r3
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	699b      	ldr	r3, [r3, #24]
 8009538:	429a      	cmp	r2, r3
 800953a:	d302      	bcc.n	8009542 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800953c:	2301      	movs	r3, #1
 800953e:	617b      	str	r3, [r7, #20]
 8009540:	e01b      	b.n	800957a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009542:	4b10      	ldr	r3, [pc, #64]	; (8009584 <prvInsertTimerInActiveList+0x7c>)
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	3304      	adds	r3, #4
 800954a:	4619      	mov	r1, r3
 800954c:	4610      	mov	r0, r2
 800954e:	f7fe fa3a 	bl	80079c6 <vListInsert>
 8009552:	e012      	b.n	800957a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	429a      	cmp	r2, r3
 800955a:	d206      	bcs.n	800956a <prvInsertTimerInActiveList+0x62>
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	429a      	cmp	r2, r3
 8009562:	d302      	bcc.n	800956a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009564:	2301      	movs	r3, #1
 8009566:	617b      	str	r3, [r7, #20]
 8009568:	e007      	b.n	800957a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800956a:	4b07      	ldr	r3, [pc, #28]	; (8009588 <prvInsertTimerInActiveList+0x80>)
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	3304      	adds	r3, #4
 8009572:	4619      	mov	r1, r3
 8009574:	4610      	mov	r0, r2
 8009576:	f7fe fa26 	bl	80079c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800957a:	697b      	ldr	r3, [r7, #20]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3718      	adds	r7, #24
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	20000c18 	.word	0x20000c18
 8009588:	20000c14 	.word	0x20000c14

0800958c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b08e      	sub	sp, #56	; 0x38
 8009590:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009592:	e0c6      	b.n	8009722 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2b00      	cmp	r3, #0
 8009598:	da17      	bge.n	80095ca <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800959a:	1d3b      	adds	r3, r7, #4
 800959c:	3304      	adds	r3, #4
 800959e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80095a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d109      	bne.n	80095ba <prvProcessReceivedCommands+0x2e>
 80095a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095aa:	f383 8811 	msr	BASEPRI, r3
 80095ae:	f3bf 8f6f 	isb	sy
 80095b2:	f3bf 8f4f 	dsb	sy
 80095b6:	61fb      	str	r3, [r7, #28]
 80095b8:	e7fe      	b.n	80095b8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80095ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095c0:	6850      	ldr	r0, [r2, #4]
 80095c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095c4:	6892      	ldr	r2, [r2, #8]
 80095c6:	4611      	mov	r1, r2
 80095c8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f2c0 80a7 	blt.w	8009720 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80095d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d8:	695b      	ldr	r3, [r3, #20]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d004      	beq.n	80095e8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e0:	3304      	adds	r3, #4
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7fe fa28 	bl	8007a38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80095e8:	463b      	mov	r3, r7
 80095ea:	4618      	mov	r0, r3
 80095ec:	f7ff ff6c 	bl	80094c8 <prvSampleTimeNow>
 80095f0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2b09      	cmp	r3, #9
 80095f6:	f200 8094 	bhi.w	8009722 <prvProcessReceivedCommands+0x196>
 80095fa:	a201      	add	r2, pc, #4	; (adr r2, 8009600 <prvProcessReceivedCommands+0x74>)
 80095fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009600:	08009629 	.word	0x08009629
 8009604:	08009629 	.word	0x08009629
 8009608:	08009629 	.word	0x08009629
 800960c:	0800969b 	.word	0x0800969b
 8009610:	080096af 	.word	0x080096af
 8009614:	080096f7 	.word	0x080096f7
 8009618:	08009629 	.word	0x08009629
 800961c:	08009629 	.word	0x08009629
 8009620:	0800969b 	.word	0x0800969b
 8009624:	080096af 	.word	0x080096af
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800962e:	f043 0301 	orr.w	r3, r3, #1
 8009632:	b2da      	uxtb	r2, r3
 8009634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009636:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800963a:	68ba      	ldr	r2, [r7, #8]
 800963c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963e:	699b      	ldr	r3, [r3, #24]
 8009640:	18d1      	adds	r1, r2, r3
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009646:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009648:	f7ff ff5e 	bl	8009508 <prvInsertTimerInActiveList>
 800964c:	4603      	mov	r3, r0
 800964e:	2b00      	cmp	r3, #0
 8009650:	d067      	beq.n	8009722 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009654:	6a1b      	ldr	r3, [r3, #32]
 8009656:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009658:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800965a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009660:	f003 0304 	and.w	r3, r3, #4
 8009664:	2b00      	cmp	r3, #0
 8009666:	d05c      	beq.n	8009722 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009668:	68ba      	ldr	r2, [r7, #8]
 800966a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966c:	699b      	ldr	r3, [r3, #24]
 800966e:	441a      	add	r2, r3
 8009670:	2300      	movs	r3, #0
 8009672:	9300      	str	r3, [sp, #0]
 8009674:	2300      	movs	r3, #0
 8009676:	2100      	movs	r1, #0
 8009678:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800967a:	f7ff fe09 	bl	8009290 <xTimerGenericCommand>
 800967e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009680:	6a3b      	ldr	r3, [r7, #32]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d14d      	bne.n	8009722 <prvProcessReceivedCommands+0x196>
 8009686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968a:	f383 8811 	msr	BASEPRI, r3
 800968e:	f3bf 8f6f 	isb	sy
 8009692:	f3bf 8f4f 	dsb	sy
 8009696:	61bb      	str	r3, [r7, #24]
 8009698:	e7fe      	b.n	8009698 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800969a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096a0:	f023 0301 	bic.w	r3, r3, #1
 80096a4:	b2da      	uxtb	r2, r3
 80096a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80096ac:	e039      	b.n	8009722 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80096ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096b4:	f043 0301 	orr.w	r3, r3, #1
 80096b8:	b2da      	uxtb	r2, r3
 80096ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80096c0:	68ba      	ldr	r2, [r7, #8]
 80096c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80096c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c8:	699b      	ldr	r3, [r3, #24]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d109      	bne.n	80096e2 <prvProcessReceivedCommands+0x156>
 80096ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d2:	f383 8811 	msr	BASEPRI, r3
 80096d6:	f3bf 8f6f 	isb	sy
 80096da:	f3bf 8f4f 	dsb	sy
 80096de:	617b      	str	r3, [r7, #20]
 80096e0:	e7fe      	b.n	80096e0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80096e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e4:	699a      	ldr	r2, [r3, #24]
 80096e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e8:	18d1      	adds	r1, r2, r3
 80096ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096f0:	f7ff ff0a 	bl	8009508 <prvInsertTimerInActiveList>
					break;
 80096f4:	e015      	b.n	8009722 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80096f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096fc:	f003 0302 	and.w	r3, r3, #2
 8009700:	2b00      	cmp	r3, #0
 8009702:	d103      	bne.n	800970c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8009704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009706:	f000 fbc5 	bl	8009e94 <vPortFree>
 800970a:	e00a      	b.n	8009722 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800970c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009712:	f023 0301 	bic.w	r3, r3, #1
 8009716:	b2da      	uxtb	r2, r3
 8009718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800971e:	e000      	b.n	8009722 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009720:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009722:	4b07      	ldr	r3, [pc, #28]	; (8009740 <prvProcessReceivedCommands+0x1b4>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	1d39      	adds	r1, r7, #4
 8009728:	2200      	movs	r2, #0
 800972a:	4618      	mov	r0, r3
 800972c:	f7fe fc3a 	bl	8007fa4 <xQueueReceive>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	f47f af2e 	bne.w	8009594 <prvProcessReceivedCommands+0x8>
	}
}
 8009738:	bf00      	nop
 800973a:	3730      	adds	r7, #48	; 0x30
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}
 8009740:	20000c1c 	.word	0x20000c1c

08009744 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b088      	sub	sp, #32
 8009748:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800974a:	e047      	b.n	80097dc <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800974c:	4b2d      	ldr	r3, [pc, #180]	; (8009804 <prvSwitchTimerLists+0xc0>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009756:	4b2b      	ldr	r3, [pc, #172]	; (8009804 <prvSwitchTimerLists+0xc0>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	3304      	adds	r3, #4
 8009764:	4618      	mov	r0, r3
 8009766:	f7fe f967 	bl	8007a38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	6a1b      	ldr	r3, [r3, #32]
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009778:	f003 0304 	and.w	r3, r3, #4
 800977c:	2b00      	cmp	r3, #0
 800977e:	d02d      	beq.n	80097dc <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	699b      	ldr	r3, [r3, #24]
 8009784:	693a      	ldr	r2, [r7, #16]
 8009786:	4413      	add	r3, r2
 8009788:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800978a:	68ba      	ldr	r2, [r7, #8]
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	429a      	cmp	r2, r3
 8009790:	d90e      	bls.n	80097b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	68ba      	ldr	r2, [r7, #8]
 8009796:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800979e:	4b19      	ldr	r3, [pc, #100]	; (8009804 <prvSwitchTimerLists+0xc0>)
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	3304      	adds	r3, #4
 80097a6:	4619      	mov	r1, r3
 80097a8:	4610      	mov	r0, r2
 80097aa:	f7fe f90c 	bl	80079c6 <vListInsert>
 80097ae:	e015      	b.n	80097dc <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80097b0:	2300      	movs	r3, #0
 80097b2:	9300      	str	r3, [sp, #0]
 80097b4:	2300      	movs	r3, #0
 80097b6:	693a      	ldr	r2, [r7, #16]
 80097b8:	2100      	movs	r1, #0
 80097ba:	68f8      	ldr	r0, [r7, #12]
 80097bc:	f7ff fd68 	bl	8009290 <xTimerGenericCommand>
 80097c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d109      	bne.n	80097dc <prvSwitchTimerLists+0x98>
 80097c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097cc:	f383 8811 	msr	BASEPRI, r3
 80097d0:	f3bf 8f6f 	isb	sy
 80097d4:	f3bf 8f4f 	dsb	sy
 80097d8:	603b      	str	r3, [r7, #0]
 80097da:	e7fe      	b.n	80097da <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80097dc:	4b09      	ldr	r3, [pc, #36]	; (8009804 <prvSwitchTimerLists+0xc0>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1b2      	bne.n	800974c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80097e6:	4b07      	ldr	r3, [pc, #28]	; (8009804 <prvSwitchTimerLists+0xc0>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80097ec:	4b06      	ldr	r3, [pc, #24]	; (8009808 <prvSwitchTimerLists+0xc4>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a04      	ldr	r2, [pc, #16]	; (8009804 <prvSwitchTimerLists+0xc0>)
 80097f2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80097f4:	4a04      	ldr	r2, [pc, #16]	; (8009808 <prvSwitchTimerLists+0xc4>)
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	6013      	str	r3, [r2, #0]
}
 80097fa:	bf00      	nop
 80097fc:	3718      	adds	r7, #24
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	20000c14 	.word	0x20000c14
 8009808:	20000c18 	.word	0x20000c18

0800980c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009812:	f000 f963 	bl	8009adc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009816:	4b15      	ldr	r3, [pc, #84]	; (800986c <prvCheckForValidListAndQueue+0x60>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d120      	bne.n	8009860 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800981e:	4814      	ldr	r0, [pc, #80]	; (8009870 <prvCheckForValidListAndQueue+0x64>)
 8009820:	f7fe f880 	bl	8007924 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009824:	4813      	ldr	r0, [pc, #76]	; (8009874 <prvCheckForValidListAndQueue+0x68>)
 8009826:	f7fe f87d 	bl	8007924 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800982a:	4b13      	ldr	r3, [pc, #76]	; (8009878 <prvCheckForValidListAndQueue+0x6c>)
 800982c:	4a10      	ldr	r2, [pc, #64]	; (8009870 <prvCheckForValidListAndQueue+0x64>)
 800982e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009830:	4b12      	ldr	r3, [pc, #72]	; (800987c <prvCheckForValidListAndQueue+0x70>)
 8009832:	4a10      	ldr	r2, [pc, #64]	; (8009874 <prvCheckForValidListAndQueue+0x68>)
 8009834:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009836:	2300      	movs	r3, #0
 8009838:	9300      	str	r3, [sp, #0]
 800983a:	4b11      	ldr	r3, [pc, #68]	; (8009880 <prvCheckForValidListAndQueue+0x74>)
 800983c:	4a11      	ldr	r2, [pc, #68]	; (8009884 <prvCheckForValidListAndQueue+0x78>)
 800983e:	2110      	movs	r1, #16
 8009840:	200a      	movs	r0, #10
 8009842:	f7fe f98b 	bl	8007b5c <xQueueGenericCreateStatic>
 8009846:	4602      	mov	r2, r0
 8009848:	4b08      	ldr	r3, [pc, #32]	; (800986c <prvCheckForValidListAndQueue+0x60>)
 800984a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800984c:	4b07      	ldr	r3, [pc, #28]	; (800986c <prvCheckForValidListAndQueue+0x60>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d005      	beq.n	8009860 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009854:	4b05      	ldr	r3, [pc, #20]	; (800986c <prvCheckForValidListAndQueue+0x60>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	490b      	ldr	r1, [pc, #44]	; (8009888 <prvCheckForValidListAndQueue+0x7c>)
 800985a:	4618      	mov	r0, r3
 800985c:	f7fe fd8e 	bl	800837c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009860:	f000 f96a 	bl	8009b38 <vPortExitCritical>
}
 8009864:	bf00      	nop
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	20000c1c 	.word	0x20000c1c
 8009870:	20000bec 	.word	0x20000bec
 8009874:	20000c00 	.word	0x20000c00
 8009878:	20000c14 	.word	0x20000c14
 800987c:	20000c18 	.word	0x20000c18
 8009880:	20000cc8 	.word	0x20000cc8
 8009884:	20000c28 	.word	0x20000c28
 8009888:	0800a180 	.word	0x0800a180

0800988c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800988c:	b480      	push	{r7}
 800988e:	b085      	sub	sp, #20
 8009890:	af00      	add	r7, sp, #0
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	3b04      	subs	r3, #4
 800989c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80098a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	3b04      	subs	r3, #4
 80098aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	f023 0201 	bic.w	r2, r3, #1
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	3b04      	subs	r3, #4
 80098ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80098bc:	4a0c      	ldr	r2, [pc, #48]	; (80098f0 <pxPortInitialiseStack+0x64>)
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	3b14      	subs	r3, #20
 80098c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	3b04      	subs	r3, #4
 80098d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f06f 0202 	mvn.w	r2, #2
 80098da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	3b20      	subs	r3, #32
 80098e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80098e2:	68fb      	ldr	r3, [r7, #12]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3714      	adds	r7, #20
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr
 80098f0:	080098f5 	.word	0x080098f5

080098f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80098f4:	b480      	push	{r7}
 80098f6:	b085      	sub	sp, #20
 80098f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80098fa:	2300      	movs	r3, #0
 80098fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80098fe:	4b11      	ldr	r3, [pc, #68]	; (8009944 <prvTaskExitError+0x50>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009906:	d009      	beq.n	800991c <prvTaskExitError+0x28>
 8009908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990c:	f383 8811 	msr	BASEPRI, r3
 8009910:	f3bf 8f6f 	isb	sy
 8009914:	f3bf 8f4f 	dsb	sy
 8009918:	60fb      	str	r3, [r7, #12]
 800991a:	e7fe      	b.n	800991a <prvTaskExitError+0x26>
 800991c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009920:	f383 8811 	msr	BASEPRI, r3
 8009924:	f3bf 8f6f 	isb	sy
 8009928:	f3bf 8f4f 	dsb	sy
 800992c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800992e:	bf00      	nop
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d0fc      	beq.n	8009930 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009936:	bf00      	nop
 8009938:	3714      	adds	r7, #20
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr
 8009942:	bf00      	nop
 8009944:	20000010 	.word	0x20000010
	...

08009950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009950:	4b07      	ldr	r3, [pc, #28]	; (8009970 <pxCurrentTCBConst2>)
 8009952:	6819      	ldr	r1, [r3, #0]
 8009954:	6808      	ldr	r0, [r1, #0]
 8009956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800995a:	f380 8809 	msr	PSP, r0
 800995e:	f3bf 8f6f 	isb	sy
 8009962:	f04f 0000 	mov.w	r0, #0
 8009966:	f380 8811 	msr	BASEPRI, r0
 800996a:	4770      	bx	lr
 800996c:	f3af 8000 	nop.w

08009970 <pxCurrentTCBConst2>:
 8009970:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009974:	bf00      	nop
 8009976:	bf00      	nop

08009978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009978:	4808      	ldr	r0, [pc, #32]	; (800999c <prvPortStartFirstTask+0x24>)
 800997a:	6800      	ldr	r0, [r0, #0]
 800997c:	6800      	ldr	r0, [r0, #0]
 800997e:	f380 8808 	msr	MSP, r0
 8009982:	f04f 0000 	mov.w	r0, #0
 8009986:	f380 8814 	msr	CONTROL, r0
 800998a:	b662      	cpsie	i
 800998c:	b661      	cpsie	f
 800998e:	f3bf 8f4f 	dsb	sy
 8009992:	f3bf 8f6f 	isb	sy
 8009996:	df00      	svc	0
 8009998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800999a:	bf00      	nop
 800999c:	e000ed08 	.word	0xe000ed08

080099a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b086      	sub	sp, #24
 80099a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80099a6:	4b44      	ldr	r3, [pc, #272]	; (8009ab8 <xPortStartScheduler+0x118>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a44      	ldr	r2, [pc, #272]	; (8009abc <xPortStartScheduler+0x11c>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d109      	bne.n	80099c4 <xPortStartScheduler+0x24>
 80099b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b4:	f383 8811 	msr	BASEPRI, r3
 80099b8:	f3bf 8f6f 	isb	sy
 80099bc:	f3bf 8f4f 	dsb	sy
 80099c0:	613b      	str	r3, [r7, #16]
 80099c2:	e7fe      	b.n	80099c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80099c4:	4b3c      	ldr	r3, [pc, #240]	; (8009ab8 <xPortStartScheduler+0x118>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a3d      	ldr	r2, [pc, #244]	; (8009ac0 <xPortStartScheduler+0x120>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d109      	bne.n	80099e2 <xPortStartScheduler+0x42>
 80099ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d2:	f383 8811 	msr	BASEPRI, r3
 80099d6:	f3bf 8f6f 	isb	sy
 80099da:	f3bf 8f4f 	dsb	sy
 80099de:	60fb      	str	r3, [r7, #12]
 80099e0:	e7fe      	b.n	80099e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80099e2:	4b38      	ldr	r3, [pc, #224]	; (8009ac4 <xPortStartScheduler+0x124>)
 80099e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	22ff      	movs	r2, #255	; 0xff
 80099f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80099fc:	78fb      	ldrb	r3, [r7, #3]
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a04:	b2da      	uxtb	r2, r3
 8009a06:	4b30      	ldr	r3, [pc, #192]	; (8009ac8 <xPortStartScheduler+0x128>)
 8009a08:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a0a:	4b30      	ldr	r3, [pc, #192]	; (8009acc <xPortStartScheduler+0x12c>)
 8009a0c:	2207      	movs	r2, #7
 8009a0e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a10:	e009      	b.n	8009a26 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009a12:	4b2e      	ldr	r3, [pc, #184]	; (8009acc <xPortStartScheduler+0x12c>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	3b01      	subs	r3, #1
 8009a18:	4a2c      	ldr	r2, [pc, #176]	; (8009acc <xPortStartScheduler+0x12c>)
 8009a1a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a1c:	78fb      	ldrb	r3, [r7, #3]
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	005b      	lsls	r3, r3, #1
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a26:	78fb      	ldrb	r3, [r7, #3]
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a2e:	2b80      	cmp	r3, #128	; 0x80
 8009a30:	d0ef      	beq.n	8009a12 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009a32:	4b26      	ldr	r3, [pc, #152]	; (8009acc <xPortStartScheduler+0x12c>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f1c3 0307 	rsb	r3, r3, #7
 8009a3a:	2b04      	cmp	r3, #4
 8009a3c:	d009      	beq.n	8009a52 <xPortStartScheduler+0xb2>
 8009a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a42:	f383 8811 	msr	BASEPRI, r3
 8009a46:	f3bf 8f6f 	isb	sy
 8009a4a:	f3bf 8f4f 	dsb	sy
 8009a4e:	60bb      	str	r3, [r7, #8]
 8009a50:	e7fe      	b.n	8009a50 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009a52:	4b1e      	ldr	r3, [pc, #120]	; (8009acc <xPortStartScheduler+0x12c>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	021b      	lsls	r3, r3, #8
 8009a58:	4a1c      	ldr	r2, [pc, #112]	; (8009acc <xPortStartScheduler+0x12c>)
 8009a5a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009a5c:	4b1b      	ldr	r3, [pc, #108]	; (8009acc <xPortStartScheduler+0x12c>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009a64:	4a19      	ldr	r2, [pc, #100]	; (8009acc <xPortStartScheduler+0x12c>)
 8009a66:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	b2da      	uxtb	r2, r3
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a70:	4b17      	ldr	r3, [pc, #92]	; (8009ad0 <xPortStartScheduler+0x130>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a16      	ldr	r2, [pc, #88]	; (8009ad0 <xPortStartScheduler+0x130>)
 8009a76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009a7a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a7c:	4b14      	ldr	r3, [pc, #80]	; (8009ad0 <xPortStartScheduler+0x130>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a13      	ldr	r2, [pc, #76]	; (8009ad0 <xPortStartScheduler+0x130>)
 8009a82:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009a86:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009a88:	f000 f8d6 	bl	8009c38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009a8c:	4b11      	ldr	r3, [pc, #68]	; (8009ad4 <xPortStartScheduler+0x134>)
 8009a8e:	2200      	movs	r2, #0
 8009a90:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009a92:	f000 f8f5 	bl	8009c80 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009a96:	4b10      	ldr	r3, [pc, #64]	; (8009ad8 <xPortStartScheduler+0x138>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a0f      	ldr	r2, [pc, #60]	; (8009ad8 <xPortStartScheduler+0x138>)
 8009a9c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009aa0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009aa2:	f7ff ff69 	bl	8009978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009aa6:	f7ff f86d 	bl	8008b84 <vTaskSwitchContext>
	prvTaskExitError();
 8009aaa:	f7ff ff23 	bl	80098f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3718      	adds	r7, #24
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	e000ed00 	.word	0xe000ed00
 8009abc:	410fc271 	.word	0x410fc271
 8009ac0:	410fc270 	.word	0x410fc270
 8009ac4:	e000e400 	.word	0xe000e400
 8009ac8:	20000d18 	.word	0x20000d18
 8009acc:	20000d1c 	.word	0x20000d1c
 8009ad0:	e000ed20 	.word	0xe000ed20
 8009ad4:	20000010 	.word	0x20000010
 8009ad8:	e000ef34 	.word	0xe000ef34

08009adc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae6:	f383 8811 	msr	BASEPRI, r3
 8009aea:	f3bf 8f6f 	isb	sy
 8009aee:	f3bf 8f4f 	dsb	sy
 8009af2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009af4:	4b0e      	ldr	r3, [pc, #56]	; (8009b30 <vPortEnterCritical+0x54>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	3301      	adds	r3, #1
 8009afa:	4a0d      	ldr	r2, [pc, #52]	; (8009b30 <vPortEnterCritical+0x54>)
 8009afc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009afe:	4b0c      	ldr	r3, [pc, #48]	; (8009b30 <vPortEnterCritical+0x54>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d10e      	bne.n	8009b24 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b06:	4b0b      	ldr	r3, [pc, #44]	; (8009b34 <vPortEnterCritical+0x58>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d009      	beq.n	8009b24 <vPortEnterCritical+0x48>
 8009b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b14:	f383 8811 	msr	BASEPRI, r3
 8009b18:	f3bf 8f6f 	isb	sy
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	603b      	str	r3, [r7, #0]
 8009b22:	e7fe      	b.n	8009b22 <vPortEnterCritical+0x46>
	}
}
 8009b24:	bf00      	nop
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr
 8009b30:	20000010 	.word	0x20000010
 8009b34:	e000ed04 	.word	0xe000ed04

08009b38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b3e:	4b11      	ldr	r3, [pc, #68]	; (8009b84 <vPortExitCritical+0x4c>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d109      	bne.n	8009b5a <vPortExitCritical+0x22>
 8009b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4a:	f383 8811 	msr	BASEPRI, r3
 8009b4e:	f3bf 8f6f 	isb	sy
 8009b52:	f3bf 8f4f 	dsb	sy
 8009b56:	607b      	str	r3, [r7, #4]
 8009b58:	e7fe      	b.n	8009b58 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009b5a:	4b0a      	ldr	r3, [pc, #40]	; (8009b84 <vPortExitCritical+0x4c>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	3b01      	subs	r3, #1
 8009b60:	4a08      	ldr	r2, [pc, #32]	; (8009b84 <vPortExitCritical+0x4c>)
 8009b62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009b64:	4b07      	ldr	r3, [pc, #28]	; (8009b84 <vPortExitCritical+0x4c>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d104      	bne.n	8009b76 <vPortExitCritical+0x3e>
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009b76:	bf00      	nop
 8009b78:	370c      	adds	r7, #12
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	20000010 	.word	0x20000010
	...

08009b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009b90:	f3ef 8009 	mrs	r0, PSP
 8009b94:	f3bf 8f6f 	isb	sy
 8009b98:	4b15      	ldr	r3, [pc, #84]	; (8009bf0 <pxCurrentTCBConst>)
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	f01e 0f10 	tst.w	lr, #16
 8009ba0:	bf08      	it	eq
 8009ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009baa:	6010      	str	r0, [r2, #0]
 8009bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009bb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009bb4:	f380 8811 	msr	BASEPRI, r0
 8009bb8:	f3bf 8f4f 	dsb	sy
 8009bbc:	f3bf 8f6f 	isb	sy
 8009bc0:	f7fe ffe0 	bl	8008b84 <vTaskSwitchContext>
 8009bc4:	f04f 0000 	mov.w	r0, #0
 8009bc8:	f380 8811 	msr	BASEPRI, r0
 8009bcc:	bc09      	pop	{r0, r3}
 8009bce:	6819      	ldr	r1, [r3, #0]
 8009bd0:	6808      	ldr	r0, [r1, #0]
 8009bd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd6:	f01e 0f10 	tst.w	lr, #16
 8009bda:	bf08      	it	eq
 8009bdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009be0:	f380 8809 	msr	PSP, r0
 8009be4:	f3bf 8f6f 	isb	sy
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop
 8009bec:	f3af 8000 	nop.w

08009bf0 <pxCurrentTCBConst>:
 8009bf0:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009bf4:	bf00      	nop
 8009bf6:	bf00      	nop

08009bf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8009bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c10:	f7fe ff00 	bl	8008a14 <xTaskIncrementTick>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d003      	beq.n	8009c22 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c1a:	4b06      	ldr	r3, [pc, #24]	; (8009c34 <SysTick_Handler+0x3c>)
 8009c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c20:	601a      	str	r2, [r3, #0]
 8009c22:	2300      	movs	r3, #0
 8009c24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009c2c:	bf00      	nop
 8009c2e:	3708      	adds	r7, #8
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	e000ed04 	.word	0xe000ed04

08009c38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009c38:	b480      	push	{r7}
 8009c3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c3c:	4b0b      	ldr	r3, [pc, #44]	; (8009c6c <vPortSetupTimerInterrupt+0x34>)
 8009c3e:	2200      	movs	r2, #0
 8009c40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c42:	4b0b      	ldr	r3, [pc, #44]	; (8009c70 <vPortSetupTimerInterrupt+0x38>)
 8009c44:	2200      	movs	r2, #0
 8009c46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c48:	4b0a      	ldr	r3, [pc, #40]	; (8009c74 <vPortSetupTimerInterrupt+0x3c>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4a0a      	ldr	r2, [pc, #40]	; (8009c78 <vPortSetupTimerInterrupt+0x40>)
 8009c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c52:	099b      	lsrs	r3, r3, #6
 8009c54:	4a09      	ldr	r2, [pc, #36]	; (8009c7c <vPortSetupTimerInterrupt+0x44>)
 8009c56:	3b01      	subs	r3, #1
 8009c58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009c5a:	4b04      	ldr	r3, [pc, #16]	; (8009c6c <vPortSetupTimerInterrupt+0x34>)
 8009c5c:	2207      	movs	r2, #7
 8009c5e:	601a      	str	r2, [r3, #0]
}
 8009c60:	bf00      	nop
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr
 8009c6a:	bf00      	nop
 8009c6c:	e000e010 	.word	0xe000e010
 8009c70:	e000e018 	.word	0xe000e018
 8009c74:	20000004 	.word	0x20000004
 8009c78:	10624dd3 	.word	0x10624dd3
 8009c7c:	e000e014 	.word	0xe000e014

08009c80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009c80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009c90 <vPortEnableVFP+0x10>
 8009c84:	6801      	ldr	r1, [r0, #0]
 8009c86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009c8a:	6001      	str	r1, [r0, #0]
 8009c8c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009c8e:	bf00      	nop
 8009c90:	e000ed88 	.word	0xe000ed88

08009c94 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009c9a:	f3ef 8305 	mrs	r3, IPSR
 8009c9e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2b0f      	cmp	r3, #15
 8009ca4:	d913      	bls.n	8009cce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009ca6:	4a16      	ldr	r2, [pc, #88]	; (8009d00 <vPortValidateInterruptPriority+0x6c>)
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	4413      	add	r3, r2
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009cb0:	4b14      	ldr	r3, [pc, #80]	; (8009d04 <vPortValidateInterruptPriority+0x70>)
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	7afa      	ldrb	r2, [r7, #11]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d209      	bcs.n	8009cce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cbe:	f383 8811 	msr	BASEPRI, r3
 8009cc2:	f3bf 8f6f 	isb	sy
 8009cc6:	f3bf 8f4f 	dsb	sy
 8009cca:	607b      	str	r3, [r7, #4]
 8009ccc:	e7fe      	b.n	8009ccc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009cce:	4b0e      	ldr	r3, [pc, #56]	; (8009d08 <vPortValidateInterruptPriority+0x74>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009cd6:	4b0d      	ldr	r3, [pc, #52]	; (8009d0c <vPortValidateInterruptPriority+0x78>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d909      	bls.n	8009cf2 <vPortValidateInterruptPriority+0x5e>
 8009cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	603b      	str	r3, [r7, #0]
 8009cf0:	e7fe      	b.n	8009cf0 <vPortValidateInterruptPriority+0x5c>
	}
 8009cf2:	bf00      	nop
 8009cf4:	3714      	adds	r7, #20
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr
 8009cfe:	bf00      	nop
 8009d00:	e000e3f0 	.word	0xe000e3f0
 8009d04:	20000d18 	.word	0x20000d18
 8009d08:	e000ed0c 	.word	0xe000ed0c
 8009d0c:	20000d1c 	.word	0x20000d1c

08009d10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b08a      	sub	sp, #40	; 0x28
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009d1c:	f7fe fdc0 	bl	80088a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d20:	4b57      	ldr	r3, [pc, #348]	; (8009e80 <pvPortMalloc+0x170>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d101      	bne.n	8009d2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d28:	f000 f90c 	bl	8009f44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d2c:	4b55      	ldr	r3, [pc, #340]	; (8009e84 <pvPortMalloc+0x174>)
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	4013      	ands	r3, r2
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	f040 808c 	bne.w	8009e52 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d01c      	beq.n	8009d7a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009d40:	2208      	movs	r2, #8
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4413      	add	r3, r2
 8009d46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f003 0307 	and.w	r3, r3, #7
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d013      	beq.n	8009d7a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f023 0307 	bic.w	r3, r3, #7
 8009d58:	3308      	adds	r3, #8
 8009d5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f003 0307 	and.w	r3, r3, #7
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d009      	beq.n	8009d7a <pvPortMalloc+0x6a>
 8009d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d6a:	f383 8811 	msr	BASEPRI, r3
 8009d6e:	f3bf 8f6f 	isb	sy
 8009d72:	f3bf 8f4f 	dsb	sy
 8009d76:	617b      	str	r3, [r7, #20]
 8009d78:	e7fe      	b.n	8009d78 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d068      	beq.n	8009e52 <pvPortMalloc+0x142>
 8009d80:	4b41      	ldr	r3, [pc, #260]	; (8009e88 <pvPortMalloc+0x178>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d863      	bhi.n	8009e52 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009d8a:	4b40      	ldr	r3, [pc, #256]	; (8009e8c <pvPortMalloc+0x17c>)
 8009d8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009d8e:	4b3f      	ldr	r3, [pc, #252]	; (8009e8c <pvPortMalloc+0x17c>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d94:	e004      	b.n	8009da0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d903      	bls.n	8009db2 <pvPortMalloc+0xa2>
 8009daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d1f1      	bne.n	8009d96 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009db2:	4b33      	ldr	r3, [pc, #204]	; (8009e80 <pvPortMalloc+0x170>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d04a      	beq.n	8009e52 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009dbc:	6a3b      	ldr	r3, [r7, #32]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2208      	movs	r2, #8
 8009dc2:	4413      	add	r3, r2
 8009dc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	6a3b      	ldr	r3, [r7, #32]
 8009dcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd0:	685a      	ldr	r2, [r3, #4]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	1ad2      	subs	r2, r2, r3
 8009dd6:	2308      	movs	r3, #8
 8009dd8:	005b      	lsls	r3, r3, #1
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d91e      	bls.n	8009e1c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	4413      	add	r3, r2
 8009de4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	f003 0307 	and.w	r3, r3, #7
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d009      	beq.n	8009e04 <pvPortMalloc+0xf4>
 8009df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df4:	f383 8811 	msr	BASEPRI, r3
 8009df8:	f3bf 8f6f 	isb	sy
 8009dfc:	f3bf 8f4f 	dsb	sy
 8009e00:	613b      	str	r3, [r7, #16]
 8009e02:	e7fe      	b.n	8009e02 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e06:	685a      	ldr	r2, [r3, #4]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	1ad2      	subs	r2, r2, r3
 8009e0c:	69bb      	ldr	r3, [r7, #24]
 8009e0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e16:	69b8      	ldr	r0, [r7, #24]
 8009e18:	f000 f8f6 	bl	800a008 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e1c:	4b1a      	ldr	r3, [pc, #104]	; (8009e88 <pvPortMalloc+0x178>)
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	1ad3      	subs	r3, r2, r3
 8009e26:	4a18      	ldr	r2, [pc, #96]	; (8009e88 <pvPortMalloc+0x178>)
 8009e28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e2a:	4b17      	ldr	r3, [pc, #92]	; (8009e88 <pvPortMalloc+0x178>)
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	4b18      	ldr	r3, [pc, #96]	; (8009e90 <pvPortMalloc+0x180>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d203      	bcs.n	8009e3e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e36:	4b14      	ldr	r3, [pc, #80]	; (8009e88 <pvPortMalloc+0x178>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a15      	ldr	r2, [pc, #84]	; (8009e90 <pvPortMalloc+0x180>)
 8009e3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e40:	685a      	ldr	r2, [r3, #4]
 8009e42:	4b10      	ldr	r3, [pc, #64]	; (8009e84 <pvPortMalloc+0x174>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	431a      	orrs	r2, r3
 8009e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4e:	2200      	movs	r2, #0
 8009e50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009e52:	f7fe fd33 	bl	80088bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e56:	69fb      	ldr	r3, [r7, #28]
 8009e58:	f003 0307 	and.w	r3, r3, #7
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d009      	beq.n	8009e74 <pvPortMalloc+0x164>
 8009e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e64:	f383 8811 	msr	BASEPRI, r3
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	f3bf 8f4f 	dsb	sy
 8009e70:	60fb      	str	r3, [r7, #12]
 8009e72:	e7fe      	b.n	8009e72 <pvPortMalloc+0x162>
	return pvReturn;
 8009e74:	69fb      	ldr	r3, [r7, #28]
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3728      	adds	r7, #40	; 0x28
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	200018e0 	.word	0x200018e0
 8009e84:	200018ec 	.word	0x200018ec
 8009e88:	200018e4 	.word	0x200018e4
 8009e8c:	200018d8 	.word	0x200018d8
 8009e90:	200018e8 	.word	0x200018e8

08009e94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b086      	sub	sp, #24
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d046      	beq.n	8009f34 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009ea6:	2308      	movs	r3, #8
 8009ea8:	425b      	negs	r3, r3
 8009eaa:	697a      	ldr	r2, [r7, #20]
 8009eac:	4413      	add	r3, r2
 8009eae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	685a      	ldr	r2, [r3, #4]
 8009eb8:	4b20      	ldr	r3, [pc, #128]	; (8009f3c <vPortFree+0xa8>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d109      	bne.n	8009ed6 <vPortFree+0x42>
 8009ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec6:	f383 8811 	msr	BASEPRI, r3
 8009eca:	f3bf 8f6f 	isb	sy
 8009ece:	f3bf 8f4f 	dsb	sy
 8009ed2:	60fb      	str	r3, [r7, #12]
 8009ed4:	e7fe      	b.n	8009ed4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d009      	beq.n	8009ef2 <vPortFree+0x5e>
 8009ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee2:	f383 8811 	msr	BASEPRI, r3
 8009ee6:	f3bf 8f6f 	isb	sy
 8009eea:	f3bf 8f4f 	dsb	sy
 8009eee:	60bb      	str	r3, [r7, #8]
 8009ef0:	e7fe      	b.n	8009ef0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	685a      	ldr	r2, [r3, #4]
 8009ef6:	4b11      	ldr	r3, [pc, #68]	; (8009f3c <vPortFree+0xa8>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4013      	ands	r3, r2
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d019      	beq.n	8009f34 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d115      	bne.n	8009f34 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	685a      	ldr	r2, [r3, #4]
 8009f0c:	4b0b      	ldr	r3, [pc, #44]	; (8009f3c <vPortFree+0xa8>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	43db      	mvns	r3, r3
 8009f12:	401a      	ands	r2, r3
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009f18:	f7fe fcc2 	bl	80088a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	685a      	ldr	r2, [r3, #4]
 8009f20:	4b07      	ldr	r3, [pc, #28]	; (8009f40 <vPortFree+0xac>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4413      	add	r3, r2
 8009f26:	4a06      	ldr	r2, [pc, #24]	; (8009f40 <vPortFree+0xac>)
 8009f28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009f2a:	6938      	ldr	r0, [r7, #16]
 8009f2c:	f000 f86c 	bl	800a008 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009f30:	f7fe fcc4 	bl	80088bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009f34:	bf00      	nop
 8009f36:	3718      	adds	r7, #24
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}
 8009f3c:	200018ec 	.word	0x200018ec
 8009f40:	200018e4 	.word	0x200018e4

08009f44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009f4a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8009f4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009f50:	4b27      	ldr	r3, [pc, #156]	; (8009ff0 <prvHeapInit+0xac>)
 8009f52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f003 0307 	and.w	r3, r3, #7
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d00c      	beq.n	8009f78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	3307      	adds	r3, #7
 8009f62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f023 0307 	bic.w	r3, r3, #7
 8009f6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009f6c:	68ba      	ldr	r2, [r7, #8]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	1ad3      	subs	r3, r2, r3
 8009f72:	4a1f      	ldr	r2, [pc, #124]	; (8009ff0 <prvHeapInit+0xac>)
 8009f74:	4413      	add	r3, r2
 8009f76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009f7c:	4a1d      	ldr	r2, [pc, #116]	; (8009ff4 <prvHeapInit+0xb0>)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009f82:	4b1c      	ldr	r3, [pc, #112]	; (8009ff4 <prvHeapInit+0xb0>)
 8009f84:	2200      	movs	r2, #0
 8009f86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	68ba      	ldr	r2, [r7, #8]
 8009f8c:	4413      	add	r3, r2
 8009f8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009f90:	2208      	movs	r2, #8
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	1a9b      	subs	r3, r3, r2
 8009f96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f023 0307 	bic.w	r3, r3, #7
 8009f9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	4a15      	ldr	r2, [pc, #84]	; (8009ff8 <prvHeapInit+0xb4>)
 8009fa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009fa6:	4b14      	ldr	r3, [pc, #80]	; (8009ff8 <prvHeapInit+0xb4>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	2200      	movs	r2, #0
 8009fac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009fae:	4b12      	ldr	r3, [pc, #72]	; (8009ff8 <prvHeapInit+0xb4>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	68fa      	ldr	r2, [r7, #12]
 8009fbe:	1ad2      	subs	r2, r2, r3
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009fc4:	4b0c      	ldr	r3, [pc, #48]	; (8009ff8 <prvHeapInit+0xb4>)
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	4a0a      	ldr	r2, [pc, #40]	; (8009ffc <prvHeapInit+0xb8>)
 8009fd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	4a09      	ldr	r2, [pc, #36]	; (800a000 <prvHeapInit+0xbc>)
 8009fda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009fdc:	4b09      	ldr	r3, [pc, #36]	; (800a004 <prvHeapInit+0xc0>)
 8009fde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009fe2:	601a      	str	r2, [r3, #0]
}
 8009fe4:	bf00      	nop
 8009fe6:	3714      	adds	r7, #20
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr
 8009ff0:	20000d20 	.word	0x20000d20
 8009ff4:	200018d8 	.word	0x200018d8
 8009ff8:	200018e0 	.word	0x200018e0
 8009ffc:	200018e8 	.word	0x200018e8
 800a000:	200018e4 	.word	0x200018e4
 800a004:	200018ec 	.word	0x200018ec

0800a008 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a008:	b480      	push	{r7}
 800a00a:	b085      	sub	sp, #20
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a010:	4b28      	ldr	r3, [pc, #160]	; (800a0b4 <prvInsertBlockIntoFreeList+0xac>)
 800a012:	60fb      	str	r3, [r7, #12]
 800a014:	e002      	b.n	800a01c <prvInsertBlockIntoFreeList+0x14>
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	60fb      	str	r3, [r7, #12]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	429a      	cmp	r2, r3
 800a024:	d8f7      	bhi.n	800a016 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	68ba      	ldr	r2, [r7, #8]
 800a030:	4413      	add	r3, r2
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	429a      	cmp	r2, r3
 800a036:	d108      	bne.n	800a04a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	685a      	ldr	r2, [r3, #4]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	441a      	add	r2, r3
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	68ba      	ldr	r2, [r7, #8]
 800a054:	441a      	add	r2, r3
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d118      	bne.n	800a090 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	4b15      	ldr	r3, [pc, #84]	; (800a0b8 <prvInsertBlockIntoFreeList+0xb0>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	429a      	cmp	r2, r3
 800a068:	d00d      	beq.n	800a086 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	685a      	ldr	r2, [r3, #4]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	441a      	add	r2, r3
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	681a      	ldr	r2, [r3, #0]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	601a      	str	r2, [r3, #0]
 800a084:	e008      	b.n	800a098 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a086:	4b0c      	ldr	r3, [pc, #48]	; (800a0b8 <prvInsertBlockIntoFreeList+0xb0>)
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	601a      	str	r2, [r3, #0]
 800a08e:	e003      	b.n	800a098 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a098:	68fa      	ldr	r2, [r7, #12]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d002      	beq.n	800a0a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0a6:	bf00      	nop
 800a0a8:	3714      	adds	r7, #20
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr
 800a0b2:	bf00      	nop
 800a0b4:	200018d8 	.word	0x200018d8
 800a0b8:	200018e0 	.word	0x200018e0

0800a0bc <__libc_init_array>:
 800a0bc:	b570      	push	{r4, r5, r6, lr}
 800a0be:	4e0d      	ldr	r6, [pc, #52]	; (800a0f4 <__libc_init_array+0x38>)
 800a0c0:	4c0d      	ldr	r4, [pc, #52]	; (800a0f8 <__libc_init_array+0x3c>)
 800a0c2:	1ba4      	subs	r4, r4, r6
 800a0c4:	10a4      	asrs	r4, r4, #2
 800a0c6:	2500      	movs	r5, #0
 800a0c8:	42a5      	cmp	r5, r4
 800a0ca:	d109      	bne.n	800a0e0 <__libc_init_array+0x24>
 800a0cc:	4e0b      	ldr	r6, [pc, #44]	; (800a0fc <__libc_init_array+0x40>)
 800a0ce:	4c0c      	ldr	r4, [pc, #48]	; (800a100 <__libc_init_array+0x44>)
 800a0d0:	f000 f82c 	bl	800a12c <_init>
 800a0d4:	1ba4      	subs	r4, r4, r6
 800a0d6:	10a4      	asrs	r4, r4, #2
 800a0d8:	2500      	movs	r5, #0
 800a0da:	42a5      	cmp	r5, r4
 800a0dc:	d105      	bne.n	800a0ea <__libc_init_array+0x2e>
 800a0de:	bd70      	pop	{r4, r5, r6, pc}
 800a0e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a0e4:	4798      	blx	r3
 800a0e6:	3501      	adds	r5, #1
 800a0e8:	e7ee      	b.n	800a0c8 <__libc_init_array+0xc>
 800a0ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a0ee:	4798      	blx	r3
 800a0f0:	3501      	adds	r5, #1
 800a0f2:	e7f2      	b.n	800a0da <__libc_init_array+0x1e>
 800a0f4:	0800a238 	.word	0x0800a238
 800a0f8:	0800a238 	.word	0x0800a238
 800a0fc:	0800a238 	.word	0x0800a238
 800a100:	0800a23c 	.word	0x0800a23c

0800a104 <memcpy>:
 800a104:	b510      	push	{r4, lr}
 800a106:	1e43      	subs	r3, r0, #1
 800a108:	440a      	add	r2, r1
 800a10a:	4291      	cmp	r1, r2
 800a10c:	d100      	bne.n	800a110 <memcpy+0xc>
 800a10e:	bd10      	pop	{r4, pc}
 800a110:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a114:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a118:	e7f7      	b.n	800a10a <memcpy+0x6>

0800a11a <memset>:
 800a11a:	4402      	add	r2, r0
 800a11c:	4603      	mov	r3, r0
 800a11e:	4293      	cmp	r3, r2
 800a120:	d100      	bne.n	800a124 <memset+0xa>
 800a122:	4770      	bx	lr
 800a124:	f803 1b01 	strb.w	r1, [r3], #1
 800a128:	e7f9      	b.n	800a11e <memset+0x4>
	...

0800a12c <_init>:
 800a12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a12e:	bf00      	nop
 800a130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a132:	bc08      	pop	{r3}
 800a134:	469e      	mov	lr, r3
 800a136:	4770      	bx	lr

0800a138 <_fini>:
 800a138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a13a:	bf00      	nop
 800a13c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a13e:	bc08      	pop	{r3}
 800a140:	469e      	mov	lr, r3
 800a142:	4770      	bx	lr
